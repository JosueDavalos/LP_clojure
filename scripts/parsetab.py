
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARGS CHAR COM_SIM CONJUNTO COR_DER COR_IZQ DEF DEFN DIVISION DO DOSEQ ENTERO EQUAL EQUAL_2 EQUAL_OP FALSE FLOTANTE GREATER_THAN GREATER_THAN_EQUAL HASHMAP IF LESS_THAN LESS_THAN_EQUAL LISTA LOOP METODOFIRST METODONTH NOMBRE NOT NOT_EQUAL NULL OR PAR_DER PAR_IZQ PRINT PRINTLN PRODUCT READLINE RECUR REST SORTEDMAP STR STRING SUM TRUE VECTOR WHEN WHILEexpresion_aritmetic : PAR_IZQ valor operadorMat expresion PAR_DER\n    expresion : valor \n    valor : ENTERO\n            | NOMBRE\n    operadorMat : SUM \n                    | REST \n                    | PRODUCT \n                    | DIVISION\n    '
    
_lr_action_items = {'PAR_IZQ':([0,],[2,]),'$end':([1,13,],[0,-1,]),'ENTERO':([2,6,7,8,9,10,],[4,4,-5,-6,-7,-8,]),'NOMBRE':([2,6,7,8,9,10,],[5,5,-5,-6,-7,-8,]),'SUM':([3,4,5,],[7,-3,-4,]),'REST':([3,4,5,],[8,-3,-4,]),'PRODUCT':([3,4,5,],[9,-3,-4,]),'DIVISION':([3,4,5,],[10,-3,-4,]),'PAR_DER':([4,5,11,12,],[-3,-4,-2,13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresion_aritmetic':([0,],[1,]),'valor':([2,6,],[3,11,]),'operadorMat':([3,],[6,]),'expresion':([6,],[12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresion_aritmetic","S'",1,None,None,None),
  ('expresion_aritmetic -> PAR_IZQ valor operadorMat expresion PAR_DER','expresion_aritmetic',5,'p_expresion_aritmetic','sintactico.py',9),
  ('expresion -> valor','expresion',1,'p_expresion','sintactico.py',13),
  ('valor -> ENTERO','valor',1,'p_valor','sintactico.py',18),
  ('valor -> NOMBRE','valor',1,'p_valor','sintactico.py',19),
  ('operadorMat -> SUM','operadorMat',1,'p_operadorMat','sintactico.py',23),
  ('operadorMat -> REST','operadorMat',1,'p_operadorMat','sintactico.py',24),
  ('operadorMat -> PRODUCT','operadorMat',1,'p_operadorMat','sintactico.py',25),
  ('operadorMat -> DIVISION','operadorMat',1,'p_operadorMat','sintactico.py',26),
]
