
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COM_SIM CONJUNTO COR_DER COR_IZQ DEF DEFN DIVISION DO DOSEQ ENTERO EQUAL FALSE FLOTANTE GREATER_THAN GREATER_THAN_EQUAL HASH HASHMAP IF LESS_THAN LESS_THAN_EQUAL LISTA LLAV_DER LLAV_IZQ LOOP MAP METODOFIRST METODONTH NOMBRE NOT NOT_EQUAL NULL OR PAR_DER PAR_IZQ PRINT PRINTLN PRODUCT READLINE RECUR REST SORTEDMAP STR STRING SUM TRUE VECTOR WHEN WHILEalgoritmo : variable\n                 | expresion\n                 | imprimir\n                 | controlStructures\n    variable : PAR_IZQ DEF NOMBRE expresion PAR_DERexpresion : valor\n                 | estructura\n                 | expresionAritmetica\n                 | comparation\n                 | comparationLogic\n     controlStructures : if\n                          | while\n                          | loop\n    loop : PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER\n    when : PAR_IZQ WHEN comparation algoritmo recur PAR_DER\n    recur : PAR_IZQ RECUR expresionAritmetica PAR_DER\n    while : PAR_IZQ WHILE comparation PAR_IZQ DO algoritmo PAR_DER\n    if : PAR_IZQ IF booleanExpresion expresion expresion PAR_DER\n          | PAR_IZQ IF booleanExpresion expresion PAR_DER\n    booleanExpresion : FALSE\n                        | TRUE\n                        | comparationLogic\n                        | comparation\n    imprimir : PAR_IZQ imprimirOptions expresion PAR_DER\n    comparationLogic :  PAR_IZQ operadorLogic valor valor PAR_DER \n                      | PAR_IZQ NOT valor PAR_DER\n    comparation : PAR_IZQ operadorCompare valor valor PAR_DERexpresionAritmetica : PAR_IZQ operadorMath numberSerie PAR_DER\n    numberSerie : numero\n                    | NOMBRE\n                    | expresionAritmetica\n                    | numero numberSerie\n                    | NOMBRE numberSerie\n                    | expresionAritmetica numberSerie\n    estructura : PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER\n                  | COM_SIM PAR_IZQ compuesto PAR_DER\n    estructura : PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER\n                  | HASH LLAV_IZQ compuesto LLAV_DER\n    estructura : PAR_IZQ VECTOR compuesto PAR_DER\n                  | COR_IZQ compuesto COR_DER\n    estructura : LLAV_IZQ parclaves LLAV_DER\n                  | PAR_IZQ mapas parclaves PAR_DER\n    mapas : SORTEDMAP REST MAP\n             | HASHMAP REST MAP\n    compuesto : valor\n                 | valor compuesto\n    parclaves : STRING STRING\n                 | STRING STRING parclaves\n    valor : numero\n             | NOMBRE\n             | booleano\n             | cadena\n    cadena : STRING\n              | PAR_IZQ STR STRING STRING PAR_DER\n    booleano : TRUE\n                | FALSE\n    numero : ENTERO\n              | FLOTANTE\n    operadorMath : SUM \n                    | REST \n                    | PRODUCT \n                    | DIVISION\n    operadorCompare : EQUAL\n                        | NOT_EQUAL\n                        | GREATER_THAN\n                        | LESS_THAN\n                        | GREATER_THAN_EQUAL\n                        | LESS_THAN_EQUAL\n    operadorLogic : AND\n                     | OR\n    imprimirOptions : PRINT\n                        | PRINTLN\n    '
    
_lr_action_items = {'PAR_IZQ':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,22,23,24,25,26,27,29,30,32,34,35,36,37,38,39,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,63,65,68,69,74,75,76,77,78,81,82,83,84,85,87,88,94,96,99,101,102,103,104,110,111,117,118,120,123,124,126,127,128,129,130,132,136,137,138,139,140,141,144,],[6,-1,-2,-3,-4,-50,-6,-7,-8,-9,-10,-11,-12,-13,-49,-51,-52,58,64,-57,-58,-55,-56,-53,66,68,64,72,64,64,64,80,86,-71,-72,-60,-59,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,64,64,64,66,64,101,72,72,72,64,64,66,-20,-21,-22,-23,112,64,-41,-40,-24,64,-39,-42,-28,-26,66,-36,-38,-5,-27,-25,-19,6,134,-54,-35,-18,-37,-17,86,-14,6,142,72,]),'NOMBRE':([0,7,8,9,10,11,12,16,17,18,22,23,24,25,26,27,28,29,32,34,35,36,37,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,63,65,68,74,75,76,77,78,81,82,83,84,85,88,94,96,101,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[7,-50,-6,-7,-8,-9,-10,-49,-51,-52,7,-57,-58,-55,-56,-53,65,7,7,75,7,7,7,-71,-72,-60,-59,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,7,7,7,7,7,75,75,75,7,7,7,-20,-21,-22,-23,7,-41,-40,7,-39,-42,-28,-26,7,-36,-38,-27,-25,7,-54,-35,-37,7,]),'COM_SIM':([0,7,8,9,10,11,12,16,17,18,23,24,25,26,27,29,31,42,43,65,81,82,83,84,85,94,96,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[19,-50,-6,-7,-8,-9,-10,-49,-51,-52,-57,-58,-55,-56,-53,19,69,-71,-72,19,19,-20,-21,-22,-23,-41,-40,-39,-42,-28,-26,19,-36,-38,-27,-25,19,-54,-35,-37,19,]),'HASH':([0,7,8,9,10,11,12,16,17,18,23,24,25,26,27,29,42,43,65,81,82,83,84,85,94,96,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[20,-50,-6,-7,-8,-9,-10,-49,-51,-52,-57,-58,-55,-56,-53,20,-71,-72,20,20,-20,-21,-22,-23,-41,-40,-39,-42,-28,-26,20,-36,-38,-27,-25,20,-54,-35,-37,20,]),'COR_IZQ':([0,7,8,9,10,11,12,16,17,18,23,24,25,26,27,29,40,42,43,65,81,82,83,84,85,94,96,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[22,-50,-6,-7,-8,-9,-10,-49,-51,-52,-57,-58,-55,-56,-53,22,88,-71,-72,22,22,-20,-21,-22,-23,-41,-40,-39,-42,-28,-26,22,-36,-38,-27,-25,22,-54,-35,-37,22,]),'LLAV_IZQ':([0,7,8,9,10,11,12,16,17,18,20,23,24,25,26,27,29,42,43,65,81,82,83,84,85,94,96,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[21,-50,-6,-7,-8,-9,-10,-49,-51,-52,59,-57,-58,-55,-56,-53,21,-71,-72,21,21,-20,-21,-22,-23,-41,-40,-39,-42,-28,-26,21,-36,-38,-27,-25,21,-54,-35,-37,21,]),'ENTERO':([0,7,8,9,10,11,12,16,17,18,22,23,24,25,26,27,29,32,34,35,36,37,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,63,65,68,74,75,76,77,78,81,82,83,84,85,88,94,96,101,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[23,-50,-6,-7,-8,-9,-10,-49,-51,-52,23,-57,-58,-55,-56,-53,23,23,23,23,23,23,-71,-72,-60,-59,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,23,23,23,23,23,23,23,23,23,23,23,-20,-21,-22,-23,23,-41,-40,23,-39,-42,-28,-26,23,-36,-38,-27,-25,23,-54,-35,-37,23,]),'FLOTANTE':([0,7,8,9,10,11,12,16,17,18,22,23,24,25,26,27,29,32,34,35,36,37,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,63,65,68,74,75,76,77,78,81,82,83,84,85,88,94,96,101,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[24,-50,-6,-7,-8,-9,-10,-49,-51,-52,24,-57,-58,-55,-56,-53,24,24,24,24,24,24,-71,-72,-60,-59,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,24,24,24,24,24,24,24,24,24,24,24,-20,-21,-22,-23,24,-41,-40,24,-39,-42,-28,-26,24,-36,-38,-27,-25,24,-54,-35,-37,24,]),'TRUE':([0,7,8,9,10,11,12,16,17,18,22,23,24,25,26,27,29,32,35,36,37,38,42,43,50,51,52,53,54,55,56,57,58,59,63,65,68,77,78,81,82,83,84,85,88,94,96,101,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[25,-50,-6,-7,-8,-9,-10,-49,-51,-52,25,-57,-58,-55,-56,-53,25,25,25,25,25,83,-71,-72,-63,-64,-65,-66,-67,-68,-69,-70,25,25,25,25,25,25,25,25,-20,-21,-22,-23,25,-41,-40,25,-39,-42,-28,-26,25,-36,-38,-27,-25,25,-54,-35,-37,25,]),'FALSE':([0,7,8,9,10,11,12,16,17,18,22,23,24,25,26,27,29,32,35,36,37,38,42,43,50,51,52,53,54,55,56,57,58,59,63,65,68,77,78,81,82,83,84,85,88,94,96,101,102,103,104,110,111,117,118,123,124,127,129,130,136,140,],[26,-50,-6,-7,-8,-9,-10,-49,-51,-52,26,-57,-58,-55,-56,-53,26,26,26,26,26,82,-71,-72,-63,-64,-65,-66,-67,-68,-69,-70,26,26,26,26,26,26,26,26,-20,-21,-22,-23,26,-41,-40,26,-39,-42,-28,-26,26,-36,-38,-27,-25,26,-54,-35,-37,26,]),'STRING':([0,7,8,9,10,11,12,16,17,18,21,22,23,24,25,26,27,29,32,33,35,36,37,41,42,43,50,51,52,53,54,55,56,57,58,59,61,63,65,68,77,78,81,82,83,84,85,88,89,94,95,96,101,102,103,104,110,111,115,116,117,118,123,124,127,129,130,136,140,],[27,-50,-6,-7,-8,-9,-10,-49,-51,-52,61,27,-57,-58,-55,-56,-53,27,27,61,27,27,27,89,-71,-72,-63,-64,-65,-66,-67,-68,-69,-70,27,27,95,27,27,27,27,27,27,-20,-21,-22,-23,27,114,-41,61,-40,27,-39,-42,-28,-26,27,-43,-44,-36,-38,-27,-25,27,-54,-35,-37,27,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,23,24,25,26,27,94,96,99,102,103,104,110,117,118,120,123,124,126,129,130,132,136,137,139,],[0,-1,-2,-3,-4,-50,-6,-7,-8,-9,-10,-11,-12,-13,-49,-51,-52,-57,-58,-55,-56,-53,-41,-40,-24,-39,-42,-28,-26,-36,-38,-5,-27,-25,-19,-54,-35,-18,-37,-17,-14,]),'PAR_DER':([2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,23,24,25,26,27,63,67,70,71,73,74,75,76,79,92,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,114,117,118,119,120,121,122,123,124,125,126,129,130,131,132,133,135,136,137,139,143,145,146,147,],[-1,-2,-3,-4,-50,-6,-7,-8,-9,-10,-11,-12,-13,-49,-51,-52,-57,-58,-55,-56,-53,-45,99,102,103,104,-29,-30,-31,110,117,-41,-47,-40,-46,120,-24,121,-39,-42,-28,-32,-33,-34,123,124,-26,126,129,-36,-38,-48,-5,130,131,-27,-25,132,-19,-54,-35,136,-18,137,139,-37,-17,-14,145,-15,147,-16,]),'DEF':([6,],[28,]),'LISTA':([6,66,],[30,30,]),'CONJUNTO':([6,66,],[31,31,]),'VECTOR':([6,66,],[32,32,]),'NOT':([6,66,80,],[37,37,37,]),'IF':([6,],[38,]),'WHILE':([6,],[39,]),'LOOP':([6,],[40,]),'STR':([6,64,66,],[41,41,41,]),'PRINT':([6,],[42,]),'PRINTLN':([6,],[43,]),'SORTEDMAP':([6,66,],[44,44,]),'HASHMAP':([6,66,],[46,46,]),'SUM':([6,66,72,],[47,47,47,]),'REST':([6,44,46,66,72,],[45,90,91,45,45,]),'PRODUCT':([6,66,72,],[48,48,48,]),'DIVISION':([6,66,72,],[49,49,49,]),'EQUAL':([6,66,80,86,],[50,50,50,50,]),'NOT_EQUAL':([6,66,80,86,],[51,51,51,51,]),'GREATER_THAN':([6,66,80,86,],[52,52,52,52,]),'LESS_THAN':([6,66,80,86,],[53,53,53,53,]),'GREATER_THAN_EQUAL':([6,66,80,86,],[54,54,54,54,]),'LESS_THAN_EQUAL':([6,66,80,86,],[55,55,55,55,]),'AND':([6,66,80,],[56,56,56,]),'OR':([6,66,80,],[57,57,57,]),'COR_DER':([7,16,17,18,23,24,25,26,27,62,63,97,113,129,],[-50,-49,-51,-52,-57,-58,-55,-56,-53,96,-45,-46,128,-54,]),'LLAV_DER':([7,16,17,18,23,24,25,26,27,60,63,93,95,97,119,129,],[-50,-49,-51,-52,-57,-58,-55,-56,-53,94,-45,118,-47,-46,-48,-54,]),'MAP':([90,91,],[115,116,]),'DO':([112,],[127,]),'WHEN':([134,],[138,]),'RECUR':([142,],[144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algoritmo':([0,127,140,],[1,133,141,]),'variable':([0,127,140,],[2,2,2,]),'expresion':([0,29,65,81,111,127,140,],[3,67,98,111,125,3,3,]),'imprimir':([0,127,140,],[4,4,4,]),'controlStructures':([0,127,140,],[5,5,5,]),'valor':([0,22,29,32,35,36,37,58,59,63,65,68,77,78,81,88,101,111,127,140,],[8,63,8,63,77,78,79,63,63,63,8,63,108,109,8,63,63,8,8,8,]),'estructura':([0,29,65,81,111,127,140,],[9,9,9,9,9,9,9,]),'expresionAritmetica':([0,29,34,65,74,75,76,81,111,127,140,144,],[10,10,76,10,76,76,76,10,10,10,10,146,]),'comparation':([0,29,38,39,65,81,111,127,138,140,],[11,11,85,87,11,11,11,11,140,11,]),'comparationLogic':([0,29,38,65,81,111,127,140,],[12,12,84,12,12,12,12,12,]),'if':([0,127,140,],[13,13,13,]),'while':([0,127,140,],[14,14,14,]),'loop':([0,127,140,],[15,15,15,]),'numero':([0,22,29,32,34,35,36,37,58,59,63,65,68,74,75,76,77,78,81,88,101,111,127,140,],[16,16,16,16,74,16,16,16,16,16,16,16,16,74,74,74,16,16,16,16,16,16,16,16,]),'booleano':([0,22,29,32,35,36,37,58,59,63,65,68,77,78,81,88,101,111,127,140,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'cadena':([0,22,29,32,35,36,37,58,59,63,65,68,77,78,81,88,101,111,127,140,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'imprimirOptions':([6,],[29,]),'mapas':([6,66,],[33,33,]),'operadorMath':([6,66,72,],[34,34,34,]),'operadorCompare':([6,66,80,86,],[35,35,35,35,]),'operadorLogic':([6,66,80,],[36,36,36,]),'parclaves':([21,33,95,],[60,71,119,]),'compuesto':([22,32,58,59,63,68,88,101,],[62,70,92,93,97,100,113,122,]),'numberSerie':([34,74,75,76,],[73,105,106,107,]),'booleanExpresion':([38,],[81,]),'when':([128,],[135,]),'recur':([141,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algoritmo","S'",1,None,None,None),
  ('algoritmo -> variable','algoritmo',1,'p_algoritmo','sintactico.py',12),
  ('algoritmo -> expresion','algoritmo',1,'p_algoritmo','sintactico.py',13),
  ('algoritmo -> imprimir','algoritmo',1,'p_algoritmo','sintactico.py',14),
  ('algoritmo -> controlStructures','algoritmo',1,'p_algoritmo','sintactico.py',15),
  ('variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER','variable',5,'p_variable','sintactico.py',19),
  ('expresion -> valor','expresion',1,'p_expresion','sintactico.py',22),
  ('expresion -> estructura','expresion',1,'p_expresion','sintactico.py',23),
  ('expresion -> expresionAritmetica','expresion',1,'p_expresion','sintactico.py',24),
  ('expresion -> comparation','expresion',1,'p_expresion','sintactico.py',25),
  ('expresion -> comparationLogic','expresion',1,'p_expresion','sintactico.py',26),
  ('controlStructures -> if','controlStructures',1,'p_control_structures','sintactico.py',31),
  ('controlStructures -> while','controlStructures',1,'p_control_structures','sintactico.py',32),
  ('controlStructures -> loop','controlStructures',1,'p_control_structures','sintactico.py',33),
  ('loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER','loop',7,'p_loop_statement','sintactico.py',37),
  ('when -> PAR_IZQ WHEN comparation algoritmo recur PAR_DER','when',6,'p_when_loop_statement','sintactico.py',41),
  ('recur -> PAR_IZQ RECUR expresionAritmetica PAR_DER','recur',4,'p_recur_loop_statement','sintactico.py',45),
  ('while -> PAR_IZQ WHILE comparation PAR_IZQ DO algoritmo PAR_DER','while',7,'p_while_statement','sintactico.py',49),
  ('if -> PAR_IZQ IF booleanExpresion expresion expresion PAR_DER','if',6,'p_if_statement','sintactico.py',53),
  ('if -> PAR_IZQ IF booleanExpresion expresion PAR_DER','if',5,'p_if_statement','sintactico.py',54),
  ('booleanExpresion -> FALSE','booleanExpresion',1,'p_boolean_expresion','sintactico.py',58),
  ('booleanExpresion -> TRUE','booleanExpresion',1,'p_boolean_expresion','sintactico.py',59),
  ('booleanExpresion -> comparationLogic','booleanExpresion',1,'p_boolean_expresion','sintactico.py',60),
  ('booleanExpresion -> comparation','booleanExpresion',1,'p_boolean_expresion','sintactico.py',61),
  ('imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER','imprimir',4,'p_imprimir','sintactico.py',65),
  ('comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER','comparationLogic',5,'p_comparation_logic','sintactico.py',69),
  ('comparationLogic -> PAR_IZQ NOT valor PAR_DER','comparationLogic',4,'p_comparation_logic','sintactico.py',70),
  ('comparation -> PAR_IZQ operadorCompare valor valor PAR_DER','comparation',5,'p_comparation','sintactico.py',74),
  ('expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER','expresionAritmetica',4,'p_expresion_aritmetic','sintactico.py',78),
  ('numberSerie -> numero','numberSerie',1,'p_number_serie','sintactico.py',82),
  ('numberSerie -> NOMBRE','numberSerie',1,'p_number_serie','sintactico.py',83),
  ('numberSerie -> expresionAritmetica','numberSerie',1,'p_number_serie','sintactico.py',84),
  ('numberSerie -> numero numberSerie','numberSerie',2,'p_number_serie','sintactico.py',85),
  ('numberSerie -> NOMBRE numberSerie','numberSerie',2,'p_number_serie','sintactico.py',86),
  ('numberSerie -> expresionAritmetica numberSerie','numberSerie',2,'p_number_serie','sintactico.py',87),
  ('estructura -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER','estructura',6,'p_estructura_lista','sintactico.py',95),
  ('estructura -> COM_SIM PAR_IZQ compuesto PAR_DER','estructura',4,'p_estructura_lista','sintactico.py',96),
  ('estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER','estructura',7,'p_estructura_conjunto','sintactico.py',100),
  ('estructura -> HASH LLAV_IZQ compuesto LLAV_DER','estructura',4,'p_estructura_conjunto','sintactico.py',101),
  ('estructura -> PAR_IZQ VECTOR compuesto PAR_DER','estructura',4,'p_estructura_vector','sintactico.py',106),
  ('estructura -> COR_IZQ compuesto COR_DER','estructura',3,'p_estructura_vector','sintactico.py',107),
  ('estructura -> LLAV_IZQ parclaves LLAV_DER','estructura',3,'p_estructura_mapa','sintactico.py',111),
  ('estructura -> PAR_IZQ mapas parclaves PAR_DER','estructura',4,'p_estructura_mapa','sintactico.py',112),
  ('mapas -> SORTEDMAP REST MAP','mapas',3,'p_mapas','sintactico.py',116),
  ('mapas -> HASHMAP REST MAP','mapas',3,'p_mapas','sintactico.py',117),
  ('compuesto -> valor','compuesto',1,'p_compuesto','sintactico.py',121),
  ('compuesto -> valor compuesto','compuesto',2,'p_compuesto','sintactico.py',122),
  ('parclaves -> STRING STRING','parclaves',2,'p_parclaves','sintactico.py',125),
  ('parclaves -> STRING STRING parclaves','parclaves',3,'p_parclaves','sintactico.py',126),
  ('valor -> numero','valor',1,'p_valor','sintactico.py',130),
  ('valor -> NOMBRE','valor',1,'p_valor','sintactico.py',131),
  ('valor -> booleano','valor',1,'p_valor','sintactico.py',132),
  ('valor -> cadena','valor',1,'p_valor','sintactico.py',133),
  ('cadena -> STRING','cadena',1,'p_cadena','sintactico.py',137),
  ('cadena -> PAR_IZQ STR STRING STRING PAR_DER','cadena',5,'p_cadena','sintactico.py',138),
  ('booleano -> TRUE','booleano',1,'p_booleano','sintactico.py',142),
  ('booleano -> FALSE','booleano',1,'p_booleano','sintactico.py',143),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico.py',147),
  ('numero -> FLOTANTE','numero',1,'p_numero','sintactico.py',148),
  ('operadorMath -> SUM','operadorMath',1,'p_operador_math','sintactico.py',155),
  ('operadorMath -> REST','operadorMath',1,'p_operador_math','sintactico.py',156),
  ('operadorMath -> PRODUCT','operadorMath',1,'p_operador_math','sintactico.py',157),
  ('operadorMath -> DIVISION','operadorMath',1,'p_operador_math','sintactico.py',158),
  ('operadorCompare -> EQUAL','operadorCompare',1,'p_operador_comparation','sintactico.py',163),
  ('operadorCompare -> NOT_EQUAL','operadorCompare',1,'p_operador_comparation','sintactico.py',164),
  ('operadorCompare -> GREATER_THAN','operadorCompare',1,'p_operador_comparation','sintactico.py',165),
  ('operadorCompare -> LESS_THAN','operadorCompare',1,'p_operador_comparation','sintactico.py',166),
  ('operadorCompare -> GREATER_THAN_EQUAL','operadorCompare',1,'p_operador_comparation','sintactico.py',167),
  ('operadorCompare -> LESS_THAN_EQUAL','operadorCompare',1,'p_operador_comparation','sintactico.py',168),
  ('operadorLogic -> AND','operadorLogic',1,'p_operador_logic','sintactico.py',172),
  ('operadorLogic -> OR','operadorLogic',1,'p_operador_logic','sintactico.py',173),
  ('imprimirOptions -> PRINT','imprimirOptions',1,'p_imprimir_options','sintactico.py',177),
  ('imprimirOptions -> PRINTLN','imprimirOptions',1,'p_imprimir_options','sintactico.py',178),
]
