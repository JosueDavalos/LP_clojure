Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sentencia_compuesta
Rule 1     sentencia_compuesta -> algoritmo
Rule 2     sentencia_compuesta -> algoritmo sentencia_compuesta
Rule 3     algoritmo -> variable
Rule 4     algoritmo -> expresion
Rule 5     algoritmo -> imprimir
Rule 6     algoritmo -> estructurasControl
Rule 7     algoritmo -> funcion
Rule 8     algoritmo -> metodo_lista
Rule 9     algoritmo -> metodo_conjunto
Rule 10    algoritmo -> metodo_vector
Rule 11    algoritmo -> metodo_mapas
Rule 12    funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
Rule 13    argumentos -> COR_IZQ argumento COR_DER
Rule 14    argumentos -> COR_IZQ COR_DER
Rule 15    argumento -> NOMBRE
Rule 16    argumento -> NOMBRE argumento
Rule 17    metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER
Rule 18    metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER
Rule 19    metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
Rule 20    metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER
Rule 21    metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER
Rule 22    metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
Rule 23    metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER
Rule 24    metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER
Rule 25    metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
Rule 26    metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
Rule 27    metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER
Rule 28    metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER
Rule 29    metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER
Rule 30    metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER
Rule 31    metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER
Rule 32    metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
Rule 33    metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER
Rule 34    metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER
Rule 35    metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER
Rule 36    metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER
Rule 37    variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER
Rule 38    expresion -> valor
Rule 39    expresion -> estructura
Rule 40    expresion -> expresionAritmetica
Rule 41    expresion -> comparacion
Rule 42    expresion -> comparacionLogica
Rule 43    expresion -> input
Rule 44    estructura -> estructura_mapa
Rule 45    estructura -> estructura_lista
Rule 46    estructura -> estructura_conjunto
Rule 47    estructura -> estructura_vector
Rule 48    estructurasControl -> if
Rule 49    estructurasControl -> while
Rule 50    estructurasControl -> loop
Rule 51    loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
Rule 52    when -> PAR_IZQ WHEN comparacion algoritmo recur PAR_DER
Rule 53    recur -> PAR_IZQ RECUR expresionAritmetica PAR_DER
Rule 54    while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
Rule 55    if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER
Rule 56    expresionBooleana -> FALSE
Rule 57    expresionBooleana -> TRUE
Rule 58    expresionBooleana -> comparacionLogica
Rule 59    expresionBooleana -> comparacion
Rule 60    input -> PAR_IZQ READ REST LINE PAR_DER
Rule 61    imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER
Rule 62    comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER
Rule 63    comparacionLogica -> PAR_IZQ NOT valor PAR_DER
Rule 64    comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER
Rule 65    expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER
Rule 66    numberoSerie -> numero
Rule 67    numberoSerie -> NOMBRE
Rule 68    numberoSerie -> expresionAritmetica
Rule 69    numberoSerie -> numero numberoSerie
Rule 70    numberoSerie -> NOMBRE numberoSerie
Rule 71    numberoSerie -> expresionAritmetica numberoSerie
Rule 72    estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
Rule 73    estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER
Rule 74    estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER
Rule 75    estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
Rule 76    estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER
Rule 77    estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER
Rule 78    estructura_vector -> COR_IZQ compuesto COR_DER
Rule 79    estructura_mapa -> LLAV_IZQ parclaves LLAV_DER
Rule 80    estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER
Rule 81    mapas -> SORTEDMAP REST MAP
Rule 82    mapas -> HASHMAP REST MAP
Rule 83    compuesto -> valor
Rule 84    compuesto -> valor compuesto
Rule 85    parclaves -> STRING STRING
Rule 86    parclaves -> STRING STRING COMA parclaves
Rule 87    parclaves -> STRING STRING parclaves
Rule 88    valor -> numero
Rule 89    valor -> NOMBRE
Rule 90    valor -> booleano
Rule 91    valor -> cadena
Rule 92    cadena -> STRING
Rule 93    cadena -> PAR_IZQ STR STRING STRING PAR_DER
Rule 94    booleano -> TRUE
Rule 95    booleano -> FALSE
Rule 96    numero -> ENTERO
Rule 97    numero -> FLOTANTE
Rule 98    operadorMat -> SUM
Rule 99    operadorMat -> REST
Rule 100   operadorMat -> PRODUCT
Rule 101   operadorMat -> DIVISION
Rule 102   operadorComparacion -> EQUAL
Rule 103   operadorComparacion -> NOT_EQUAL
Rule 104   operadorComparacion -> GREATER_THAN
Rule 105   operadorComparacion -> LESS_THAN
Rule 106   operadorComparacion -> GREATER_THAN_EQUAL
Rule 107   operadorComparacion -> LESS_THAN_EQUAL
Rule 108   operadorLogico -> AND
Rule 109   operadorLogico -> OR
Rule 110   opcionesImprimir -> PRINT
Rule 111   opcionesImprimir -> PRINTLN

Terminals, with rules where they appear

AND                  : 108
COMA                 : 86
COM_SIM              : 73 75
CONJ                 : 27 30
CONJUNTO             : 75
CONS                 : 23 24
COR_DER              : 13 14 51 78
COR_IZQ              : 13 14 51 78
DEF                  : 37
DEFN                 : 12
DIVISION             : 101
DO                   : 54
ENTERO               : 20 21 26 29 96
EQUAL                : 102
FALSE                : 56 95
FIRST                : 17 18
FLOTANTE             : 97
GET                  : 25 26 28 29 31 32 33 34
GREATER_THAN         : 104
GREATER_THAN_EQUAL   : 106
HASH                 : 76
HASHMAP              : 82
IF                   : 55
KEYS                 : 35 36
LESS_THAN            : 105
LESS_THAN_EQUAL      : 107
LINE                 : 60
LISTA                : 72 74
LLAV_DER             : 76 79
LLAV_IZQ             : 76 79
LOOP                 : 51
MAP                  : 81 82
NOMBRE               : 12 15 16 17 19 19 20 22 23 25 28 32 33 33 34 36 37 67 70 89
NOT                  : 63
NOT_EQUAL            : 103
NTH                  : 19 20 21 22
OR                   : 109
PAR_DER              : 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 51 52 53 54 54 55 60 61 62 63 64 65 72 72 73 74 75 75 77 80 93
PAR_IZQ              : 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 51 52 53 54 54 55 60 61 62 63 64 65 72 72 73 74 75 75 77 80 93
PRINT                : 110
PRINTLN              : 111
PRODUCT              : 100
READ                 : 60
RECUR                : 53
REST                 : 60 81 82 99
SORTEDMAP            : 81
STR                  : 93
STRING               : 31 34 85 85 86 86 87 87 92 93 93
SUM                  : 98
TRUE                 : 57 94
VECTOR               : 77
WHEN                 : 52
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

algoritmo            : 1 2 52
argumento            : 13 16
argumentos           : 12
booleano             : 90
cadena               : 91
comparacion          : 41 52 54 59
comparacionLogica    : 42 58
compuesto            : 51 72 73 74 75 76 77 78 84
estructura           : 39
estructura_conjunto  : 25 26 27 46
estructura_lista     : 18 21 22 24 45
estructura_mapa      : 31 32 35 44
estructura_vector    : 28 29 30 47
estructurasControl   : 6
expresion            : 4 37 61
expresionAritmetica  : 40 53 68 71
expresionBooleana    : 55
funcion              : 7
if                   : 48
imprimir             : 5
input                : 43
loop                 : 50
mapas                : 80
metodo_conjunto      : 9
metodo_lista         : 8
metodo_mapas         : 11
metodo_vector        : 10
numberoSerie         : 65 69 70 71
numero               : 66 69 88
opcionesImprimir     : 61
operadorComparacion  : 64
operadorLogico       : 62
operadorMat          : 65
parclaves            : 79 80 86 87
recur                : 52
sentencia_compuesta  : 2 12 54 55 0
valor                : 23 24 27 30 38 62 62 63 64 64 83 84
variable             : 3
when                 : 51
while                : 49

Parsing method: LALR

state 0

    (0) S' -> . sentencia_compuesta
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . estructurasControl
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (61) imprimir -> . PAR_IZQ opcionesImprimir expresion PAR_DER
    (48) estructurasControl -> . if
    (49) estructurasControl -> . while
    (50) estructurasControl -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (55) if -> . PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER
    (54) while -> . PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (51) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    sentencia_compuesta            shift and go to state 1
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    estructurasControl             shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacion                    shift and go to state 17
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    if                             shift and go to state 20
    while                          shift and go to state 21
    loop                           shift and go to state 22
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26
    estructura_mapa                shift and go to state 27
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 1

    (0) S' -> sentencia_compuesta .



state 2

    (1) sentencia_compuesta -> algoritmo .
    (2) sentencia_compuesta -> algoritmo . sentencia_compuesta
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . estructurasControl
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (61) imprimir -> . PAR_IZQ opcionesImprimir expresion PAR_DER
    (48) estructurasControl -> . if
    (49) estructurasControl -> . while
    (50) estructurasControl -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (55) if -> . PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER
    (54) while -> . PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (51) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    $end            reduce using rule 1 (sentencia_compuesta -> algoritmo .)
    PAR_DER         reduce using rule 1 (sentencia_compuesta -> algoritmo .)
    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    algoritmo                      shift and go to state 2
    sentencia_compuesta            shift and go to state 39
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    estructurasControl             shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacion                    shift and go to state 17
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    if                             shift and go to state 20
    while                          shift and go to state 21
    loop                           shift and go to state 22
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26
    estructura_mapa                shift and go to state 27
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 3

    (3) algoritmo -> variable .

    PAR_IZQ         reduce using rule 3 (algoritmo -> variable .)
    NOMBRE          reduce using rule 3 (algoritmo -> variable .)
    ENTERO          reduce using rule 3 (algoritmo -> variable .)
    FLOTANTE        reduce using rule 3 (algoritmo -> variable .)
    TRUE            reduce using rule 3 (algoritmo -> variable .)
    FALSE           reduce using rule 3 (algoritmo -> variable .)
    STRING          reduce using rule 3 (algoritmo -> variable .)
    LLAV_IZQ        reduce using rule 3 (algoritmo -> variable .)
    COM_SIM         reduce using rule 3 (algoritmo -> variable .)
    HASH            reduce using rule 3 (algoritmo -> variable .)
    COR_IZQ         reduce using rule 3 (algoritmo -> variable .)
    $end            reduce using rule 3 (algoritmo -> variable .)
    PAR_DER         reduce using rule 3 (algoritmo -> variable .)


state 4

    (4) algoritmo -> expresion .

    PAR_IZQ         reduce using rule 4 (algoritmo -> expresion .)
    NOMBRE          reduce using rule 4 (algoritmo -> expresion .)
    ENTERO          reduce using rule 4 (algoritmo -> expresion .)
    FLOTANTE        reduce using rule 4 (algoritmo -> expresion .)
    TRUE            reduce using rule 4 (algoritmo -> expresion .)
    FALSE           reduce using rule 4 (algoritmo -> expresion .)
    STRING          reduce using rule 4 (algoritmo -> expresion .)
    LLAV_IZQ        reduce using rule 4 (algoritmo -> expresion .)
    COM_SIM         reduce using rule 4 (algoritmo -> expresion .)
    HASH            reduce using rule 4 (algoritmo -> expresion .)
    COR_IZQ         reduce using rule 4 (algoritmo -> expresion .)
    $end            reduce using rule 4 (algoritmo -> expresion .)
    PAR_DER         reduce using rule 4 (algoritmo -> expresion .)


state 5

    (5) algoritmo -> imprimir .

    PAR_IZQ         reduce using rule 5 (algoritmo -> imprimir .)
    NOMBRE          reduce using rule 5 (algoritmo -> imprimir .)
    ENTERO          reduce using rule 5 (algoritmo -> imprimir .)
    FLOTANTE        reduce using rule 5 (algoritmo -> imprimir .)
    TRUE            reduce using rule 5 (algoritmo -> imprimir .)
    FALSE           reduce using rule 5 (algoritmo -> imprimir .)
    STRING          reduce using rule 5 (algoritmo -> imprimir .)
    LLAV_IZQ        reduce using rule 5 (algoritmo -> imprimir .)
    COM_SIM         reduce using rule 5 (algoritmo -> imprimir .)
    HASH            reduce using rule 5 (algoritmo -> imprimir .)
    COR_IZQ         reduce using rule 5 (algoritmo -> imprimir .)
    $end            reduce using rule 5 (algoritmo -> imprimir .)
    PAR_DER         reduce using rule 5 (algoritmo -> imprimir .)


state 6

    (6) algoritmo -> estructurasControl .

    PAR_IZQ         reduce using rule 6 (algoritmo -> estructurasControl .)
    NOMBRE          reduce using rule 6 (algoritmo -> estructurasControl .)
    ENTERO          reduce using rule 6 (algoritmo -> estructurasControl .)
    FLOTANTE        reduce using rule 6 (algoritmo -> estructurasControl .)
    TRUE            reduce using rule 6 (algoritmo -> estructurasControl .)
    FALSE           reduce using rule 6 (algoritmo -> estructurasControl .)
    STRING          reduce using rule 6 (algoritmo -> estructurasControl .)
    LLAV_IZQ        reduce using rule 6 (algoritmo -> estructurasControl .)
    COM_SIM         reduce using rule 6 (algoritmo -> estructurasControl .)
    HASH            reduce using rule 6 (algoritmo -> estructurasControl .)
    COR_IZQ         reduce using rule 6 (algoritmo -> estructurasControl .)
    $end            reduce using rule 6 (algoritmo -> estructurasControl .)
    PAR_DER         reduce using rule 6 (algoritmo -> estructurasControl .)


state 7

    (7) algoritmo -> funcion .

    PAR_IZQ         reduce using rule 7 (algoritmo -> funcion .)
    NOMBRE          reduce using rule 7 (algoritmo -> funcion .)
    ENTERO          reduce using rule 7 (algoritmo -> funcion .)
    FLOTANTE        reduce using rule 7 (algoritmo -> funcion .)
    TRUE            reduce using rule 7 (algoritmo -> funcion .)
    FALSE           reduce using rule 7 (algoritmo -> funcion .)
    STRING          reduce using rule 7 (algoritmo -> funcion .)
    LLAV_IZQ        reduce using rule 7 (algoritmo -> funcion .)
    COM_SIM         reduce using rule 7 (algoritmo -> funcion .)
    HASH            reduce using rule 7 (algoritmo -> funcion .)
    COR_IZQ         reduce using rule 7 (algoritmo -> funcion .)
    $end            reduce using rule 7 (algoritmo -> funcion .)
    PAR_DER         reduce using rule 7 (algoritmo -> funcion .)


state 8

    (8) algoritmo -> metodo_lista .

    PAR_IZQ         reduce using rule 8 (algoritmo -> metodo_lista .)
    NOMBRE          reduce using rule 8 (algoritmo -> metodo_lista .)
    ENTERO          reduce using rule 8 (algoritmo -> metodo_lista .)
    FLOTANTE        reduce using rule 8 (algoritmo -> metodo_lista .)
    TRUE            reduce using rule 8 (algoritmo -> metodo_lista .)
    FALSE           reduce using rule 8 (algoritmo -> metodo_lista .)
    STRING          reduce using rule 8 (algoritmo -> metodo_lista .)
    LLAV_IZQ        reduce using rule 8 (algoritmo -> metodo_lista .)
    COM_SIM         reduce using rule 8 (algoritmo -> metodo_lista .)
    HASH            reduce using rule 8 (algoritmo -> metodo_lista .)
    COR_IZQ         reduce using rule 8 (algoritmo -> metodo_lista .)
    $end            reduce using rule 8 (algoritmo -> metodo_lista .)
    PAR_DER         reduce using rule 8 (algoritmo -> metodo_lista .)


state 9

    (9) algoritmo -> metodo_conjunto .

    PAR_IZQ         reduce using rule 9 (algoritmo -> metodo_conjunto .)
    NOMBRE          reduce using rule 9 (algoritmo -> metodo_conjunto .)
    ENTERO          reduce using rule 9 (algoritmo -> metodo_conjunto .)
    FLOTANTE        reduce using rule 9 (algoritmo -> metodo_conjunto .)
    TRUE            reduce using rule 9 (algoritmo -> metodo_conjunto .)
    FALSE           reduce using rule 9 (algoritmo -> metodo_conjunto .)
    STRING          reduce using rule 9 (algoritmo -> metodo_conjunto .)
    LLAV_IZQ        reduce using rule 9 (algoritmo -> metodo_conjunto .)
    COM_SIM         reduce using rule 9 (algoritmo -> metodo_conjunto .)
    HASH            reduce using rule 9 (algoritmo -> metodo_conjunto .)
    COR_IZQ         reduce using rule 9 (algoritmo -> metodo_conjunto .)
    $end            reduce using rule 9 (algoritmo -> metodo_conjunto .)
    PAR_DER         reduce using rule 9 (algoritmo -> metodo_conjunto .)


state 10

    (10) algoritmo -> metodo_vector .

    PAR_IZQ         reduce using rule 10 (algoritmo -> metodo_vector .)
    NOMBRE          reduce using rule 10 (algoritmo -> metodo_vector .)
    ENTERO          reduce using rule 10 (algoritmo -> metodo_vector .)
    FLOTANTE        reduce using rule 10 (algoritmo -> metodo_vector .)
    TRUE            reduce using rule 10 (algoritmo -> metodo_vector .)
    FALSE           reduce using rule 10 (algoritmo -> metodo_vector .)
    STRING          reduce using rule 10 (algoritmo -> metodo_vector .)
    LLAV_IZQ        reduce using rule 10 (algoritmo -> metodo_vector .)
    COM_SIM         reduce using rule 10 (algoritmo -> metodo_vector .)
    HASH            reduce using rule 10 (algoritmo -> metodo_vector .)
    COR_IZQ         reduce using rule 10 (algoritmo -> metodo_vector .)
    $end            reduce using rule 10 (algoritmo -> metodo_vector .)
    PAR_DER         reduce using rule 10 (algoritmo -> metodo_vector .)


state 11

    (11) algoritmo -> metodo_mapas .

    PAR_IZQ         reduce using rule 11 (algoritmo -> metodo_mapas .)
    NOMBRE          reduce using rule 11 (algoritmo -> metodo_mapas .)
    ENTERO          reduce using rule 11 (algoritmo -> metodo_mapas .)
    FLOTANTE        reduce using rule 11 (algoritmo -> metodo_mapas .)
    TRUE            reduce using rule 11 (algoritmo -> metodo_mapas .)
    FALSE           reduce using rule 11 (algoritmo -> metodo_mapas .)
    STRING          reduce using rule 11 (algoritmo -> metodo_mapas .)
    LLAV_IZQ        reduce using rule 11 (algoritmo -> metodo_mapas .)
    COM_SIM         reduce using rule 11 (algoritmo -> metodo_mapas .)
    HASH            reduce using rule 11 (algoritmo -> metodo_mapas .)
    COR_IZQ         reduce using rule 11 (algoritmo -> metodo_mapas .)
    $end            reduce using rule 11 (algoritmo -> metodo_mapas .)
    PAR_DER         reduce using rule 11 (algoritmo -> metodo_mapas .)


state 12

    (37) variable -> PAR_IZQ . DEF NOMBRE expresion PAR_DER
    (61) imprimir -> PAR_IZQ . opcionesImprimir expresion PAR_DER
    (12) funcion -> PAR_IZQ . DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> PAR_IZQ . FIRST NOMBRE PAR_DER
    (18) metodo_lista -> PAR_IZQ . FIRST estructura_lista PAR_DER
    (19) metodo_lista -> PAR_IZQ . NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> PAR_IZQ . NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> PAR_IZQ . NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> PAR_IZQ . NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> PAR_IZQ . CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> PAR_IZQ . CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> PAR_IZQ . GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> PAR_IZQ . GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> PAR_IZQ . CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> PAR_IZQ . GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> PAR_IZQ . GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> PAR_IZQ . CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> PAR_IZQ . GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> PAR_IZQ . GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> PAR_IZQ . GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> PAR_IZQ . GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> PAR_IZQ . KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> PAR_IZQ . KEYS NOMBRE PAR_DER
    (65) expresionAritmetica -> PAR_IZQ . operadorMat numberoSerie PAR_DER
    (64) comparacion -> PAR_IZQ . operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> PAR_IZQ . operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> PAR_IZQ . NOT valor PAR_DER
    (60) input -> PAR_IZQ . READ REST LINE PAR_DER
    (55) if -> PAR_IZQ . IF expresionBooleana sentencia_compuesta PAR_DER
    (54) while -> PAR_IZQ . WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (51) loop -> PAR_IZQ . LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (93) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (80) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (72) estructura_lista -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_lista -> PAR_IZQ . LISTA compuesto PAR_DER
    (75) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (77) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER
    (110) opcionesImprimir -> . PRINT
    (111) opcionesImprimir -> . PRINTLN
    (98) operadorMat -> . SUM
    (99) operadorMat -> . REST
    (100) operadorMat -> . PRODUCT
    (101) operadorMat -> . DIVISION
    (102) operadorComparacion -> . EQUAL
    (103) operadorComparacion -> . NOT_EQUAL
    (104) operadorComparacion -> . GREATER_THAN
    (105) operadorComparacion -> . LESS_THAN
    (106) operadorComparacion -> . GREATER_THAN_EQUAL
    (107) operadorComparacion -> . LESS_THAN_EQUAL
    (108) operadorLogico -> . AND
    (109) operadorLogico -> . OR
    (81) mapas -> . SORTEDMAP REST MAP
    (82) mapas -> . HASHMAP REST MAP

    DEF             shift and go to state 40
    DEFN            shift and go to state 42
    FIRST           shift and go to state 43
    NTH             shift and go to state 44
    CONS            shift and go to state 45
    GET             shift and go to state 46
    CONJ            shift and go to state 47
    KEYS            shift and go to state 48
    NOT             shift and go to state 52
    READ            shift and go to state 53
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    LOOP            shift and go to state 57
    STR             shift and go to state 58
    LISTA           shift and go to state 60
    CONJUNTO        shift and go to state 61
    VECTOR          shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    SUM             shift and go to state 65
    REST            shift and go to state 54
    PRODUCT         shift and go to state 66
    DIVISION        shift and go to state 67
    EQUAL           shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_THAN       shift and go to state 71
    GREATER_THAN_EQUAL shift and go to state 72
    LESS_THAN_EQUAL shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    SORTEDMAP       shift and go to state 76
    HASHMAP         shift and go to state 77

    opcionesImprimir               shift and go to state 41
    operadorMat                    shift and go to state 49
    operadorComparacion            shift and go to state 50
    operadorLogico                 shift and go to state 51
    mapas                          shift and go to state 59

state 13

    (89) valor -> NOMBRE .

    PAR_IZQ         reduce using rule 89 (valor -> NOMBRE .)
    NOMBRE          reduce using rule 89 (valor -> NOMBRE .)
    ENTERO          reduce using rule 89 (valor -> NOMBRE .)
    FLOTANTE        reduce using rule 89 (valor -> NOMBRE .)
    TRUE            reduce using rule 89 (valor -> NOMBRE .)
    FALSE           reduce using rule 89 (valor -> NOMBRE .)
    STRING          reduce using rule 89 (valor -> NOMBRE .)
    LLAV_IZQ        reduce using rule 89 (valor -> NOMBRE .)
    COM_SIM         reduce using rule 89 (valor -> NOMBRE .)
    HASH            reduce using rule 89 (valor -> NOMBRE .)
    COR_IZQ         reduce using rule 89 (valor -> NOMBRE .)
    $end            reduce using rule 89 (valor -> NOMBRE .)
    PAR_DER         reduce using rule 89 (valor -> NOMBRE .)
    COR_DER         reduce using rule 89 (valor -> NOMBRE .)
    LLAV_DER        reduce using rule 89 (valor -> NOMBRE .)


state 14

    (38) expresion -> valor .

    PAR_IZQ         reduce using rule 38 (expresion -> valor .)
    NOMBRE          reduce using rule 38 (expresion -> valor .)
    ENTERO          reduce using rule 38 (expresion -> valor .)
    FLOTANTE        reduce using rule 38 (expresion -> valor .)
    TRUE            reduce using rule 38 (expresion -> valor .)
    FALSE           reduce using rule 38 (expresion -> valor .)
    STRING          reduce using rule 38 (expresion -> valor .)
    LLAV_IZQ        reduce using rule 38 (expresion -> valor .)
    COM_SIM         reduce using rule 38 (expresion -> valor .)
    HASH            reduce using rule 38 (expresion -> valor .)
    COR_IZQ         reduce using rule 38 (expresion -> valor .)
    $end            reduce using rule 38 (expresion -> valor .)
    PAR_DER         reduce using rule 38 (expresion -> valor .)


state 15

    (39) expresion -> estructura .

    PAR_IZQ         reduce using rule 39 (expresion -> estructura .)
    NOMBRE          reduce using rule 39 (expresion -> estructura .)
    ENTERO          reduce using rule 39 (expresion -> estructura .)
    FLOTANTE        reduce using rule 39 (expresion -> estructura .)
    TRUE            reduce using rule 39 (expresion -> estructura .)
    FALSE           reduce using rule 39 (expresion -> estructura .)
    STRING          reduce using rule 39 (expresion -> estructura .)
    LLAV_IZQ        reduce using rule 39 (expresion -> estructura .)
    COM_SIM         reduce using rule 39 (expresion -> estructura .)
    HASH            reduce using rule 39 (expresion -> estructura .)
    COR_IZQ         reduce using rule 39 (expresion -> estructura .)
    $end            reduce using rule 39 (expresion -> estructura .)
    PAR_DER         reduce using rule 39 (expresion -> estructura .)


state 16

    (40) expresion -> expresionAritmetica .

    PAR_IZQ         reduce using rule 40 (expresion -> expresionAritmetica .)
    NOMBRE          reduce using rule 40 (expresion -> expresionAritmetica .)
    ENTERO          reduce using rule 40 (expresion -> expresionAritmetica .)
    FLOTANTE        reduce using rule 40 (expresion -> expresionAritmetica .)
    TRUE            reduce using rule 40 (expresion -> expresionAritmetica .)
    FALSE           reduce using rule 40 (expresion -> expresionAritmetica .)
    STRING          reduce using rule 40 (expresion -> expresionAritmetica .)
    LLAV_IZQ        reduce using rule 40 (expresion -> expresionAritmetica .)
    COM_SIM         reduce using rule 40 (expresion -> expresionAritmetica .)
    HASH            reduce using rule 40 (expresion -> expresionAritmetica .)
    COR_IZQ         reduce using rule 40 (expresion -> expresionAritmetica .)
    $end            reduce using rule 40 (expresion -> expresionAritmetica .)
    PAR_DER         reduce using rule 40 (expresion -> expresionAritmetica .)


state 17

    (41) expresion -> comparacion .

    PAR_IZQ         reduce using rule 41 (expresion -> comparacion .)
    NOMBRE          reduce using rule 41 (expresion -> comparacion .)
    ENTERO          reduce using rule 41 (expresion -> comparacion .)
    FLOTANTE        reduce using rule 41 (expresion -> comparacion .)
    TRUE            reduce using rule 41 (expresion -> comparacion .)
    FALSE           reduce using rule 41 (expresion -> comparacion .)
    STRING          reduce using rule 41 (expresion -> comparacion .)
    LLAV_IZQ        reduce using rule 41 (expresion -> comparacion .)
    COM_SIM         reduce using rule 41 (expresion -> comparacion .)
    HASH            reduce using rule 41 (expresion -> comparacion .)
    COR_IZQ         reduce using rule 41 (expresion -> comparacion .)
    $end            reduce using rule 41 (expresion -> comparacion .)
    PAR_DER         reduce using rule 41 (expresion -> comparacion .)


state 18

    (42) expresion -> comparacionLogica .

    PAR_IZQ         reduce using rule 42 (expresion -> comparacionLogica .)
    NOMBRE          reduce using rule 42 (expresion -> comparacionLogica .)
    ENTERO          reduce using rule 42 (expresion -> comparacionLogica .)
    FLOTANTE        reduce using rule 42 (expresion -> comparacionLogica .)
    TRUE            reduce using rule 42 (expresion -> comparacionLogica .)
    FALSE           reduce using rule 42 (expresion -> comparacionLogica .)
    STRING          reduce using rule 42 (expresion -> comparacionLogica .)
    LLAV_IZQ        reduce using rule 42 (expresion -> comparacionLogica .)
    COM_SIM         reduce using rule 42 (expresion -> comparacionLogica .)
    HASH            reduce using rule 42 (expresion -> comparacionLogica .)
    COR_IZQ         reduce using rule 42 (expresion -> comparacionLogica .)
    $end            reduce using rule 42 (expresion -> comparacionLogica .)
    PAR_DER         reduce using rule 42 (expresion -> comparacionLogica .)


state 19

    (43) expresion -> input .

    PAR_IZQ         reduce using rule 43 (expresion -> input .)
    NOMBRE          reduce using rule 43 (expresion -> input .)
    ENTERO          reduce using rule 43 (expresion -> input .)
    FLOTANTE        reduce using rule 43 (expresion -> input .)
    TRUE            reduce using rule 43 (expresion -> input .)
    FALSE           reduce using rule 43 (expresion -> input .)
    STRING          reduce using rule 43 (expresion -> input .)
    LLAV_IZQ        reduce using rule 43 (expresion -> input .)
    COM_SIM         reduce using rule 43 (expresion -> input .)
    HASH            reduce using rule 43 (expresion -> input .)
    COR_IZQ         reduce using rule 43 (expresion -> input .)
    $end            reduce using rule 43 (expresion -> input .)
    PAR_DER         reduce using rule 43 (expresion -> input .)


state 20

    (48) estructurasControl -> if .

    PAR_IZQ         reduce using rule 48 (estructurasControl -> if .)
    NOMBRE          reduce using rule 48 (estructurasControl -> if .)
    ENTERO          reduce using rule 48 (estructurasControl -> if .)
    FLOTANTE        reduce using rule 48 (estructurasControl -> if .)
    TRUE            reduce using rule 48 (estructurasControl -> if .)
    FALSE           reduce using rule 48 (estructurasControl -> if .)
    STRING          reduce using rule 48 (estructurasControl -> if .)
    LLAV_IZQ        reduce using rule 48 (estructurasControl -> if .)
    COM_SIM         reduce using rule 48 (estructurasControl -> if .)
    HASH            reduce using rule 48 (estructurasControl -> if .)
    COR_IZQ         reduce using rule 48 (estructurasControl -> if .)
    $end            reduce using rule 48 (estructurasControl -> if .)
    PAR_DER         reduce using rule 48 (estructurasControl -> if .)


state 21

    (49) estructurasControl -> while .

    PAR_IZQ         reduce using rule 49 (estructurasControl -> while .)
    NOMBRE          reduce using rule 49 (estructurasControl -> while .)
    ENTERO          reduce using rule 49 (estructurasControl -> while .)
    FLOTANTE        reduce using rule 49 (estructurasControl -> while .)
    TRUE            reduce using rule 49 (estructurasControl -> while .)
    FALSE           reduce using rule 49 (estructurasControl -> while .)
    STRING          reduce using rule 49 (estructurasControl -> while .)
    LLAV_IZQ        reduce using rule 49 (estructurasControl -> while .)
    COM_SIM         reduce using rule 49 (estructurasControl -> while .)
    HASH            reduce using rule 49 (estructurasControl -> while .)
    COR_IZQ         reduce using rule 49 (estructurasControl -> while .)
    $end            reduce using rule 49 (estructurasControl -> while .)
    PAR_DER         reduce using rule 49 (estructurasControl -> while .)


state 22

    (50) estructurasControl -> loop .

    PAR_IZQ         reduce using rule 50 (estructurasControl -> loop .)
    NOMBRE          reduce using rule 50 (estructurasControl -> loop .)
    ENTERO          reduce using rule 50 (estructurasControl -> loop .)
    FLOTANTE        reduce using rule 50 (estructurasControl -> loop .)
    TRUE            reduce using rule 50 (estructurasControl -> loop .)
    FALSE           reduce using rule 50 (estructurasControl -> loop .)
    STRING          reduce using rule 50 (estructurasControl -> loop .)
    LLAV_IZQ        reduce using rule 50 (estructurasControl -> loop .)
    COM_SIM         reduce using rule 50 (estructurasControl -> loop .)
    HASH            reduce using rule 50 (estructurasControl -> loop .)
    COR_IZQ         reduce using rule 50 (estructurasControl -> loop .)
    $end            reduce using rule 50 (estructurasControl -> loop .)
    PAR_DER         reduce using rule 50 (estructurasControl -> loop .)


state 23

    (45) estructura -> estructura_lista .

    PAR_IZQ         reduce using rule 45 (estructura -> estructura_lista .)
    NOMBRE          reduce using rule 45 (estructura -> estructura_lista .)
    ENTERO          reduce using rule 45 (estructura -> estructura_lista .)
    FLOTANTE        reduce using rule 45 (estructura -> estructura_lista .)
    TRUE            reduce using rule 45 (estructura -> estructura_lista .)
    FALSE           reduce using rule 45 (estructura -> estructura_lista .)
    STRING          reduce using rule 45 (estructura -> estructura_lista .)
    LLAV_IZQ        reduce using rule 45 (estructura -> estructura_lista .)
    COM_SIM         reduce using rule 45 (estructura -> estructura_lista .)
    HASH            reduce using rule 45 (estructura -> estructura_lista .)
    COR_IZQ         reduce using rule 45 (estructura -> estructura_lista .)
    $end            reduce using rule 45 (estructura -> estructura_lista .)
    PAR_DER         reduce using rule 45 (estructura -> estructura_lista .)


state 24

    (96) numero -> ENTERO .

    PAR_IZQ         reduce using rule 96 (numero -> ENTERO .)
    NOMBRE          reduce using rule 96 (numero -> ENTERO .)
    ENTERO          reduce using rule 96 (numero -> ENTERO .)
    FLOTANTE        reduce using rule 96 (numero -> ENTERO .)
    TRUE            reduce using rule 96 (numero -> ENTERO .)
    FALSE           reduce using rule 96 (numero -> ENTERO .)
    STRING          reduce using rule 96 (numero -> ENTERO .)
    LLAV_IZQ        reduce using rule 96 (numero -> ENTERO .)
    COM_SIM         reduce using rule 96 (numero -> ENTERO .)
    HASH            reduce using rule 96 (numero -> ENTERO .)
    COR_IZQ         reduce using rule 96 (numero -> ENTERO .)
    $end            reduce using rule 96 (numero -> ENTERO .)
    PAR_DER         reduce using rule 96 (numero -> ENTERO .)
    COR_DER         reduce using rule 96 (numero -> ENTERO .)
    LLAV_DER        reduce using rule 96 (numero -> ENTERO .)


state 25

    (46) estructura -> estructura_conjunto .

    PAR_IZQ         reduce using rule 46 (estructura -> estructura_conjunto .)
    NOMBRE          reduce using rule 46 (estructura -> estructura_conjunto .)
    ENTERO          reduce using rule 46 (estructura -> estructura_conjunto .)
    FLOTANTE        reduce using rule 46 (estructura -> estructura_conjunto .)
    TRUE            reduce using rule 46 (estructura -> estructura_conjunto .)
    FALSE           reduce using rule 46 (estructura -> estructura_conjunto .)
    STRING          reduce using rule 46 (estructura -> estructura_conjunto .)
    LLAV_IZQ        reduce using rule 46 (estructura -> estructura_conjunto .)
    COM_SIM         reduce using rule 46 (estructura -> estructura_conjunto .)
    HASH            reduce using rule 46 (estructura -> estructura_conjunto .)
    COR_IZQ         reduce using rule 46 (estructura -> estructura_conjunto .)
    $end            reduce using rule 46 (estructura -> estructura_conjunto .)
    PAR_DER         reduce using rule 46 (estructura -> estructura_conjunto .)


state 26

    (47) estructura -> estructura_vector .

    PAR_IZQ         reduce using rule 47 (estructura -> estructura_vector .)
    NOMBRE          reduce using rule 47 (estructura -> estructura_vector .)
    ENTERO          reduce using rule 47 (estructura -> estructura_vector .)
    FLOTANTE        reduce using rule 47 (estructura -> estructura_vector .)
    TRUE            reduce using rule 47 (estructura -> estructura_vector .)
    FALSE           reduce using rule 47 (estructura -> estructura_vector .)
    STRING          reduce using rule 47 (estructura -> estructura_vector .)
    LLAV_IZQ        reduce using rule 47 (estructura -> estructura_vector .)
    COM_SIM         reduce using rule 47 (estructura -> estructura_vector .)
    HASH            reduce using rule 47 (estructura -> estructura_vector .)
    COR_IZQ         reduce using rule 47 (estructura -> estructura_vector .)
    $end            reduce using rule 47 (estructura -> estructura_vector .)
    PAR_DER         reduce using rule 47 (estructura -> estructura_vector .)


state 27

    (44) estructura -> estructura_mapa .

    PAR_IZQ         reduce using rule 44 (estructura -> estructura_mapa .)
    NOMBRE          reduce using rule 44 (estructura -> estructura_mapa .)
    ENTERO          reduce using rule 44 (estructura -> estructura_mapa .)
    FLOTANTE        reduce using rule 44 (estructura -> estructura_mapa .)
    TRUE            reduce using rule 44 (estructura -> estructura_mapa .)
    FALSE           reduce using rule 44 (estructura -> estructura_mapa .)
    STRING          reduce using rule 44 (estructura -> estructura_mapa .)
    LLAV_IZQ        reduce using rule 44 (estructura -> estructura_mapa .)
    COM_SIM         reduce using rule 44 (estructura -> estructura_mapa .)
    HASH            reduce using rule 44 (estructura -> estructura_mapa .)
    COR_IZQ         reduce using rule 44 (estructura -> estructura_mapa .)
    $end            reduce using rule 44 (estructura -> estructura_mapa .)
    PAR_DER         reduce using rule 44 (estructura -> estructura_mapa .)


state 28

    (92) cadena -> STRING .

    PAR_IZQ         reduce using rule 92 (cadena -> STRING .)
    NOMBRE          reduce using rule 92 (cadena -> STRING .)
    ENTERO          reduce using rule 92 (cadena -> STRING .)
    FLOTANTE        reduce using rule 92 (cadena -> STRING .)
    TRUE            reduce using rule 92 (cadena -> STRING .)
    FALSE           reduce using rule 92 (cadena -> STRING .)
    STRING          reduce using rule 92 (cadena -> STRING .)
    LLAV_IZQ        reduce using rule 92 (cadena -> STRING .)
    COM_SIM         reduce using rule 92 (cadena -> STRING .)
    HASH            reduce using rule 92 (cadena -> STRING .)
    COR_IZQ         reduce using rule 92 (cadena -> STRING .)
    $end            reduce using rule 92 (cadena -> STRING .)
    PAR_DER         reduce using rule 92 (cadena -> STRING .)
    COR_DER         reduce using rule 92 (cadena -> STRING .)
    LLAV_DER        reduce using rule 92 (cadena -> STRING .)


state 29

    (88) valor -> numero .

    PAR_IZQ         reduce using rule 88 (valor -> numero .)
    NOMBRE          reduce using rule 88 (valor -> numero .)
    ENTERO          reduce using rule 88 (valor -> numero .)
    FLOTANTE        reduce using rule 88 (valor -> numero .)
    TRUE            reduce using rule 88 (valor -> numero .)
    FALSE           reduce using rule 88 (valor -> numero .)
    STRING          reduce using rule 88 (valor -> numero .)
    LLAV_IZQ        reduce using rule 88 (valor -> numero .)
    COM_SIM         reduce using rule 88 (valor -> numero .)
    HASH            reduce using rule 88 (valor -> numero .)
    COR_IZQ         reduce using rule 88 (valor -> numero .)
    $end            reduce using rule 88 (valor -> numero .)
    PAR_DER         reduce using rule 88 (valor -> numero .)
    COR_DER         reduce using rule 88 (valor -> numero .)
    LLAV_DER        reduce using rule 88 (valor -> numero .)


state 30

    (90) valor -> booleano .

    PAR_IZQ         reduce using rule 90 (valor -> booleano .)
    NOMBRE          reduce using rule 90 (valor -> booleano .)
    ENTERO          reduce using rule 90 (valor -> booleano .)
    FLOTANTE        reduce using rule 90 (valor -> booleano .)
    TRUE            reduce using rule 90 (valor -> booleano .)
    FALSE           reduce using rule 90 (valor -> booleano .)
    STRING          reduce using rule 90 (valor -> booleano .)
    LLAV_IZQ        reduce using rule 90 (valor -> booleano .)
    COM_SIM         reduce using rule 90 (valor -> booleano .)
    HASH            reduce using rule 90 (valor -> booleano .)
    COR_IZQ         reduce using rule 90 (valor -> booleano .)
    $end            reduce using rule 90 (valor -> booleano .)
    PAR_DER         reduce using rule 90 (valor -> booleano .)
    COR_DER         reduce using rule 90 (valor -> booleano .)
    LLAV_DER        reduce using rule 90 (valor -> booleano .)


state 31

    (91) valor -> cadena .

    PAR_IZQ         reduce using rule 91 (valor -> cadena .)
    NOMBRE          reduce using rule 91 (valor -> cadena .)
    ENTERO          reduce using rule 91 (valor -> cadena .)
    FLOTANTE        reduce using rule 91 (valor -> cadena .)
    TRUE            reduce using rule 91 (valor -> cadena .)
    FALSE           reduce using rule 91 (valor -> cadena .)
    STRING          reduce using rule 91 (valor -> cadena .)
    LLAV_IZQ        reduce using rule 91 (valor -> cadena .)
    COM_SIM         reduce using rule 91 (valor -> cadena .)
    HASH            reduce using rule 91 (valor -> cadena .)
    COR_IZQ         reduce using rule 91 (valor -> cadena .)
    $end            reduce using rule 91 (valor -> cadena .)
    PAR_DER         reduce using rule 91 (valor -> cadena .)
    COR_DER         reduce using rule 91 (valor -> cadena .)
    LLAV_DER        reduce using rule 91 (valor -> cadena .)


state 32

    (78) estructura_vector -> COR_IZQ . compuesto COR_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    compuesto                      shift and go to state 78
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 33

    (97) numero -> FLOTANTE .

    PAR_IZQ         reduce using rule 97 (numero -> FLOTANTE .)
    NOMBRE          reduce using rule 97 (numero -> FLOTANTE .)
    ENTERO          reduce using rule 97 (numero -> FLOTANTE .)
    FLOTANTE        reduce using rule 97 (numero -> FLOTANTE .)
    TRUE            reduce using rule 97 (numero -> FLOTANTE .)
    FALSE           reduce using rule 97 (numero -> FLOTANTE .)
    STRING          reduce using rule 97 (numero -> FLOTANTE .)
    LLAV_IZQ        reduce using rule 97 (numero -> FLOTANTE .)
    COM_SIM         reduce using rule 97 (numero -> FLOTANTE .)
    HASH            reduce using rule 97 (numero -> FLOTANTE .)
    COR_IZQ         reduce using rule 97 (numero -> FLOTANTE .)
    $end            reduce using rule 97 (numero -> FLOTANTE .)
    PAR_DER         reduce using rule 97 (numero -> FLOTANTE .)
    COR_DER         reduce using rule 97 (numero -> FLOTANTE .)
    LLAV_DER        reduce using rule 97 (numero -> FLOTANTE .)


state 34

    (94) booleano -> TRUE .

    PAR_IZQ         reduce using rule 94 (booleano -> TRUE .)
    NOMBRE          reduce using rule 94 (booleano -> TRUE .)
    ENTERO          reduce using rule 94 (booleano -> TRUE .)
    FLOTANTE        reduce using rule 94 (booleano -> TRUE .)
    TRUE            reduce using rule 94 (booleano -> TRUE .)
    FALSE           reduce using rule 94 (booleano -> TRUE .)
    STRING          reduce using rule 94 (booleano -> TRUE .)
    LLAV_IZQ        reduce using rule 94 (booleano -> TRUE .)
    COM_SIM         reduce using rule 94 (booleano -> TRUE .)
    HASH            reduce using rule 94 (booleano -> TRUE .)
    COR_IZQ         reduce using rule 94 (booleano -> TRUE .)
    $end            reduce using rule 94 (booleano -> TRUE .)
    PAR_DER         reduce using rule 94 (booleano -> TRUE .)
    COR_DER         reduce using rule 94 (booleano -> TRUE .)
    LLAV_DER        reduce using rule 94 (booleano -> TRUE .)


state 35

    (95) booleano -> FALSE .

    PAR_IZQ         reduce using rule 95 (booleano -> FALSE .)
    NOMBRE          reduce using rule 95 (booleano -> FALSE .)
    ENTERO          reduce using rule 95 (booleano -> FALSE .)
    FLOTANTE        reduce using rule 95 (booleano -> FALSE .)
    TRUE            reduce using rule 95 (booleano -> FALSE .)
    FALSE           reduce using rule 95 (booleano -> FALSE .)
    STRING          reduce using rule 95 (booleano -> FALSE .)
    LLAV_IZQ        reduce using rule 95 (booleano -> FALSE .)
    COM_SIM         reduce using rule 95 (booleano -> FALSE .)
    HASH            reduce using rule 95 (booleano -> FALSE .)
    COR_IZQ         reduce using rule 95 (booleano -> FALSE .)
    $end            reduce using rule 95 (booleano -> FALSE .)
    PAR_DER         reduce using rule 95 (booleano -> FALSE .)
    COR_DER         reduce using rule 95 (booleano -> FALSE .)
    LLAV_DER        reduce using rule 95 (booleano -> FALSE .)


state 36

    (79) estructura_mapa -> LLAV_IZQ . parclaves LLAV_DER
    (85) parclaves -> . STRING STRING
    (86) parclaves -> . STRING STRING COMA parclaves
    (87) parclaves -> . STRING STRING parclaves

    STRING          shift and go to state 82

    parclaves                      shift and go to state 81

state 37

    (73) estructura_lista -> COM_SIM . PAR_IZQ compuesto PAR_DER

    PAR_IZQ         shift and go to state 83


state 38

    (76) estructura_conjunto -> HASH . LLAV_IZQ compuesto LLAV_DER

    LLAV_IZQ        shift and go to state 84


state 39

    (2) sentencia_compuesta -> algoritmo sentencia_compuesta .

    $end            reduce using rule 2 (sentencia_compuesta -> algoritmo sentencia_compuesta .)
    PAR_DER         reduce using rule 2 (sentencia_compuesta -> algoritmo sentencia_compuesta .)


state 40

    (37) variable -> PAR_IZQ DEF . NOMBRE expresion PAR_DER

    NOMBRE          shift and go to state 85


state 41

    (61) imprimir -> PAR_IZQ opcionesImprimir . expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    NOMBRE          shift and go to state 13
    PAR_IZQ         shift and go to state 86
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    expresion                      shift and go to state 87
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacion                    shift and go to state 17
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31
    estructura_mapa                shift and go to state 27
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26

state 42

    (12) funcion -> PAR_IZQ DEFN . NOMBRE argumentos sentencia_compuesta PAR_DER

    NOMBRE          shift and go to state 88


state 43

    (17) metodo_lista -> PAR_IZQ FIRST . NOMBRE PAR_DER
    (18) metodo_lista -> PAR_IZQ FIRST . estructura_lista PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER

    NOMBRE          shift and go to state 90
    PAR_IZQ         shift and go to state 89
    COM_SIM         shift and go to state 37

    estructura_lista               shift and go to state 91

state 44

    (19) metodo_lista -> PAR_IZQ NTH . NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> PAR_IZQ NTH . NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> PAR_IZQ NTH . estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> PAR_IZQ NTH . estructura_lista NOMBRE PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER

    NOMBRE          shift and go to state 92
    PAR_IZQ         shift and go to state 89
    COM_SIM         shift and go to state 37

    estructura_lista               shift and go to state 93

state 45

    (23) metodo_lista -> PAR_IZQ CONS . valor NOMBRE PAR_DER
    (24) metodo_lista -> PAR_IZQ CONS . valor estructura_lista PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 94
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 46

    (25) metodo_conjunto -> PAR_IZQ GET . estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> PAR_IZQ GET . estructura_conjunto ENTERO PAR_DER
    (28) metodo_vector -> PAR_IZQ GET . estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> PAR_IZQ GET . estructura_vector ENTERO PAR_DER
    (31) metodo_mapas -> PAR_IZQ GET . estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> PAR_IZQ GET . estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> PAR_IZQ GET . NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> PAR_IZQ GET . NOMBRE STRING PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER

    NOMBRE          shift and go to state 97
    PAR_IZQ         shift and go to state 95
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32
    LLAV_IZQ        shift and go to state 36

    estructura_conjunto            shift and go to state 96
    estructura_vector              shift and go to state 98
    estructura_mapa                shift and go to state 99

state 47

    (27) metodo_conjunto -> PAR_IZQ CONJ . estructura_conjunto valor PAR_DER
    (30) metodo_vector -> PAR_IZQ CONJ . estructura_vector valor PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 100
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    estructura_conjunto            shift and go to state 101
    estructura_vector              shift and go to state 102

state 48

    (35) metodo_mapas -> PAR_IZQ KEYS . estructura_mapa PAR_DER
    (36) metodo_mapas -> PAR_IZQ KEYS . NOMBRE PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER

    NOMBRE          shift and go to state 105
    LLAV_IZQ        shift and go to state 36
    PAR_IZQ         shift and go to state 103

    estructura_mapa                shift and go to state 104

state 49

    (65) expresionAritmetica -> PAR_IZQ operadorMat . numberoSerie PAR_DER
    (66) numberoSerie -> . numero
    (67) numberoSerie -> . NOMBRE
    (68) numberoSerie -> . expresionAritmetica
    (69) numberoSerie -> . numero numberoSerie
    (70) numberoSerie -> . NOMBRE numberoSerie
    (71) numberoSerie -> . expresionAritmetica numberoSerie
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER

    NOMBRE          shift and go to state 109
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    PAR_IZQ         shift and go to state 106

    numberoSerie                   shift and go to state 107
    numero                         shift and go to state 108
    expresionAritmetica            shift and go to state 110

state 50

    (64) comparacion -> PAR_IZQ operadorComparacion . valor valor PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 111
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 51

    (62) comparacionLogica -> PAR_IZQ operadorLogico . valor valor PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 112
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 52

    (63) comparacionLogica -> PAR_IZQ NOT . valor PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 113
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 53

    (60) input -> PAR_IZQ READ . REST LINE PAR_DER

    REST            shift and go to state 114


state 54

    (99) operadorMat -> REST .

    NOMBRE          reduce using rule 99 (operadorMat -> REST .)
    ENTERO          reduce using rule 99 (operadorMat -> REST .)
    FLOTANTE        reduce using rule 99 (operadorMat -> REST .)
    PAR_IZQ         reduce using rule 99 (operadorMat -> REST .)


state 55

    (55) if -> PAR_IZQ IF . expresionBooleana sentencia_compuesta PAR_DER
    (56) expresionBooleana -> . FALSE
    (57) expresionBooleana -> . TRUE
    (58) expresionBooleana -> . comparacionLogica
    (59) expresionBooleana -> . comparacion
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER

    FALSE           shift and go to state 117
    TRUE            shift and go to state 118
    PAR_IZQ         shift and go to state 115

    expresionBooleana              shift and go to state 116
    comparacionLogica              shift and go to state 119
    comparacion                    shift and go to state 120

state 56

    (54) while -> PAR_IZQ WHILE . comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER

    PAR_IZQ         shift and go to state 121

    comparacion                    shift and go to state 122

state 57

    (51) loop -> PAR_IZQ LOOP . COR_IZQ compuesto COR_DER when PAR_DER

    COR_IZQ         shift and go to state 123


state 58

    (93) cadena -> PAR_IZQ STR . STRING STRING PAR_DER

    STRING          shift and go to state 124


state 59

    (80) estructura_mapa -> PAR_IZQ mapas . parclaves PAR_DER
    (85) parclaves -> . STRING STRING
    (86) parclaves -> . STRING STRING COMA parclaves
    (87) parclaves -> . STRING STRING parclaves

    STRING          shift and go to state 82

    parclaves                      shift and go to state 125

state 60

    (72) estructura_lista -> PAR_IZQ LISTA . PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_lista -> PAR_IZQ LISTA . compuesto PAR_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    PAR_IZQ         shift and go to state 126
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28

    compuesto                      shift and go to state 127
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 61

    (75) estructura_conjunto -> PAR_IZQ CONJUNTO . COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER

    COM_SIM         shift and go to state 128


state 62

    (77) estructura_vector -> PAR_IZQ VECTOR . compuesto PAR_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    compuesto                      shift and go to state 129
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 63

    (110) opcionesImprimir -> PRINT .

    NOMBRE          reduce using rule 110 (opcionesImprimir -> PRINT .)
    PAR_IZQ         reduce using rule 110 (opcionesImprimir -> PRINT .)
    ENTERO          reduce using rule 110 (opcionesImprimir -> PRINT .)
    FLOTANTE        reduce using rule 110 (opcionesImprimir -> PRINT .)
    TRUE            reduce using rule 110 (opcionesImprimir -> PRINT .)
    FALSE           reduce using rule 110 (opcionesImprimir -> PRINT .)
    STRING          reduce using rule 110 (opcionesImprimir -> PRINT .)
    LLAV_IZQ        reduce using rule 110 (opcionesImprimir -> PRINT .)
    COM_SIM         reduce using rule 110 (opcionesImprimir -> PRINT .)
    HASH            reduce using rule 110 (opcionesImprimir -> PRINT .)
    COR_IZQ         reduce using rule 110 (opcionesImprimir -> PRINT .)


state 64

    (111) opcionesImprimir -> PRINTLN .

    NOMBRE          reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    PAR_IZQ         reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    ENTERO          reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    FLOTANTE        reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    TRUE            reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    FALSE           reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    STRING          reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    LLAV_IZQ        reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    COM_SIM         reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    HASH            reduce using rule 111 (opcionesImprimir -> PRINTLN .)
    COR_IZQ         reduce using rule 111 (opcionesImprimir -> PRINTLN .)


state 65

    (98) operadorMat -> SUM .

    NOMBRE          reduce using rule 98 (operadorMat -> SUM .)
    ENTERO          reduce using rule 98 (operadorMat -> SUM .)
    FLOTANTE        reduce using rule 98 (operadorMat -> SUM .)
    PAR_IZQ         reduce using rule 98 (operadorMat -> SUM .)


state 66

    (100) operadorMat -> PRODUCT .

    NOMBRE          reduce using rule 100 (operadorMat -> PRODUCT .)
    ENTERO          reduce using rule 100 (operadorMat -> PRODUCT .)
    FLOTANTE        reduce using rule 100 (operadorMat -> PRODUCT .)
    PAR_IZQ         reduce using rule 100 (operadorMat -> PRODUCT .)


state 67

    (101) operadorMat -> DIVISION .

    NOMBRE          reduce using rule 101 (operadorMat -> DIVISION .)
    ENTERO          reduce using rule 101 (operadorMat -> DIVISION .)
    FLOTANTE        reduce using rule 101 (operadorMat -> DIVISION .)
    PAR_IZQ         reduce using rule 101 (operadorMat -> DIVISION .)


state 68

    (102) operadorComparacion -> EQUAL .

    NOMBRE          reduce using rule 102 (operadorComparacion -> EQUAL .)
    ENTERO          reduce using rule 102 (operadorComparacion -> EQUAL .)
    FLOTANTE        reduce using rule 102 (operadorComparacion -> EQUAL .)
    TRUE            reduce using rule 102 (operadorComparacion -> EQUAL .)
    FALSE           reduce using rule 102 (operadorComparacion -> EQUAL .)
    STRING          reduce using rule 102 (operadorComparacion -> EQUAL .)
    PAR_IZQ         reduce using rule 102 (operadorComparacion -> EQUAL .)


state 69

    (103) operadorComparacion -> NOT_EQUAL .

    NOMBRE          reduce using rule 103 (operadorComparacion -> NOT_EQUAL .)
    ENTERO          reduce using rule 103 (operadorComparacion -> NOT_EQUAL .)
    FLOTANTE        reduce using rule 103 (operadorComparacion -> NOT_EQUAL .)
    TRUE            reduce using rule 103 (operadorComparacion -> NOT_EQUAL .)
    FALSE           reduce using rule 103 (operadorComparacion -> NOT_EQUAL .)
    STRING          reduce using rule 103 (operadorComparacion -> NOT_EQUAL .)
    PAR_IZQ         reduce using rule 103 (operadorComparacion -> NOT_EQUAL .)


state 70

    (104) operadorComparacion -> GREATER_THAN .

    NOMBRE          reduce using rule 104 (operadorComparacion -> GREATER_THAN .)
    ENTERO          reduce using rule 104 (operadorComparacion -> GREATER_THAN .)
    FLOTANTE        reduce using rule 104 (operadorComparacion -> GREATER_THAN .)
    TRUE            reduce using rule 104 (operadorComparacion -> GREATER_THAN .)
    FALSE           reduce using rule 104 (operadorComparacion -> GREATER_THAN .)
    STRING          reduce using rule 104 (operadorComparacion -> GREATER_THAN .)
    PAR_IZQ         reduce using rule 104 (operadorComparacion -> GREATER_THAN .)


state 71

    (105) operadorComparacion -> LESS_THAN .

    NOMBRE          reduce using rule 105 (operadorComparacion -> LESS_THAN .)
    ENTERO          reduce using rule 105 (operadorComparacion -> LESS_THAN .)
    FLOTANTE        reduce using rule 105 (operadorComparacion -> LESS_THAN .)
    TRUE            reduce using rule 105 (operadorComparacion -> LESS_THAN .)
    FALSE           reduce using rule 105 (operadorComparacion -> LESS_THAN .)
    STRING          reduce using rule 105 (operadorComparacion -> LESS_THAN .)
    PAR_IZQ         reduce using rule 105 (operadorComparacion -> LESS_THAN .)


state 72

    (106) operadorComparacion -> GREATER_THAN_EQUAL .

    NOMBRE          reduce using rule 106 (operadorComparacion -> GREATER_THAN_EQUAL .)
    ENTERO          reduce using rule 106 (operadorComparacion -> GREATER_THAN_EQUAL .)
    FLOTANTE        reduce using rule 106 (operadorComparacion -> GREATER_THAN_EQUAL .)
    TRUE            reduce using rule 106 (operadorComparacion -> GREATER_THAN_EQUAL .)
    FALSE           reduce using rule 106 (operadorComparacion -> GREATER_THAN_EQUAL .)
    STRING          reduce using rule 106 (operadorComparacion -> GREATER_THAN_EQUAL .)
    PAR_IZQ         reduce using rule 106 (operadorComparacion -> GREATER_THAN_EQUAL .)


state 73

    (107) operadorComparacion -> LESS_THAN_EQUAL .

    NOMBRE          reduce using rule 107 (operadorComparacion -> LESS_THAN_EQUAL .)
    ENTERO          reduce using rule 107 (operadorComparacion -> LESS_THAN_EQUAL .)
    FLOTANTE        reduce using rule 107 (operadorComparacion -> LESS_THAN_EQUAL .)
    TRUE            reduce using rule 107 (operadorComparacion -> LESS_THAN_EQUAL .)
    FALSE           reduce using rule 107 (operadorComparacion -> LESS_THAN_EQUAL .)
    STRING          reduce using rule 107 (operadorComparacion -> LESS_THAN_EQUAL .)
    PAR_IZQ         reduce using rule 107 (operadorComparacion -> LESS_THAN_EQUAL .)


state 74

    (108) operadorLogico -> AND .

    NOMBRE          reduce using rule 108 (operadorLogico -> AND .)
    ENTERO          reduce using rule 108 (operadorLogico -> AND .)
    FLOTANTE        reduce using rule 108 (operadorLogico -> AND .)
    TRUE            reduce using rule 108 (operadorLogico -> AND .)
    FALSE           reduce using rule 108 (operadorLogico -> AND .)
    STRING          reduce using rule 108 (operadorLogico -> AND .)
    PAR_IZQ         reduce using rule 108 (operadorLogico -> AND .)


state 75

    (109) operadorLogico -> OR .

    NOMBRE          reduce using rule 109 (operadorLogico -> OR .)
    ENTERO          reduce using rule 109 (operadorLogico -> OR .)
    FLOTANTE        reduce using rule 109 (operadorLogico -> OR .)
    TRUE            reduce using rule 109 (operadorLogico -> OR .)
    FALSE           reduce using rule 109 (operadorLogico -> OR .)
    STRING          reduce using rule 109 (operadorLogico -> OR .)
    PAR_IZQ         reduce using rule 109 (operadorLogico -> OR .)


state 76

    (81) mapas -> SORTEDMAP . REST MAP

    REST            shift and go to state 130


state 77

    (82) mapas -> HASHMAP . REST MAP

    REST            shift and go to state 131


state 78

    (78) estructura_vector -> COR_IZQ compuesto . COR_DER

    COR_DER         shift and go to state 132


state 79

    (83) compuesto -> valor .
    (84) compuesto -> valor . compuesto
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    COR_DER         reduce using rule 83 (compuesto -> valor .)
    PAR_DER         reduce using rule 83 (compuesto -> valor .)
    LLAV_DER        reduce using rule 83 (compuesto -> valor .)
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 79
    compuesto                      shift and go to state 133
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 80

    (93) cadena -> PAR_IZQ . STR STRING STRING PAR_DER

    STR             shift and go to state 58


state 81

    (79) estructura_mapa -> LLAV_IZQ parclaves . LLAV_DER

    LLAV_DER        shift and go to state 134


state 82

    (85) parclaves -> STRING . STRING
    (86) parclaves -> STRING . STRING COMA parclaves
    (87) parclaves -> STRING . STRING parclaves

    STRING          shift and go to state 135


state 83

    (73) estructura_lista -> COM_SIM PAR_IZQ . compuesto PAR_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    compuesto                      shift and go to state 136
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 84

    (76) estructura_conjunto -> HASH LLAV_IZQ . compuesto LLAV_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    compuesto                      shift and go to state 137
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 85

    (37) variable -> PAR_IZQ DEF NOMBRE . expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    NOMBRE          shift and go to state 13
    PAR_IZQ         shift and go to state 86
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    expresion                      shift and go to state 138
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacion                    shift and go to state 17
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31
    estructura_mapa                shift and go to state 27
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26

state 86

    (65) expresionAritmetica -> PAR_IZQ . operadorMat numberoSerie PAR_DER
    (64) comparacion -> PAR_IZQ . operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> PAR_IZQ . operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> PAR_IZQ . NOT valor PAR_DER
    (60) input -> PAR_IZQ . READ REST LINE PAR_DER
    (93) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (80) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (72) estructura_lista -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_lista -> PAR_IZQ . LISTA compuesto PAR_DER
    (75) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (77) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER
    (98) operadorMat -> . SUM
    (99) operadorMat -> . REST
    (100) operadorMat -> . PRODUCT
    (101) operadorMat -> . DIVISION
    (102) operadorComparacion -> . EQUAL
    (103) operadorComparacion -> . NOT_EQUAL
    (104) operadorComparacion -> . GREATER_THAN
    (105) operadorComparacion -> . LESS_THAN
    (106) operadorComparacion -> . GREATER_THAN_EQUAL
    (107) operadorComparacion -> . LESS_THAN_EQUAL
    (108) operadorLogico -> . AND
    (109) operadorLogico -> . OR
    (81) mapas -> . SORTEDMAP REST MAP
    (82) mapas -> . HASHMAP REST MAP

    NOT             shift and go to state 52
    READ            shift and go to state 53
    STR             shift and go to state 58
    LISTA           shift and go to state 60
    CONJUNTO        shift and go to state 61
    VECTOR          shift and go to state 62
    SUM             shift and go to state 65
    REST            shift and go to state 54
    PRODUCT         shift and go to state 66
    DIVISION        shift and go to state 67
    EQUAL           shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_THAN       shift and go to state 71
    GREATER_THAN_EQUAL shift and go to state 72
    LESS_THAN_EQUAL shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    SORTEDMAP       shift and go to state 76
    HASHMAP         shift and go to state 77

    operadorMat                    shift and go to state 49
    operadorComparacion            shift and go to state 50
    operadorLogico                 shift and go to state 51
    mapas                          shift and go to state 59

state 87

    (61) imprimir -> PAR_IZQ opcionesImprimir expresion . PAR_DER

    PAR_DER         shift and go to state 139


state 88

    (12) funcion -> PAR_IZQ DEFN NOMBRE . argumentos sentencia_compuesta PAR_DER
    (13) argumentos -> . COR_IZQ argumento COR_DER
    (14) argumentos -> . COR_IZQ COR_DER

    COR_IZQ         shift and go to state 141

    argumentos                     shift and go to state 140

state 89

    (72) estructura_lista -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_lista -> PAR_IZQ . LISTA compuesto PAR_DER

    LISTA           shift and go to state 60


state 90

    (17) metodo_lista -> PAR_IZQ FIRST NOMBRE . PAR_DER

    PAR_DER         shift and go to state 142


state 91

    (18) metodo_lista -> PAR_IZQ FIRST estructura_lista . PAR_DER

    PAR_DER         shift and go to state 143


state 92

    (19) metodo_lista -> PAR_IZQ NTH NOMBRE . NOMBRE PAR_DER
    (20) metodo_lista -> PAR_IZQ NTH NOMBRE . ENTERO PAR_DER

    NOMBRE          shift and go to state 144
    ENTERO          shift and go to state 145


state 93

    (21) metodo_lista -> PAR_IZQ NTH estructura_lista . ENTERO PAR_DER
    (22) metodo_lista -> PAR_IZQ NTH estructura_lista . NOMBRE PAR_DER

    ENTERO          shift and go to state 146
    NOMBRE          shift and go to state 147


state 94

    (23) metodo_lista -> PAR_IZQ CONS valor . NOMBRE PAR_DER
    (24) metodo_lista -> PAR_IZQ CONS valor . estructura_lista PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER

    NOMBRE          shift and go to state 148
    PAR_IZQ         shift and go to state 89
    COM_SIM         shift and go to state 37

    estructura_lista               shift and go to state 149

state 95

    (75) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (77) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER
    (80) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (81) mapas -> . SORTEDMAP REST MAP
    (82) mapas -> . HASHMAP REST MAP

    CONJUNTO        shift and go to state 61
    VECTOR          shift and go to state 62
    SORTEDMAP       shift and go to state 76
    HASHMAP         shift and go to state 77

    mapas                          shift and go to state 59

state 96

    (25) metodo_conjunto -> PAR_IZQ GET estructura_conjunto . NOMBRE PAR_DER
    (26) metodo_conjunto -> PAR_IZQ GET estructura_conjunto . ENTERO PAR_DER

    NOMBRE          shift and go to state 150
    ENTERO          shift and go to state 151


state 97

    (33) metodo_mapas -> PAR_IZQ GET NOMBRE . NOMBRE PAR_DER
    (34) metodo_mapas -> PAR_IZQ GET NOMBRE . STRING PAR_DER

    NOMBRE          shift and go to state 152
    STRING          shift and go to state 153


state 98

    (28) metodo_vector -> PAR_IZQ GET estructura_vector . NOMBRE PAR_DER
    (29) metodo_vector -> PAR_IZQ GET estructura_vector . ENTERO PAR_DER

    NOMBRE          shift and go to state 154
    ENTERO          shift and go to state 155


state 99

    (31) metodo_mapas -> PAR_IZQ GET estructura_mapa . STRING PAR_DER
    (32) metodo_mapas -> PAR_IZQ GET estructura_mapa . NOMBRE PAR_DER

    STRING          shift and go to state 156
    NOMBRE          shift and go to state 157


state 100

    (75) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (77) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER

    CONJUNTO        shift and go to state 61
    VECTOR          shift and go to state 62


state 101

    (27) metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto . valor PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 158
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 102

    (30) metodo_vector -> PAR_IZQ CONJ estructura_vector . valor PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 159
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 103

    (80) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (81) mapas -> . SORTEDMAP REST MAP
    (82) mapas -> . HASHMAP REST MAP

    SORTEDMAP       shift and go to state 76
    HASHMAP         shift and go to state 77

    mapas                          shift and go to state 59

state 104

    (35) metodo_mapas -> PAR_IZQ KEYS estructura_mapa . PAR_DER

    PAR_DER         shift and go to state 160


state 105

    (36) metodo_mapas -> PAR_IZQ KEYS NOMBRE . PAR_DER

    PAR_DER         shift and go to state 161


state 106

    (65) expresionAritmetica -> PAR_IZQ . operadorMat numberoSerie PAR_DER
    (98) operadorMat -> . SUM
    (99) operadorMat -> . REST
    (100) operadorMat -> . PRODUCT
    (101) operadorMat -> . DIVISION

    SUM             shift and go to state 65
    REST            shift and go to state 54
    PRODUCT         shift and go to state 66
    DIVISION        shift and go to state 67

    operadorMat                    shift and go to state 49

state 107

    (65) expresionAritmetica -> PAR_IZQ operadorMat numberoSerie . PAR_DER

    PAR_DER         shift and go to state 162


state 108

    (66) numberoSerie -> numero .
    (69) numberoSerie -> numero . numberoSerie
    (66) numberoSerie -> . numero
    (67) numberoSerie -> . NOMBRE
    (68) numberoSerie -> . expresionAritmetica
    (69) numberoSerie -> . numero numberoSerie
    (70) numberoSerie -> . NOMBRE numberoSerie
    (71) numberoSerie -> . expresionAritmetica numberoSerie
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER

    PAR_DER         reduce using rule 66 (numberoSerie -> numero .)
    NOMBRE          shift and go to state 109
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    PAR_IZQ         shift and go to state 106

    numero                         shift and go to state 108
    numberoSerie                   shift and go to state 163
    expresionAritmetica            shift and go to state 110

state 109

    (67) numberoSerie -> NOMBRE .
    (70) numberoSerie -> NOMBRE . numberoSerie
    (66) numberoSerie -> . numero
    (67) numberoSerie -> . NOMBRE
    (68) numberoSerie -> . expresionAritmetica
    (69) numberoSerie -> . numero numberoSerie
    (70) numberoSerie -> . NOMBRE numberoSerie
    (71) numberoSerie -> . expresionAritmetica numberoSerie
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER

    PAR_DER         reduce using rule 67 (numberoSerie -> NOMBRE .)
    NOMBRE          shift and go to state 109
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    PAR_IZQ         shift and go to state 106

    numberoSerie                   shift and go to state 164
    numero                         shift and go to state 108
    expresionAritmetica            shift and go to state 110

state 110

    (68) numberoSerie -> expresionAritmetica .
    (71) numberoSerie -> expresionAritmetica . numberoSerie
    (66) numberoSerie -> . numero
    (67) numberoSerie -> . NOMBRE
    (68) numberoSerie -> . expresionAritmetica
    (69) numberoSerie -> . numero numberoSerie
    (70) numberoSerie -> . NOMBRE numberoSerie
    (71) numberoSerie -> . expresionAritmetica numberoSerie
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER

    PAR_DER         reduce using rule 68 (numberoSerie -> expresionAritmetica .)
    NOMBRE          shift and go to state 109
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    PAR_IZQ         shift and go to state 106

    expresionAritmetica            shift and go to state 110
    numberoSerie                   shift and go to state 165
    numero                         shift and go to state 108

state 111

    (64) comparacion -> PAR_IZQ operadorComparacion valor . valor PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 166
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 112

    (62) comparacionLogica -> PAR_IZQ operadorLogico valor . valor PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    valor                          shift and go to state 167
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 113

    (63) comparacionLogica -> PAR_IZQ NOT valor . PAR_DER

    PAR_DER         shift and go to state 168


state 114

    (60) input -> PAR_IZQ READ REST . LINE PAR_DER

    LINE            shift and go to state 169


state 115

    (62) comparacionLogica -> PAR_IZQ . operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> PAR_IZQ . NOT valor PAR_DER
    (64) comparacion -> PAR_IZQ . operadorComparacion valor valor PAR_DER
    (108) operadorLogico -> . AND
    (109) operadorLogico -> . OR
    (102) operadorComparacion -> . EQUAL
    (103) operadorComparacion -> . NOT_EQUAL
    (104) operadorComparacion -> . GREATER_THAN
    (105) operadorComparacion -> . LESS_THAN
    (106) operadorComparacion -> . GREATER_THAN_EQUAL
    (107) operadorComparacion -> . LESS_THAN_EQUAL

    NOT             shift and go to state 52
    AND             shift and go to state 74
    OR              shift and go to state 75
    EQUAL           shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_THAN       shift and go to state 71
    GREATER_THAN_EQUAL shift and go to state 72
    LESS_THAN_EQUAL shift and go to state 73

    operadorLogico                 shift and go to state 51
    operadorComparacion            shift and go to state 50

state 116

    (55) if -> PAR_IZQ IF expresionBooleana . sentencia_compuesta PAR_DER
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . estructurasControl
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (61) imprimir -> . PAR_IZQ opcionesImprimir expresion PAR_DER
    (48) estructurasControl -> . if
    (49) estructurasControl -> . while
    (50) estructurasControl -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (55) if -> . PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER
    (54) while -> . PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (51) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    sentencia_compuesta            shift and go to state 170
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    estructurasControl             shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacion                    shift and go to state 17
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    if                             shift and go to state 20
    while                          shift and go to state 21
    loop                           shift and go to state 22
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26
    estructura_mapa                shift and go to state 27
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 117

    (56) expresionBooleana -> FALSE .

    PAR_IZQ         reduce using rule 56 (expresionBooleana -> FALSE .)
    NOMBRE          reduce using rule 56 (expresionBooleana -> FALSE .)
    ENTERO          reduce using rule 56 (expresionBooleana -> FALSE .)
    FLOTANTE        reduce using rule 56 (expresionBooleana -> FALSE .)
    TRUE            reduce using rule 56 (expresionBooleana -> FALSE .)
    FALSE           reduce using rule 56 (expresionBooleana -> FALSE .)
    STRING          reduce using rule 56 (expresionBooleana -> FALSE .)
    LLAV_IZQ        reduce using rule 56 (expresionBooleana -> FALSE .)
    COM_SIM         reduce using rule 56 (expresionBooleana -> FALSE .)
    HASH            reduce using rule 56 (expresionBooleana -> FALSE .)
    COR_IZQ         reduce using rule 56 (expresionBooleana -> FALSE .)


state 118

    (57) expresionBooleana -> TRUE .

    PAR_IZQ         reduce using rule 57 (expresionBooleana -> TRUE .)
    NOMBRE          reduce using rule 57 (expresionBooleana -> TRUE .)
    ENTERO          reduce using rule 57 (expresionBooleana -> TRUE .)
    FLOTANTE        reduce using rule 57 (expresionBooleana -> TRUE .)
    TRUE            reduce using rule 57 (expresionBooleana -> TRUE .)
    FALSE           reduce using rule 57 (expresionBooleana -> TRUE .)
    STRING          reduce using rule 57 (expresionBooleana -> TRUE .)
    LLAV_IZQ        reduce using rule 57 (expresionBooleana -> TRUE .)
    COM_SIM         reduce using rule 57 (expresionBooleana -> TRUE .)
    HASH            reduce using rule 57 (expresionBooleana -> TRUE .)
    COR_IZQ         reduce using rule 57 (expresionBooleana -> TRUE .)


state 119

    (58) expresionBooleana -> comparacionLogica .

    PAR_IZQ         reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    NOMBRE          reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    ENTERO          reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    FLOTANTE        reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    TRUE            reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    FALSE           reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    STRING          reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    LLAV_IZQ        reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    COM_SIM         reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    HASH            reduce using rule 58 (expresionBooleana -> comparacionLogica .)
    COR_IZQ         reduce using rule 58 (expresionBooleana -> comparacionLogica .)


state 120

    (59) expresionBooleana -> comparacion .

    PAR_IZQ         reduce using rule 59 (expresionBooleana -> comparacion .)
    NOMBRE          reduce using rule 59 (expresionBooleana -> comparacion .)
    ENTERO          reduce using rule 59 (expresionBooleana -> comparacion .)
    FLOTANTE        reduce using rule 59 (expresionBooleana -> comparacion .)
    TRUE            reduce using rule 59 (expresionBooleana -> comparacion .)
    FALSE           reduce using rule 59 (expresionBooleana -> comparacion .)
    STRING          reduce using rule 59 (expresionBooleana -> comparacion .)
    LLAV_IZQ        reduce using rule 59 (expresionBooleana -> comparacion .)
    COM_SIM         reduce using rule 59 (expresionBooleana -> comparacion .)
    HASH            reduce using rule 59 (expresionBooleana -> comparacion .)
    COR_IZQ         reduce using rule 59 (expresionBooleana -> comparacion .)


state 121

    (64) comparacion -> PAR_IZQ . operadorComparacion valor valor PAR_DER
    (102) operadorComparacion -> . EQUAL
    (103) operadorComparacion -> . NOT_EQUAL
    (104) operadorComparacion -> . GREATER_THAN
    (105) operadorComparacion -> . LESS_THAN
    (106) operadorComparacion -> . GREATER_THAN_EQUAL
    (107) operadorComparacion -> . LESS_THAN_EQUAL

    EQUAL           shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_THAN       shift and go to state 71
    GREATER_THAN_EQUAL shift and go to state 72
    LESS_THAN_EQUAL shift and go to state 73

    operadorComparacion            shift and go to state 50

state 122

    (54) while -> PAR_IZQ WHILE comparacion . PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 171


state 123

    (51) loop -> PAR_IZQ LOOP COR_IZQ . compuesto COR_DER when PAR_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    compuesto                      shift and go to state 172
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 124

    (93) cadena -> PAR_IZQ STR STRING . STRING PAR_DER

    STRING          shift and go to state 173


state 125

    (80) estructura_mapa -> PAR_IZQ mapas parclaves . PAR_DER

    PAR_DER         shift and go to state 174


state 126

    (72) estructura_lista -> PAR_IZQ LISTA PAR_IZQ . compuesto PAR_DER PAR_DER
    (93) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    STR             shift and go to state 58
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    compuesto                      shift and go to state 175
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 127

    (74) estructura_lista -> PAR_IZQ LISTA compuesto . PAR_DER

    PAR_DER         shift and go to state 176


state 128

    (75) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM . PAR_IZQ compuesto PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 177


state 129

    (77) estructura_vector -> PAR_IZQ VECTOR compuesto . PAR_DER

    PAR_DER         shift and go to state 178


state 130

    (81) mapas -> SORTEDMAP REST . MAP

    MAP             shift and go to state 179


state 131

    (82) mapas -> HASHMAP REST . MAP

    MAP             shift and go to state 180


state 132

    (78) estructura_vector -> COR_IZQ compuesto COR_DER .

    PAR_IZQ         reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    NOMBRE          reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    ENTERO          reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    FLOTANTE        reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    TRUE            reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    FALSE           reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    STRING          reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    LLAV_IZQ        reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    COM_SIM         reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    HASH            reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    COR_IZQ         reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    $end            reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    PAR_DER         reduce using rule 78 (estructura_vector -> COR_IZQ compuesto COR_DER .)


state 133

    (84) compuesto -> valor compuesto .

    COR_DER         reduce using rule 84 (compuesto -> valor compuesto .)
    PAR_DER         reduce using rule 84 (compuesto -> valor compuesto .)
    LLAV_DER        reduce using rule 84 (compuesto -> valor compuesto .)


state 134

    (79) estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .

    PAR_IZQ         reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    NOMBRE          reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    ENTERO          reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    FLOTANTE        reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    TRUE            reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    FALSE           reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    STRING          reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    LLAV_IZQ        reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    COM_SIM         reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    HASH            reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    COR_IZQ         reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    $end            reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    PAR_DER         reduce using rule 79 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)


state 135

    (85) parclaves -> STRING STRING .
    (86) parclaves -> STRING STRING . COMA parclaves
    (87) parclaves -> STRING STRING . parclaves
    (85) parclaves -> . STRING STRING
    (86) parclaves -> . STRING STRING COMA parclaves
    (87) parclaves -> . STRING STRING parclaves

    LLAV_DER        reduce using rule 85 (parclaves -> STRING STRING .)
    PAR_DER         reduce using rule 85 (parclaves -> STRING STRING .)
    COMA            shift and go to state 181
    STRING          shift and go to state 82

    parclaves                      shift and go to state 182

state 136

    (73) estructura_lista -> COM_SIM PAR_IZQ compuesto . PAR_DER

    PAR_DER         shift and go to state 183


state 137

    (76) estructura_conjunto -> HASH LLAV_IZQ compuesto . LLAV_DER

    LLAV_DER        shift and go to state 184


state 138

    (37) variable -> PAR_IZQ DEF NOMBRE expresion . PAR_DER

    PAR_DER         shift and go to state 185


state 139

    (61) imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .

    PAR_IZQ         reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    NOMBRE          reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    ENTERO          reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    FLOTANTE        reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    TRUE            reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    FALSE           reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    STRING          reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    LLAV_IZQ        reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    COM_SIM         reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    HASH            reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    COR_IZQ         reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    $end            reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)
    PAR_DER         reduce using rule 61 (imprimir -> PAR_IZQ opcionesImprimir expresion PAR_DER .)


state 140

    (12) funcion -> PAR_IZQ DEFN NOMBRE argumentos . sentencia_compuesta PAR_DER
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . estructurasControl
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (61) imprimir -> . PAR_IZQ opcionesImprimir expresion PAR_DER
    (48) estructurasControl -> . if
    (49) estructurasControl -> . while
    (50) estructurasControl -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (55) if -> . PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER
    (54) while -> . PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (51) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    sentencia_compuesta            shift and go to state 186
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    estructurasControl             shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacion                    shift and go to state 17
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    if                             shift and go to state 20
    while                          shift and go to state 21
    loop                           shift and go to state 22
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26
    estructura_mapa                shift and go to state 27
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 141

    (13) argumentos -> COR_IZQ . argumento COR_DER
    (14) argumentos -> COR_IZQ . COR_DER
    (15) argumento -> . NOMBRE
    (16) argumento -> . NOMBRE argumento

    COR_DER         shift and go to state 188
    NOMBRE          shift and go to state 189

    argumento                      shift and go to state 187

state 142

    (17) metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    ENTERO          reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    TRUE            reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    FALSE           reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    STRING          reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    HASH            reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    $end            reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)


state 143

    (18) metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .

    PAR_IZQ         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    NOMBRE          reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    ENTERO          reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    FLOTANTE        reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    TRUE            reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    FALSE           reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    STRING          reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    LLAV_IZQ        reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    COM_SIM         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    HASH            reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    COR_IZQ         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    $end            reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    PAR_DER         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)


state 144

    (19) metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE . PAR_DER

    PAR_DER         shift and go to state 190


state 145

    (20) metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO . PAR_DER

    PAR_DER         shift and go to state 191


state 146

    (21) metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO . PAR_DER

    PAR_DER         shift and go to state 192


state 147

    (22) metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE . PAR_DER

    PAR_DER         shift and go to state 193


state 148

    (23) metodo_lista -> PAR_IZQ CONS valor NOMBRE . PAR_DER

    PAR_DER         shift and go to state 194


state 149

    (24) metodo_lista -> PAR_IZQ CONS valor estructura_lista . PAR_DER

    PAR_DER         shift and go to state 195


state 150

    (25) metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE . PAR_DER

    PAR_DER         shift and go to state 196


state 151

    (26) metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO . PAR_DER

    PAR_DER         shift and go to state 197


state 152

    (33) metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE . PAR_DER

    PAR_DER         shift and go to state 198


state 153

    (34) metodo_mapas -> PAR_IZQ GET NOMBRE STRING . PAR_DER

    PAR_DER         shift and go to state 199


state 154

    (28) metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE . PAR_DER

    PAR_DER         shift and go to state 200


state 155

    (29) metodo_vector -> PAR_IZQ GET estructura_vector ENTERO . PAR_DER

    PAR_DER         shift and go to state 201


state 156

    (31) metodo_mapas -> PAR_IZQ GET estructura_mapa STRING . PAR_DER

    PAR_DER         shift and go to state 202


state 157

    (32) metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE . PAR_DER

    PAR_DER         shift and go to state 203


state 158

    (27) metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor . PAR_DER

    PAR_DER         shift and go to state 204


state 159

    (30) metodo_vector -> PAR_IZQ CONJ estructura_vector valor . PAR_DER

    PAR_DER         shift and go to state 205


state 160

    (35) metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .

    PAR_IZQ         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    NOMBRE          reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    ENTERO          reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    FLOTANTE        reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    TRUE            reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    FALSE           reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    STRING          reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    LLAV_IZQ        reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    COM_SIM         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    HASH            reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    COR_IZQ         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    $end            reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    PAR_DER         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)


state 161

    (36) metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    ENTERO          reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    TRUE            reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    FALSE           reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    STRING          reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    HASH            reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    $end            reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)


state 162

    (65) expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .

    PAR_IZQ         reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    NOMBRE          reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    ENTERO          reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    FLOTANTE        reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    TRUE            reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    FALSE           reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    STRING          reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    LLAV_IZQ        reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    COM_SIM         reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    HASH            reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    COR_IZQ         reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    $end            reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)
    PAR_DER         reduce using rule 65 (expresionAritmetica -> PAR_IZQ operadorMat numberoSerie PAR_DER .)


state 163

    (69) numberoSerie -> numero numberoSerie .

    PAR_DER         reduce using rule 69 (numberoSerie -> numero numberoSerie .)


state 164

    (70) numberoSerie -> NOMBRE numberoSerie .

    PAR_DER         reduce using rule 70 (numberoSerie -> NOMBRE numberoSerie .)


state 165

    (71) numberoSerie -> expresionAritmetica numberoSerie .

    PAR_DER         reduce using rule 71 (numberoSerie -> expresionAritmetica numberoSerie .)


state 166

    (64) comparacion -> PAR_IZQ operadorComparacion valor valor . PAR_DER

    PAR_DER         shift and go to state 206


state 167

    (62) comparacionLogica -> PAR_IZQ operadorLogico valor valor . PAR_DER

    PAR_DER         shift and go to state 207


state 168

    (63) comparacionLogica -> PAR_IZQ NOT valor PAR_DER .

    PAR_IZQ         reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    NOMBRE          reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    ENTERO          reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    FLOTANTE        reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    TRUE            reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    FALSE           reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    STRING          reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    LLAV_IZQ        reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    COM_SIM         reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    HASH            reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    COR_IZQ         reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    $end            reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)
    PAR_DER         reduce using rule 63 (comparacionLogica -> PAR_IZQ NOT valor PAR_DER .)


state 169

    (60) input -> PAR_IZQ READ REST LINE . PAR_DER

    PAR_DER         shift and go to state 208


state 170

    (55) if -> PAR_IZQ IF expresionBooleana sentencia_compuesta . PAR_DER

    PAR_DER         shift and go to state 209


state 171

    (54) while -> PAR_IZQ WHILE comparacion PAR_IZQ . DO sentencia_compuesta PAR_DER PAR_DER

    DO              shift and go to state 210


state 172

    (51) loop -> PAR_IZQ LOOP COR_IZQ compuesto . COR_DER when PAR_DER

    COR_DER         shift and go to state 211


state 173

    (93) cadena -> PAR_IZQ STR STRING STRING . PAR_DER

    PAR_DER         shift and go to state 212


state 174

    (80) estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .

    PAR_IZQ         reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    NOMBRE          reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    ENTERO          reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    FLOTANTE        reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    TRUE            reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    FALSE           reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    STRING          reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    LLAV_IZQ        reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    COM_SIM         reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    HASH            reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    COR_IZQ         reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    $end            reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    PAR_DER         reduce using rule 80 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)


state 175

    (72) estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto . PAR_DER PAR_DER

    PAR_DER         shift and go to state 213


state 176

    (74) estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .

    PAR_IZQ         reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    NOMBRE          reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    ENTERO          reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    FLOTANTE        reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    TRUE            reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    FALSE           reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    STRING          reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    LLAV_IZQ        reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    COM_SIM         reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    HASH            reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    COR_IZQ         reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    $end            reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    PAR_DER         reduce using rule 74 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)


state 177

    (75) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ . compuesto PAR_DER PAR_DER
    (83) compuesto -> . valor
    (84) compuesto -> . valor compuesto
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    PAR_IZQ         shift and go to state 80

    compuesto                      shift and go to state 214
    valor                          shift and go to state 79
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 178

    (77) estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .

    PAR_IZQ         reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    NOMBRE          reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    ENTERO          reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    FLOTANTE        reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    TRUE            reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    FALSE           reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    STRING          reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    LLAV_IZQ        reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    COM_SIM         reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    HASH            reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    COR_IZQ         reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    $end            reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    PAR_DER         reduce using rule 77 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)


state 179

    (81) mapas -> SORTEDMAP REST MAP .

    STRING          reduce using rule 81 (mapas -> SORTEDMAP REST MAP .)


state 180

    (82) mapas -> HASHMAP REST MAP .

    STRING          reduce using rule 82 (mapas -> HASHMAP REST MAP .)


state 181

    (86) parclaves -> STRING STRING COMA . parclaves
    (85) parclaves -> . STRING STRING
    (86) parclaves -> . STRING STRING COMA parclaves
    (87) parclaves -> . STRING STRING parclaves

    STRING          shift and go to state 82

    parclaves                      shift and go to state 215

state 182

    (87) parclaves -> STRING STRING parclaves .

    LLAV_DER        reduce using rule 87 (parclaves -> STRING STRING parclaves .)
    PAR_DER         reduce using rule 87 (parclaves -> STRING STRING parclaves .)


state 183

    (73) estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .

    PAR_IZQ         reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    NOMBRE          reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    ENTERO          reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    FLOTANTE        reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    TRUE            reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    FALSE           reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    STRING          reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    LLAV_IZQ        reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    COM_SIM         reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    HASH            reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    COR_IZQ         reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    $end            reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    PAR_DER         reduce using rule 73 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)


state 184

    (76) estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .

    PAR_IZQ         reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    NOMBRE          reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    ENTERO          reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    FLOTANTE        reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    TRUE            reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    FALSE           reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    STRING          reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    LLAV_IZQ        reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    COM_SIM         reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    HASH            reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    COR_IZQ         reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    $end            reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    PAR_DER         reduce using rule 76 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)


state 185

    (37) variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .

    PAR_IZQ         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    NOMBRE          reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    ENTERO          reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    FLOTANTE        reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    TRUE            reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    FALSE           reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    STRING          reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    LLAV_IZQ        reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    COM_SIM         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    HASH            reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    COR_IZQ         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    $end            reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    PAR_DER         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)


state 186

    (12) funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta . PAR_DER

    PAR_DER         shift and go to state 216


state 187

    (13) argumentos -> COR_IZQ argumento . COR_DER

    COR_DER         shift and go to state 217


state 188

    (14) argumentos -> COR_IZQ COR_DER .

    PAR_IZQ         reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    NOMBRE          reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    ENTERO          reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    FLOTANTE        reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    TRUE            reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    FALSE           reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    STRING          reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    LLAV_IZQ        reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    COM_SIM         reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    HASH            reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    COR_IZQ         reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)


state 189

    (15) argumento -> NOMBRE .
    (16) argumento -> NOMBRE . argumento
    (15) argumento -> . NOMBRE
    (16) argumento -> . NOMBRE argumento

    COR_DER         reduce using rule 15 (argumento -> NOMBRE .)
    NOMBRE          shift and go to state 189

    argumento                      shift and go to state 218

state 190

    (19) metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    ENTERO          reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    TRUE            reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    FALSE           reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    STRING          reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    HASH            reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    $end            reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)


state 191

    (20) metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    NOMBRE          reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    ENTERO          reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    TRUE            reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    FALSE           reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    STRING          reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    COM_SIM         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    HASH            reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    $end            reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    PAR_DER         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)


state 192

    (21) metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    NOMBRE          reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    ENTERO          reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    TRUE            reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    FALSE           reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    STRING          reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    COM_SIM         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    HASH            reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    $end            reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    PAR_DER         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)


state 193

    (22) metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    ENTERO          reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    TRUE            reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    FALSE           reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    STRING          reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    HASH            reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    $end            reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)


state 194

    (23) metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    ENTERO          reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    TRUE            reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    FALSE           reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    STRING          reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    HASH            reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    $end            reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)


state 195

    (24) metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .

    PAR_IZQ         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    NOMBRE          reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    ENTERO          reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    FLOTANTE        reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    TRUE            reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    FALSE           reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    STRING          reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    LLAV_IZQ        reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    COM_SIM         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    HASH            reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    COR_IZQ         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    $end            reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    PAR_DER         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)


state 196

    (25) metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    ENTERO          reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    TRUE            reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    FALSE           reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    STRING          reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    HASH            reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    $end            reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)


state 197

    (26) metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    NOMBRE          reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    ENTERO          reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    TRUE            reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    FALSE           reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    STRING          reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    COM_SIM         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    HASH            reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    $end            reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    PAR_DER         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)


state 198

    (33) metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    ENTERO          reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    TRUE            reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    FALSE           reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    STRING          reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    HASH            reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    $end            reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)


state 199

    (34) metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .

    PAR_IZQ         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    NOMBRE          reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    ENTERO          reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    FLOTANTE        reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    TRUE            reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    FALSE           reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    STRING          reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    LLAV_IZQ        reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    COM_SIM         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    HASH            reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    COR_IZQ         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    $end            reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    PAR_DER         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)


state 200

    (28) metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    ENTERO          reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    TRUE            reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    FALSE           reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    STRING          reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    HASH            reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    $end            reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)


state 201

    (29) metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    NOMBRE          reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    ENTERO          reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    TRUE            reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    FALSE           reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    STRING          reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    COM_SIM         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    HASH            reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    $end            reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    PAR_DER         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)


state 202

    (31) metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .

    PAR_IZQ         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    NOMBRE          reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    ENTERO          reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    FLOTANTE        reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    TRUE            reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    FALSE           reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    STRING          reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    LLAV_IZQ        reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    COM_SIM         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    HASH            reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    COR_IZQ         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    $end            reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    PAR_DER         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)


state 203

    (32) metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    ENTERO          reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    TRUE            reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    FALSE           reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    STRING          reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    HASH            reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    $end            reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)


state 204

    (27) metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .

    PAR_IZQ         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    NOMBRE          reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    ENTERO          reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    FLOTANTE        reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    TRUE            reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    FALSE           reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    STRING          reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    LLAV_IZQ        reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    COM_SIM         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    HASH            reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    COR_IZQ         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    $end            reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    PAR_DER         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)


state 205

    (30) metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .

    PAR_IZQ         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    NOMBRE          reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    ENTERO          reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    FLOTANTE        reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    TRUE            reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    FALSE           reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    STRING          reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    LLAV_IZQ        reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    COM_SIM         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    HASH            reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    COR_IZQ         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    $end            reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    PAR_DER         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)


state 206

    (64) comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .

    PAR_IZQ         reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    NOMBRE          reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    ENTERO          reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    FLOTANTE        reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    TRUE            reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    FALSE           reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    STRING          reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    LLAV_IZQ        reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    COM_SIM         reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    HASH            reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    COR_IZQ         reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    $end            reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)
    PAR_DER         reduce using rule 64 (comparacion -> PAR_IZQ operadorComparacion valor valor PAR_DER .)


state 207

    (62) comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .

    PAR_IZQ         reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    NOMBRE          reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    ENTERO          reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    FLOTANTE        reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    TRUE            reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    FALSE           reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    STRING          reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    LLAV_IZQ        reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    COM_SIM         reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    HASH            reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    COR_IZQ         reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    $end            reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)
    PAR_DER         reduce using rule 62 (comparacionLogica -> PAR_IZQ operadorLogico valor valor PAR_DER .)


state 208

    (60) input -> PAR_IZQ READ REST LINE PAR_DER .

    PAR_IZQ         reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    NOMBRE          reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    ENTERO          reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    FLOTANTE        reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    TRUE            reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    FALSE           reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    STRING          reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    LLAV_IZQ        reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    COM_SIM         reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    HASH            reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    COR_IZQ         reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    $end            reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)
    PAR_DER         reduce using rule 60 (input -> PAR_IZQ READ REST LINE PAR_DER .)


state 209

    (55) if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .

    PAR_IZQ         reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    NOMBRE          reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    ENTERO          reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    FLOTANTE        reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    TRUE            reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    FALSE           reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    STRING          reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    LLAV_IZQ        reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    COM_SIM         reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    HASH            reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    COR_IZQ         reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    $end            reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)
    PAR_DER         reduce using rule 55 (if -> PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER .)


state 210

    (54) while -> PAR_IZQ WHILE comparacion PAR_IZQ DO . sentencia_compuesta PAR_DER PAR_DER
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . estructurasControl
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (61) imprimir -> . PAR_IZQ opcionesImprimir expresion PAR_DER
    (48) estructurasControl -> . if
    (49) estructurasControl -> . while
    (50) estructurasControl -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (55) if -> . PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER
    (54) while -> . PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (51) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    comparacion                    shift and go to state 17
    sentencia_compuesta            shift and go to state 219
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    estructurasControl             shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    if                             shift and go to state 20
    while                          shift and go to state 21
    loop                           shift and go to state 22
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26
    estructura_mapa                shift and go to state 27
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 211

    (51) loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER . when PAR_DER
    (52) when -> . PAR_IZQ WHEN comparacion algoritmo recur PAR_DER

    PAR_IZQ         shift and go to state 220

    when                           shift and go to state 221

state 212

    (93) cadena -> PAR_IZQ STR STRING STRING PAR_DER .

    PAR_IZQ         reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    NOMBRE          reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    ENTERO          reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    FLOTANTE        reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    TRUE            reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    FALSE           reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    STRING          reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    LLAV_IZQ        reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    COM_SIM         reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    HASH            reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    COR_IZQ         reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    $end            reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    PAR_DER         reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    COR_DER         reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    LLAV_DER        reduce using rule 93 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)


state 213

    (72) estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER . PAR_DER

    PAR_DER         shift and go to state 222


state 214

    (75) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto . PAR_DER PAR_DER

    PAR_DER         shift and go to state 223


state 215

    (86) parclaves -> STRING STRING COMA parclaves .

    LLAV_DER        reduce using rule 86 (parclaves -> STRING STRING COMA parclaves .)
    PAR_DER         reduce using rule 86 (parclaves -> STRING STRING COMA parclaves .)


state 216

    (12) funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .

    PAR_IZQ         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    NOMBRE          reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    ENTERO          reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    FLOTANTE        reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    TRUE            reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    FALSE           reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    STRING          reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    LLAV_IZQ        reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    COM_SIM         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    HASH            reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    COR_IZQ         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    $end            reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    PAR_DER         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)


state 217

    (13) argumentos -> COR_IZQ argumento COR_DER .

    PAR_IZQ         reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    NOMBRE          reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    ENTERO          reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    FLOTANTE        reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    TRUE            reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    FALSE           reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    STRING          reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    LLAV_IZQ        reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    COM_SIM         reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    HASH            reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    COR_IZQ         reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)


state 218

    (16) argumento -> NOMBRE argumento .

    COR_DER         reduce using rule 16 (argumento -> NOMBRE argumento .)


state 219

    (54) while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta . PAR_DER PAR_DER

    PAR_DER         shift and go to state 224


state 220

    (52) when -> PAR_IZQ . WHEN comparacion algoritmo recur PAR_DER

    WHEN            shift and go to state 225


state 221

    (51) loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when . PAR_DER

    PAR_DER         shift and go to state 226


state 222

    (72) estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .

    PAR_IZQ         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    NOMBRE          reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    ENTERO          reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    FLOTANTE        reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    TRUE            reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    FALSE           reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    STRING          reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    LLAV_IZQ        reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    COM_SIM         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    HASH            reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    COR_IZQ         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    $end            reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)


state 223

    (75) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER . PAR_DER

    PAR_DER         shift and go to state 227


state 224

    (54) while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER . PAR_DER

    PAR_DER         shift and go to state 228


state 225

    (52) when -> PAR_IZQ WHEN . comparacion algoritmo recur PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER

    PAR_IZQ         shift and go to state 121

    comparacion                    shift and go to state 229

state 226

    (51) loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .

    PAR_IZQ         reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    NOMBRE          reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    ENTERO          reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    FLOTANTE        reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    TRUE            reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    FALSE           reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    STRING          reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    LLAV_IZQ        reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    COM_SIM         reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    HASH            reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    COR_IZQ         reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    $end            reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    PAR_DER         reduce using rule 51 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)


state 227

    (75) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .

    PAR_IZQ         reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    NOMBRE          reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    ENTERO          reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    FLOTANTE        reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    TRUE            reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    FALSE           reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    STRING          reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    LLAV_IZQ        reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    COM_SIM         reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    HASH            reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    COR_IZQ         reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    $end            reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 75 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)


state 228

    (54) while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .

    PAR_IZQ         reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    NOMBRE          reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    ENTERO          reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    FLOTANTE        reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    TRUE            reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    FALSE           reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    STRING          reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    LLAV_IZQ        reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    COM_SIM         reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    HASH            reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    COR_IZQ         reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    $end            reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 54 (while -> PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)


state 229

    (52) when -> PAR_IZQ WHEN comparacion . algoritmo recur PAR_DER
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . estructurasControl
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparacion
    (42) expresion -> . comparacionLogica
    (43) expresion -> . input
    (61) imprimir -> . PAR_IZQ opcionesImprimir expresion PAR_DER
    (48) estructurasControl -> . if
    (49) estructurasControl -> . while
    (50) estructurasControl -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (88) valor -> . numero
    (89) valor -> . NOMBRE
    (90) valor -> . booleano
    (91) valor -> . cadena
    (44) estructura -> . estructura_mapa
    (45) estructura -> . estructura_lista
    (46) estructura -> . estructura_conjunto
    (47) estructura -> . estructura_vector
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER
    (64) comparacion -> . PAR_IZQ operadorComparacion valor valor PAR_DER
    (62) comparacionLogica -> . PAR_IZQ operadorLogico valor valor PAR_DER
    (63) comparacionLogica -> . PAR_IZQ NOT valor PAR_DER
    (60) input -> . PAR_IZQ READ REST LINE PAR_DER
    (55) if -> . PAR_IZQ IF expresionBooleana sentencia_compuesta PAR_DER
    (54) while -> . PAR_IZQ WHILE comparacion PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (51) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (96) numero -> . ENTERO
    (97) numero -> . FLOTANTE
    (94) booleano -> . TRUE
    (95) booleano -> . FALSE
    (92) cadena -> . STRING
    (93) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (79) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (80) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (73) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (74) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (75) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (76) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (77) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (78) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 28
    LLAV_IZQ        shift and go to state 36
    COM_SIM         shift and go to state 37
    HASH            shift and go to state 38
    COR_IZQ         shift and go to state 32

    comparacion                    shift and go to state 17
    algoritmo                      shift and go to state 230
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    estructurasControl             shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparacionLogica              shift and go to state 18
    input                          shift and go to state 19
    if                             shift and go to state 20
    while                          shift and go to state 21
    loop                           shift and go to state 22
    estructura_lista               shift and go to state 23
    estructura_conjunto            shift and go to state 25
    estructura_vector              shift and go to state 26
    estructura_mapa                shift and go to state 27
    numero                         shift and go to state 29
    booleano                       shift and go to state 30
    cadena                         shift and go to state 31

state 230

    (52) when -> PAR_IZQ WHEN comparacion algoritmo . recur PAR_DER
    (53) recur -> . PAR_IZQ RECUR expresionAritmetica PAR_DER

    PAR_IZQ         shift and go to state 231

    recur                          shift and go to state 232

state 231

    (53) recur -> PAR_IZQ . RECUR expresionAritmetica PAR_DER

    RECUR           shift and go to state 233


state 232

    (52) when -> PAR_IZQ WHEN comparacion algoritmo recur . PAR_DER

    PAR_DER         shift and go to state 234


state 233

    (53) recur -> PAR_IZQ RECUR . expresionAritmetica PAR_DER
    (65) expresionAritmetica -> . PAR_IZQ operadorMat numberoSerie PAR_DER

    PAR_IZQ         shift and go to state 106

    expresionAritmetica            shift and go to state 235

state 234

    (52) when -> PAR_IZQ WHEN comparacion algoritmo recur PAR_DER .

    PAR_DER         reduce using rule 52 (when -> PAR_IZQ WHEN comparacion algoritmo recur PAR_DER .)


state 235

    (53) recur -> PAR_IZQ RECUR expresionAritmetica . PAR_DER

    PAR_DER         shift and go to state 236


state 236

    (53) recur -> PAR_IZQ RECUR expresionAritmetica PAR_DER .

    PAR_DER         reduce using rule 53 (recur -> PAR_IZQ RECUR expresionAritmetica PAR_DER .)

