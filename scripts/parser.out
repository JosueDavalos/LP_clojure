Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    NULL
    LOOP
    WHILE
    DO
    WHEN
    PRINTLN
    RECUR
    DEFN
    METODOFIRST
    METODONTH
    IF
    DOSEQ
    READLINE
    NOT
    AND
    OR
    CHAR
    SUM
    REST
    PRODUCT
    DIVISION
    EQUAL
    NOT_EQUAL
    GREATER_THAN
    LESS_THAN
    GREATER_THAN_EQUAL
    LESS_THAN_EQUAL

Grammar

Rule 0     S' -> algoritmo
Rule 1     algoritmo -> variable
Rule 2     algoritmo -> expresion
Rule 3     variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER
Rule 4     expresion -> valor
Rule 5     expresion -> estructura
Rule 6     expresion -> cadena
Rule 7     estructura -> PAR_IZQ LISTA PAR_IZQ valor PAR_DER PAR_DER
Rule 8     estructura -> COM_SIM PAR_IZQ valor PAR_DER
Rule 9     estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER
Rule 10    estructura -> HASH LLAV_IZQ valor LLAV_DER
Rule 11    estructura -> PAR_IZQ VECTOR valor PAR_DER
Rule 12    estructura -> COR_IZQ valor COR_DER
Rule 13    estructura -> LLAV_IZQ STRING STRING LLAV_DER
Rule 14    estructura -> PAR_IZQ mapas STRING STRING PAR_DER
Rule 15    mapas -> SORTEDMAP
Rule 16    mapas -> HASHMAP
Rule 17    valor -> numero
Rule 18    valor -> NOMBRE
Rule 19    valor -> booleano
Rule 20    cadena -> STRING
Rule 21    cadena -> PAR_IZQ STR STRING PAR_DER
Rule 22    booleano -> TRUE
Rule 23    booleano -> FALSE
Rule 24    numero -> ENTERO
Rule 25    numero -> FLOTANTE

Terminals, with rules where they appear

AND                  : 
CHAR                 : 
COM_SIM              : 8 9
CONJUNTO             : 9
COR_DER              : 12
COR_IZQ              : 12
DEF                  : 3
DEFN                 : 
DIVISION             : 
DO                   : 
DOSEQ                : 
ENTERO               : 24
EQUAL                : 
FALSE                : 23
FLOTANTE             : 25
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
HASH                 : 10
HASHMAP              : 16
IF                   : 
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LISTA                : 7
LLAV_DER             : 10 13
LLAV_IZQ             : 10 13
LOOP                 : 
METODOFIRST          : 
METODONTH            : 
NOMBRE               : 3 18
NOT                  : 
NOT_EQUAL            : 
NULL                 : 
OR                   : 
PAR_DER              : 3 7 7 8 9 9 11 14 21
PAR_IZQ              : 3 7 7 8 9 9 11 14 21
PRINTLN              : 
PRODUCT              : 
READLINE             : 
RECUR                : 
REST                 : 
SORTEDMAP            : 15
STR                  : 21
STRING               : 13 13 14 14 20 21
SUM                  : 
TRUE                 : 22
VECTOR               : 11
WHEN                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

algoritmo            : 0
booleano             : 19
cadena               : 6
estructura           : 5
expresion            : 2 3
mapas                : 14
numero               : 17
valor                : 4 7 8 9 10 11 12
variable             : 1

Parsing method: LALR

state 0

    (0) S' -> . algoritmo
    (1) algoritmo -> . variable
    (2) algoritmo -> . expresion
    (3) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (4) expresion -> . valor
    (5) expresion -> . estructura
    (6) expresion -> . cadena
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (7) estructura -> . PAR_IZQ LISTA PAR_IZQ valor PAR_DER PAR_DER
    (8) estructura -> . COM_SIM PAR_IZQ valor PAR_DER
    (9) estructura -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER
    (10) estructura -> . HASH LLAV_IZQ valor LLAV_DER
    (11) estructura -> . PAR_IZQ VECTOR valor PAR_DER
    (12) estructura -> . COR_IZQ valor COR_DER
    (13) estructura -> . LLAV_IZQ STRING STRING LLAV_DER
    (14) estructura -> . PAR_IZQ mapas STRING STRING PAR_DER
    (20) cadena -> . STRING
    (21) cadena -> . PAR_IZQ STR STRING PAR_DER
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    PAR_IZQ         shift and go to state 4
    NOMBRE          shift and go to state 5
    COM_SIM         shift and go to state 11
    HASH            shift and go to state 12
    COR_IZQ         shift and go to state 14
    LLAV_IZQ        shift and go to state 13
    STRING          shift and go to state 15
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    algoritmo                      shift and go to state 1
    variable                       shift and go to state 2
    expresion                      shift and go to state 3
    valor                          shift and go to state 6
    estructura                     shift and go to state 7
    cadena                         shift and go to state 8
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 1

    (0) S' -> algoritmo .



state 2

    (1) algoritmo -> variable .

    $end            reduce using rule 1 (algoritmo -> variable .)


state 3

    (2) algoritmo -> expresion .

    $end            reduce using rule 2 (algoritmo -> expresion .)


state 4

    (3) variable -> PAR_IZQ . DEF NOMBRE expresion PAR_DER
    (7) estructura -> PAR_IZQ . LISTA PAR_IZQ valor PAR_DER PAR_DER
    (9) estructura -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER
    (11) estructura -> PAR_IZQ . VECTOR valor PAR_DER
    (14) estructura -> PAR_IZQ . mapas STRING STRING PAR_DER
    (21) cadena -> PAR_IZQ . STR STRING PAR_DER
    (15) mapas -> . SORTEDMAP
    (16) mapas -> . HASHMAP

    DEF             shift and go to state 20
    LISTA           shift and go to state 21
    CONJUNTO        shift and go to state 22
    VECTOR          shift and go to state 23
    STR             shift and go to state 25
    SORTEDMAP       shift and go to state 26
    HASHMAP         shift and go to state 27

    mapas                          shift and go to state 24

state 5

    (18) valor -> NOMBRE .

    $end            reduce using rule 18 (valor -> NOMBRE .)
    COR_DER         reduce using rule 18 (valor -> NOMBRE .)
    PAR_DER         reduce using rule 18 (valor -> NOMBRE .)
    LLAV_DER        reduce using rule 18 (valor -> NOMBRE .)


state 6

    (4) expresion -> valor .

    $end            reduce using rule 4 (expresion -> valor .)
    PAR_DER         reduce using rule 4 (expresion -> valor .)


state 7

    (5) expresion -> estructura .

    $end            reduce using rule 5 (expresion -> estructura .)
    PAR_DER         reduce using rule 5 (expresion -> estructura .)


state 8

    (6) expresion -> cadena .

    $end            reduce using rule 6 (expresion -> cadena .)
    PAR_DER         reduce using rule 6 (expresion -> cadena .)


state 9

    (17) valor -> numero .

    $end            reduce using rule 17 (valor -> numero .)
    COR_DER         reduce using rule 17 (valor -> numero .)
    PAR_DER         reduce using rule 17 (valor -> numero .)
    LLAV_DER        reduce using rule 17 (valor -> numero .)


state 10

    (19) valor -> booleano .

    $end            reduce using rule 19 (valor -> booleano .)
    COR_DER         reduce using rule 19 (valor -> booleano .)
    PAR_DER         reduce using rule 19 (valor -> booleano .)
    LLAV_DER        reduce using rule 19 (valor -> booleano .)


state 11

    (8) estructura -> COM_SIM . PAR_IZQ valor PAR_DER

    PAR_IZQ         shift and go to state 28


state 12

    (10) estructura -> HASH . LLAV_IZQ valor LLAV_DER

    LLAV_IZQ        shift and go to state 29


state 13

    (13) estructura -> LLAV_IZQ . STRING STRING LLAV_DER

    STRING          shift and go to state 30


state 14

    (12) estructura -> COR_IZQ . valor COR_DER
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    valor                          shift and go to state 31
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 15

    (20) cadena -> STRING .

    $end            reduce using rule 20 (cadena -> STRING .)
    PAR_DER         reduce using rule 20 (cadena -> STRING .)


state 16

    (24) numero -> ENTERO .

    $end            reduce using rule 24 (numero -> ENTERO .)
    COR_DER         reduce using rule 24 (numero -> ENTERO .)
    PAR_DER         reduce using rule 24 (numero -> ENTERO .)
    LLAV_DER        reduce using rule 24 (numero -> ENTERO .)


state 17

    (25) numero -> FLOTANTE .

    $end            reduce using rule 25 (numero -> FLOTANTE .)
    COR_DER         reduce using rule 25 (numero -> FLOTANTE .)
    PAR_DER         reduce using rule 25 (numero -> FLOTANTE .)
    LLAV_DER        reduce using rule 25 (numero -> FLOTANTE .)


state 18

    (22) booleano -> TRUE .

    $end            reduce using rule 22 (booleano -> TRUE .)
    COR_DER         reduce using rule 22 (booleano -> TRUE .)
    PAR_DER         reduce using rule 22 (booleano -> TRUE .)
    LLAV_DER        reduce using rule 22 (booleano -> TRUE .)


state 19

    (23) booleano -> FALSE .

    $end            reduce using rule 23 (booleano -> FALSE .)
    COR_DER         reduce using rule 23 (booleano -> FALSE .)
    PAR_DER         reduce using rule 23 (booleano -> FALSE .)
    LLAV_DER        reduce using rule 23 (booleano -> FALSE .)


state 20

    (3) variable -> PAR_IZQ DEF . NOMBRE expresion PAR_DER

    NOMBRE          shift and go to state 32


state 21

    (7) estructura -> PAR_IZQ LISTA . PAR_IZQ valor PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 33


state 22

    (9) estructura -> PAR_IZQ CONJUNTO . COM_SIM PAR_IZQ valor PAR_DER PAR_DER

    COM_SIM         shift and go to state 34


state 23

    (11) estructura -> PAR_IZQ VECTOR . valor PAR_DER
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    valor                          shift and go to state 35
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 24

    (14) estructura -> PAR_IZQ mapas . STRING STRING PAR_DER

    STRING          shift and go to state 36


state 25

    (21) cadena -> PAR_IZQ STR . STRING PAR_DER

    STRING          shift and go to state 37


state 26

    (15) mapas -> SORTEDMAP .

    STRING          reduce using rule 15 (mapas -> SORTEDMAP .)


state 27

    (16) mapas -> HASHMAP .

    STRING          reduce using rule 16 (mapas -> HASHMAP .)


state 28

    (8) estructura -> COM_SIM PAR_IZQ . valor PAR_DER
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    valor                          shift and go to state 38
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 29

    (10) estructura -> HASH LLAV_IZQ . valor LLAV_DER
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    valor                          shift and go to state 39
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 30

    (13) estructura -> LLAV_IZQ STRING . STRING LLAV_DER

    STRING          shift and go to state 40


state 31

    (12) estructura -> COR_IZQ valor . COR_DER

    COR_DER         shift and go to state 41


state 32

    (3) variable -> PAR_IZQ DEF NOMBRE . expresion PAR_DER
    (4) expresion -> . valor
    (5) expresion -> . estructura
    (6) expresion -> . cadena
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (7) estructura -> . PAR_IZQ LISTA PAR_IZQ valor PAR_DER PAR_DER
    (8) estructura -> . COM_SIM PAR_IZQ valor PAR_DER
    (9) estructura -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER
    (10) estructura -> . HASH LLAV_IZQ valor LLAV_DER
    (11) estructura -> . PAR_IZQ VECTOR valor PAR_DER
    (12) estructura -> . COR_IZQ valor COR_DER
    (13) estructura -> . LLAV_IZQ STRING STRING LLAV_DER
    (14) estructura -> . PAR_IZQ mapas STRING STRING PAR_DER
    (20) cadena -> . STRING
    (21) cadena -> . PAR_IZQ STR STRING PAR_DER
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    NOMBRE          shift and go to state 5
    PAR_IZQ         shift and go to state 42
    COM_SIM         shift and go to state 11
    HASH            shift and go to state 12
    COR_IZQ         shift and go to state 14
    LLAV_IZQ        shift and go to state 13
    STRING          shift and go to state 15
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    expresion                      shift and go to state 43
    valor                          shift and go to state 6
    estructura                     shift and go to state 7
    cadena                         shift and go to state 8
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 33

    (7) estructura -> PAR_IZQ LISTA PAR_IZQ . valor PAR_DER PAR_DER
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    valor                          shift and go to state 44
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 34

    (9) estructura -> PAR_IZQ CONJUNTO COM_SIM . PAR_IZQ valor PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 45


state 35

    (11) estructura -> PAR_IZQ VECTOR valor . PAR_DER

    PAR_DER         shift and go to state 46


state 36

    (14) estructura -> PAR_IZQ mapas STRING . STRING PAR_DER

    STRING          shift and go to state 47


state 37

    (21) cadena -> PAR_IZQ STR STRING . PAR_DER

    PAR_DER         shift and go to state 48


state 38

    (8) estructura -> COM_SIM PAR_IZQ valor . PAR_DER

    PAR_DER         shift and go to state 49


state 39

    (10) estructura -> HASH LLAV_IZQ valor . LLAV_DER

    LLAV_DER        shift and go to state 50


state 40

    (13) estructura -> LLAV_IZQ STRING STRING . LLAV_DER

    LLAV_DER        shift and go to state 51


state 41

    (12) estructura -> COR_IZQ valor COR_DER .

    $end            reduce using rule 12 (estructura -> COR_IZQ valor COR_DER .)
    PAR_DER         reduce using rule 12 (estructura -> COR_IZQ valor COR_DER .)


state 42

    (7) estructura -> PAR_IZQ . LISTA PAR_IZQ valor PAR_DER PAR_DER
    (9) estructura -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER
    (11) estructura -> PAR_IZQ . VECTOR valor PAR_DER
    (14) estructura -> PAR_IZQ . mapas STRING STRING PAR_DER
    (21) cadena -> PAR_IZQ . STR STRING PAR_DER
    (15) mapas -> . SORTEDMAP
    (16) mapas -> . HASHMAP

    LISTA           shift and go to state 21
    CONJUNTO        shift and go to state 22
    VECTOR          shift and go to state 23
    STR             shift and go to state 25
    SORTEDMAP       shift and go to state 26
    HASHMAP         shift and go to state 27

    mapas                          shift and go to state 24

state 43

    (3) variable -> PAR_IZQ DEF NOMBRE expresion . PAR_DER

    PAR_DER         shift and go to state 52


state 44

    (7) estructura -> PAR_IZQ LISTA PAR_IZQ valor . PAR_DER PAR_DER

    PAR_DER         shift and go to state 53


state 45

    (9) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ . valor PAR_DER PAR_DER
    (17) valor -> . numero
    (18) valor -> . NOMBRE
    (19) valor -> . booleano
    (24) numero -> . ENTERO
    (25) numero -> . FLOTANTE
    (22) booleano -> . TRUE
    (23) booleano -> . FALSE

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    valor                          shift and go to state 54
    numero                         shift and go to state 9
    booleano                       shift and go to state 10

state 46

    (11) estructura -> PAR_IZQ VECTOR valor PAR_DER .

    $end            reduce using rule 11 (estructura -> PAR_IZQ VECTOR valor PAR_DER .)
    PAR_DER         reduce using rule 11 (estructura -> PAR_IZQ VECTOR valor PAR_DER .)


state 47

    (14) estructura -> PAR_IZQ mapas STRING STRING . PAR_DER

    PAR_DER         shift and go to state 55


state 48

    (21) cadena -> PAR_IZQ STR STRING PAR_DER .

    $end            reduce using rule 21 (cadena -> PAR_IZQ STR STRING PAR_DER .)
    PAR_DER         reduce using rule 21 (cadena -> PAR_IZQ STR STRING PAR_DER .)


state 49

    (8) estructura -> COM_SIM PAR_IZQ valor PAR_DER .

    $end            reduce using rule 8 (estructura -> COM_SIM PAR_IZQ valor PAR_DER .)
    PAR_DER         reduce using rule 8 (estructura -> COM_SIM PAR_IZQ valor PAR_DER .)


state 50

    (10) estructura -> HASH LLAV_IZQ valor LLAV_DER .

    $end            reduce using rule 10 (estructura -> HASH LLAV_IZQ valor LLAV_DER .)
    PAR_DER         reduce using rule 10 (estructura -> HASH LLAV_IZQ valor LLAV_DER .)


state 51

    (13) estructura -> LLAV_IZQ STRING STRING LLAV_DER .

    $end            reduce using rule 13 (estructura -> LLAV_IZQ STRING STRING LLAV_DER .)
    PAR_DER         reduce using rule 13 (estructura -> LLAV_IZQ STRING STRING LLAV_DER .)


state 52

    (3) variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .

    $end            reduce using rule 3 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)


state 53

    (7) estructura -> PAR_IZQ LISTA PAR_IZQ valor PAR_DER . PAR_DER

    PAR_DER         shift and go to state 56


state 54

    (9) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor . PAR_DER PAR_DER

    PAR_DER         shift and go to state 57


state 55

    (14) estructura -> PAR_IZQ mapas STRING STRING PAR_DER .

    $end            reduce using rule 14 (estructura -> PAR_IZQ mapas STRING STRING PAR_DER .)
    PAR_DER         reduce using rule 14 (estructura -> PAR_IZQ mapas STRING STRING PAR_DER .)


state 56

    (7) estructura -> PAR_IZQ LISTA PAR_IZQ valor PAR_DER PAR_DER .

    $end            reduce using rule 7 (estructura -> PAR_IZQ LISTA PAR_IZQ valor PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 7 (estructura -> PAR_IZQ LISTA PAR_IZQ valor PAR_DER PAR_DER .)


state 57

    (9) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor PAR_DER . PAR_DER

    PAR_DER         shift and go to state 58


state 58

    (9) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER .

    $end            reduce using rule 9 (estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 9 (estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ valor PAR_DER PAR_DER .)

