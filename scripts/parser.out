Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    NULL
    DOSEQ
    READLINE
    CHAR

Grammar

Rule 0     S' -> sentencia_compuesta
Rule 1     sentencia_compuesta -> algoritmo
Rule 2     sentencia_compuesta -> algoritmo sentencia_compuesta
Rule 3     algoritmo -> variable
Rule 4     algoritmo -> expresion
Rule 5     algoritmo -> imprimir
Rule 6     algoritmo -> controlStructures
Rule 7     algoritmo -> funcion
Rule 8     algoritmo -> metodo_lista
Rule 9     algoritmo -> metodo_conjunto
Rule 10    algoritmo -> metodo_vector
Rule 11    algoritmo -> metodo_mapas
Rule 12    funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
Rule 13    argumentos -> COR_IZQ argumento COR_DER
Rule 14    argumentos -> COR_IZQ COR_DER
Rule 15    argumento -> NOMBRE
Rule 16    argumento -> NOMBRE argumento
Rule 17    metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER
Rule 18    metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER
Rule 19    metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
Rule 20    metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER
Rule 21    metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER
Rule 22    metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
Rule 23    metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER
Rule 24    metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER
Rule 25    metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
Rule 26    metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
Rule 27    metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER
Rule 28    metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER
Rule 29    metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER
Rule 30    metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER
Rule 31    metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER
Rule 32    metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
Rule 33    metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER
Rule 34    metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER
Rule 35    metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER
Rule 36    metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER
Rule 37    variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER
Rule 38    expresion -> valor
Rule 39    expresion -> estructura
Rule 40    expresion -> expresionAritmetica
Rule 41    expresion -> comparation
Rule 42    expresion -> comparationLogic
Rule 43    estructura -> estructura_mapa
Rule 44    estructura -> estructura_lista
Rule 45    estructura -> estructura_conjunto
Rule 46    estructura -> estructura_vector
Rule 47    controlStructures -> if
Rule 48    controlStructures -> while
Rule 49    controlStructures -> loop
Rule 50    loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
Rule 51    when -> PAR_IZQ WHEN comparation algoritmo recur PAR_DER
Rule 52    recur -> PAR_IZQ RECUR expresionAritmetica PAR_DER
Rule 53    while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
Rule 54    if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER
Rule 55    booleanExpresion -> FALSE
Rule 56    booleanExpresion -> TRUE
Rule 57    booleanExpresion -> comparationLogic
Rule 58    booleanExpresion -> comparation
Rule 59    imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER
Rule 60    comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER
Rule 61    comparationLogic -> PAR_IZQ NOT valor PAR_DER
Rule 62    comparation -> PAR_IZQ operadorCompare valor valor PAR_DER
Rule 63    expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER
Rule 64    numberSerie -> numero
Rule 65    numberSerie -> NOMBRE
Rule 66    numberSerie -> expresionAritmetica
Rule 67    numberSerie -> numero numberSerie
Rule 68    numberSerie -> NOMBRE numberSerie
Rule 69    numberSerie -> expresionAritmetica numberSerie
Rule 70    estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
Rule 71    estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER
Rule 72    estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER
Rule 73    estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
Rule 74    estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER
Rule 75    estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER
Rule 76    estructura_vector -> COR_IZQ compuesto COR_DER
Rule 77    estructura_mapa -> LLAV_IZQ parclaves LLAV_DER
Rule 78    estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER
Rule 79    mapas -> SORTEDMAP REST MAP
Rule 80    mapas -> HASHMAP REST MAP
Rule 81    compuesto -> valor
Rule 82    compuesto -> valor compuesto
Rule 83    parclaves -> STRING STRING
Rule 84    parclaves -> STRING STRING parclaves
Rule 85    valor -> numero
Rule 86    valor -> NOMBRE
Rule 87    valor -> booleano
Rule 88    valor -> cadena
Rule 89    cadena -> STRING
Rule 90    cadena -> PAR_IZQ STR STRING STRING PAR_DER
Rule 91    booleano -> TRUE
Rule 92    booleano -> FALSE
Rule 93    numero -> ENTERO
Rule 94    numero -> FLOTANTE
Rule 95    operadorMath -> SUM
Rule 96    operadorMath -> REST
Rule 97    operadorMath -> PRODUCT
Rule 98    operadorMath -> DIVISION
Rule 99    operadorCompare -> EQUAL
Rule 100   operadorCompare -> NOT_EQUAL
Rule 101   operadorCompare -> GREATER_THAN
Rule 102   operadorCompare -> LESS_THAN
Rule 103   operadorCompare -> GREATER_THAN_EQUAL
Rule 104   operadorCompare -> LESS_THAN_EQUAL
Rule 105   operadorLogic -> AND
Rule 106   operadorLogic -> OR
Rule 107   imprimirOptions -> PRINT
Rule 108   imprimirOptions -> PRINTLN

Terminals, with rules where they appear

AND                  : 105
CHAR                 : 
COM_SIM              : 71 73
CONJ                 : 27 30
CONJUNTO             : 73
CONS                 : 23 24
COR_DER              : 13 14 50 76
COR_IZQ              : 13 14 50 76
DEF                  : 37
DEFN                 : 12
DIVISION             : 98
DO                   : 53
DOSEQ                : 
ENTERO               : 20 21 26 29 93
EQUAL                : 99
FALSE                : 55 92
FIRST                : 17 18
FLOTANTE             : 94
GET                  : 25 26 28 29 31 32 33 34
GREATER_THAN         : 101
GREATER_THAN_EQUAL   : 103
HASH                 : 74
HASHMAP              : 80
IF                   : 54
KEYS                 : 35 36
LESS_THAN            : 102
LESS_THAN_EQUAL      : 104
LISTA                : 70 72
LLAV_DER             : 74 77
LLAV_IZQ             : 74 77
LOOP                 : 50
MAP                  : 79 80
NOMBRE               : 12 15 16 17 19 19 20 22 23 25 28 32 33 33 34 36 37 65 68 86
NOT                  : 61
NOT_EQUAL            : 100
NTH                  : 19 20 21 22
NULL                 : 
OR                   : 106
PAR_DER              : 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 50 51 52 53 53 54 59 60 61 62 63 70 70 71 72 73 73 75 78 90
PAR_IZQ              : 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 50 51 52 53 53 54 59 60 61 62 63 70 70 71 72 73 73 75 78 90
PRINT                : 107
PRINTLN              : 108
PRODUCT              : 97
READLINE             : 
RECUR                : 52
REST                 : 79 80 96
SORTEDMAP            : 79
STR                  : 90
STRING               : 31 34 83 83 84 84 89 90 90
SUM                  : 95
TRUE                 : 56 91
VECTOR               : 75
WHEN                 : 51
WHILE                : 53
error                : 

Nonterminals, with rules where they appear

algoritmo            : 1 2 51
argumento            : 13 16
argumentos           : 12
booleanExpresion     : 54
booleano             : 87
cadena               : 88
comparation          : 41 51 53 58
comparationLogic     : 42 57
compuesto            : 50 70 71 72 73 74 75 76 82
controlStructures    : 6
estructura           : 39
estructura_conjunto  : 25 26 27 45
estructura_lista     : 18 21 22 24 44
estructura_mapa      : 31 32 35 43
estructura_vector    : 28 29 30 46
expresion            : 4 37 59
expresionAritmetica  : 40 52 66 69
funcion              : 7
if                   : 47
imprimir             : 5
imprimirOptions      : 59
loop                 : 49
mapas                : 78
metodo_conjunto      : 9
metodo_lista         : 8
metodo_mapas         : 11
metodo_vector        : 10
numberSerie          : 63 67 68 69
numero               : 64 67 85
operadorCompare      : 62
operadorLogic        : 60
operadorMath         : 63
parclaves            : 77 78 84
recur                : 51
sentencia_compuesta  : 2 12 53 54 0
valor                : 23 24 27 30 38 60 60 61 62 62 81 82
variable             : 3
when                 : 50
while                : 48

Parsing method: LALR

state 0

    (0) S' -> . sentencia_compuesta
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . controlStructures
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (59) imprimir -> . PAR_IZQ imprimirOptions expresion PAR_DER
    (47) controlStructures -> . if
    (48) controlStructures -> . while
    (49) controlStructures -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (54) if -> . PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER
    (53) while -> . PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (50) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    sentencia_compuesta            shift and go to state 1
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    controlStructures              shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparation                    shift and go to state 17
    comparationLogic               shift and go to state 18
    if                             shift and go to state 19
    while                          shift and go to state 20
    loop                           shift and go to state 21
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25
    estructura_mapa                shift and go to state 26
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 1

    (0) S' -> sentencia_compuesta .



state 2

    (1) sentencia_compuesta -> algoritmo .
    (2) sentencia_compuesta -> algoritmo . sentencia_compuesta
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . controlStructures
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (59) imprimir -> . PAR_IZQ imprimirOptions expresion PAR_DER
    (47) controlStructures -> . if
    (48) controlStructures -> . while
    (49) controlStructures -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (54) if -> . PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER
    (53) while -> . PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (50) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    $end            reduce using rule 1 (sentencia_compuesta -> algoritmo .)
    PAR_DER         reduce using rule 1 (sentencia_compuesta -> algoritmo .)
    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    algoritmo                      shift and go to state 2
    sentencia_compuesta            shift and go to state 38
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    controlStructures              shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparation                    shift and go to state 17
    comparationLogic               shift and go to state 18
    if                             shift and go to state 19
    while                          shift and go to state 20
    loop                           shift and go to state 21
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25
    estructura_mapa                shift and go to state 26
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 3

    (3) algoritmo -> variable .

    PAR_IZQ         reduce using rule 3 (algoritmo -> variable .)
    NOMBRE          reduce using rule 3 (algoritmo -> variable .)
    ENTERO          reduce using rule 3 (algoritmo -> variable .)
    FLOTANTE        reduce using rule 3 (algoritmo -> variable .)
    TRUE            reduce using rule 3 (algoritmo -> variable .)
    FALSE           reduce using rule 3 (algoritmo -> variable .)
    STRING          reduce using rule 3 (algoritmo -> variable .)
    LLAV_IZQ        reduce using rule 3 (algoritmo -> variable .)
    COM_SIM         reduce using rule 3 (algoritmo -> variable .)
    HASH            reduce using rule 3 (algoritmo -> variable .)
    COR_IZQ         reduce using rule 3 (algoritmo -> variable .)
    $end            reduce using rule 3 (algoritmo -> variable .)
    PAR_DER         reduce using rule 3 (algoritmo -> variable .)


state 4

    (4) algoritmo -> expresion .

    PAR_IZQ         reduce using rule 4 (algoritmo -> expresion .)
    NOMBRE          reduce using rule 4 (algoritmo -> expresion .)
    ENTERO          reduce using rule 4 (algoritmo -> expresion .)
    FLOTANTE        reduce using rule 4 (algoritmo -> expresion .)
    TRUE            reduce using rule 4 (algoritmo -> expresion .)
    FALSE           reduce using rule 4 (algoritmo -> expresion .)
    STRING          reduce using rule 4 (algoritmo -> expresion .)
    LLAV_IZQ        reduce using rule 4 (algoritmo -> expresion .)
    COM_SIM         reduce using rule 4 (algoritmo -> expresion .)
    HASH            reduce using rule 4 (algoritmo -> expresion .)
    COR_IZQ         reduce using rule 4 (algoritmo -> expresion .)
    $end            reduce using rule 4 (algoritmo -> expresion .)
    PAR_DER         reduce using rule 4 (algoritmo -> expresion .)


state 5

    (5) algoritmo -> imprimir .

    PAR_IZQ         reduce using rule 5 (algoritmo -> imprimir .)
    NOMBRE          reduce using rule 5 (algoritmo -> imprimir .)
    ENTERO          reduce using rule 5 (algoritmo -> imprimir .)
    FLOTANTE        reduce using rule 5 (algoritmo -> imprimir .)
    TRUE            reduce using rule 5 (algoritmo -> imprimir .)
    FALSE           reduce using rule 5 (algoritmo -> imprimir .)
    STRING          reduce using rule 5 (algoritmo -> imprimir .)
    LLAV_IZQ        reduce using rule 5 (algoritmo -> imprimir .)
    COM_SIM         reduce using rule 5 (algoritmo -> imprimir .)
    HASH            reduce using rule 5 (algoritmo -> imprimir .)
    COR_IZQ         reduce using rule 5 (algoritmo -> imprimir .)
    $end            reduce using rule 5 (algoritmo -> imprimir .)
    PAR_DER         reduce using rule 5 (algoritmo -> imprimir .)


state 6

    (6) algoritmo -> controlStructures .

    PAR_IZQ         reduce using rule 6 (algoritmo -> controlStructures .)
    NOMBRE          reduce using rule 6 (algoritmo -> controlStructures .)
    ENTERO          reduce using rule 6 (algoritmo -> controlStructures .)
    FLOTANTE        reduce using rule 6 (algoritmo -> controlStructures .)
    TRUE            reduce using rule 6 (algoritmo -> controlStructures .)
    FALSE           reduce using rule 6 (algoritmo -> controlStructures .)
    STRING          reduce using rule 6 (algoritmo -> controlStructures .)
    LLAV_IZQ        reduce using rule 6 (algoritmo -> controlStructures .)
    COM_SIM         reduce using rule 6 (algoritmo -> controlStructures .)
    HASH            reduce using rule 6 (algoritmo -> controlStructures .)
    COR_IZQ         reduce using rule 6 (algoritmo -> controlStructures .)
    $end            reduce using rule 6 (algoritmo -> controlStructures .)
    PAR_DER         reduce using rule 6 (algoritmo -> controlStructures .)


state 7

    (7) algoritmo -> funcion .

    PAR_IZQ         reduce using rule 7 (algoritmo -> funcion .)
    NOMBRE          reduce using rule 7 (algoritmo -> funcion .)
    ENTERO          reduce using rule 7 (algoritmo -> funcion .)
    FLOTANTE        reduce using rule 7 (algoritmo -> funcion .)
    TRUE            reduce using rule 7 (algoritmo -> funcion .)
    FALSE           reduce using rule 7 (algoritmo -> funcion .)
    STRING          reduce using rule 7 (algoritmo -> funcion .)
    LLAV_IZQ        reduce using rule 7 (algoritmo -> funcion .)
    COM_SIM         reduce using rule 7 (algoritmo -> funcion .)
    HASH            reduce using rule 7 (algoritmo -> funcion .)
    COR_IZQ         reduce using rule 7 (algoritmo -> funcion .)
    $end            reduce using rule 7 (algoritmo -> funcion .)
    PAR_DER         reduce using rule 7 (algoritmo -> funcion .)


state 8

    (8) algoritmo -> metodo_lista .

    PAR_IZQ         reduce using rule 8 (algoritmo -> metodo_lista .)
    NOMBRE          reduce using rule 8 (algoritmo -> metodo_lista .)
    ENTERO          reduce using rule 8 (algoritmo -> metodo_lista .)
    FLOTANTE        reduce using rule 8 (algoritmo -> metodo_lista .)
    TRUE            reduce using rule 8 (algoritmo -> metodo_lista .)
    FALSE           reduce using rule 8 (algoritmo -> metodo_lista .)
    STRING          reduce using rule 8 (algoritmo -> metodo_lista .)
    LLAV_IZQ        reduce using rule 8 (algoritmo -> metodo_lista .)
    COM_SIM         reduce using rule 8 (algoritmo -> metodo_lista .)
    HASH            reduce using rule 8 (algoritmo -> metodo_lista .)
    COR_IZQ         reduce using rule 8 (algoritmo -> metodo_lista .)
    $end            reduce using rule 8 (algoritmo -> metodo_lista .)
    PAR_DER         reduce using rule 8 (algoritmo -> metodo_lista .)


state 9

    (9) algoritmo -> metodo_conjunto .

    PAR_IZQ         reduce using rule 9 (algoritmo -> metodo_conjunto .)
    NOMBRE          reduce using rule 9 (algoritmo -> metodo_conjunto .)
    ENTERO          reduce using rule 9 (algoritmo -> metodo_conjunto .)
    FLOTANTE        reduce using rule 9 (algoritmo -> metodo_conjunto .)
    TRUE            reduce using rule 9 (algoritmo -> metodo_conjunto .)
    FALSE           reduce using rule 9 (algoritmo -> metodo_conjunto .)
    STRING          reduce using rule 9 (algoritmo -> metodo_conjunto .)
    LLAV_IZQ        reduce using rule 9 (algoritmo -> metodo_conjunto .)
    COM_SIM         reduce using rule 9 (algoritmo -> metodo_conjunto .)
    HASH            reduce using rule 9 (algoritmo -> metodo_conjunto .)
    COR_IZQ         reduce using rule 9 (algoritmo -> metodo_conjunto .)
    $end            reduce using rule 9 (algoritmo -> metodo_conjunto .)
    PAR_DER         reduce using rule 9 (algoritmo -> metodo_conjunto .)


state 10

    (10) algoritmo -> metodo_vector .

    PAR_IZQ         reduce using rule 10 (algoritmo -> metodo_vector .)
    NOMBRE          reduce using rule 10 (algoritmo -> metodo_vector .)
    ENTERO          reduce using rule 10 (algoritmo -> metodo_vector .)
    FLOTANTE        reduce using rule 10 (algoritmo -> metodo_vector .)
    TRUE            reduce using rule 10 (algoritmo -> metodo_vector .)
    FALSE           reduce using rule 10 (algoritmo -> metodo_vector .)
    STRING          reduce using rule 10 (algoritmo -> metodo_vector .)
    LLAV_IZQ        reduce using rule 10 (algoritmo -> metodo_vector .)
    COM_SIM         reduce using rule 10 (algoritmo -> metodo_vector .)
    HASH            reduce using rule 10 (algoritmo -> metodo_vector .)
    COR_IZQ         reduce using rule 10 (algoritmo -> metodo_vector .)
    $end            reduce using rule 10 (algoritmo -> metodo_vector .)
    PAR_DER         reduce using rule 10 (algoritmo -> metodo_vector .)


state 11

    (11) algoritmo -> metodo_mapas .

    PAR_IZQ         reduce using rule 11 (algoritmo -> metodo_mapas .)
    NOMBRE          reduce using rule 11 (algoritmo -> metodo_mapas .)
    ENTERO          reduce using rule 11 (algoritmo -> metodo_mapas .)
    FLOTANTE        reduce using rule 11 (algoritmo -> metodo_mapas .)
    TRUE            reduce using rule 11 (algoritmo -> metodo_mapas .)
    FALSE           reduce using rule 11 (algoritmo -> metodo_mapas .)
    STRING          reduce using rule 11 (algoritmo -> metodo_mapas .)
    LLAV_IZQ        reduce using rule 11 (algoritmo -> metodo_mapas .)
    COM_SIM         reduce using rule 11 (algoritmo -> metodo_mapas .)
    HASH            reduce using rule 11 (algoritmo -> metodo_mapas .)
    COR_IZQ         reduce using rule 11 (algoritmo -> metodo_mapas .)
    $end            reduce using rule 11 (algoritmo -> metodo_mapas .)
    PAR_DER         reduce using rule 11 (algoritmo -> metodo_mapas .)


state 12

    (37) variable -> PAR_IZQ . DEF NOMBRE expresion PAR_DER
    (59) imprimir -> PAR_IZQ . imprimirOptions expresion PAR_DER
    (12) funcion -> PAR_IZQ . DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> PAR_IZQ . FIRST NOMBRE PAR_DER
    (18) metodo_lista -> PAR_IZQ . FIRST estructura_lista PAR_DER
    (19) metodo_lista -> PAR_IZQ . NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> PAR_IZQ . NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> PAR_IZQ . NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> PAR_IZQ . NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> PAR_IZQ . CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> PAR_IZQ . CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> PAR_IZQ . GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> PAR_IZQ . GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> PAR_IZQ . CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> PAR_IZQ . GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> PAR_IZQ . GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> PAR_IZQ . CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> PAR_IZQ . GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> PAR_IZQ . GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> PAR_IZQ . GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> PAR_IZQ . GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> PAR_IZQ . KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> PAR_IZQ . KEYS NOMBRE PAR_DER
    (63) expresionAritmetica -> PAR_IZQ . operadorMath numberSerie PAR_DER
    (62) comparation -> PAR_IZQ . operadorCompare valor valor PAR_DER
    (60) comparationLogic -> PAR_IZQ . operadorLogic valor valor PAR_DER
    (61) comparationLogic -> PAR_IZQ . NOT valor PAR_DER
    (54) if -> PAR_IZQ . IF booleanExpresion sentencia_compuesta PAR_DER
    (53) while -> PAR_IZQ . WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (50) loop -> PAR_IZQ . LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (90) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (78) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (70) estructura_lista -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (72) estructura_lista -> PAR_IZQ . LISTA compuesto PAR_DER
    (73) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (75) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER
    (107) imprimirOptions -> . PRINT
    (108) imprimirOptions -> . PRINTLN
    (95) operadorMath -> . SUM
    (96) operadorMath -> . REST
    (97) operadorMath -> . PRODUCT
    (98) operadorMath -> . DIVISION
    (99) operadorCompare -> . EQUAL
    (100) operadorCompare -> . NOT_EQUAL
    (101) operadorCompare -> . GREATER_THAN
    (102) operadorCompare -> . LESS_THAN
    (103) operadorCompare -> . GREATER_THAN_EQUAL
    (104) operadorCompare -> . LESS_THAN_EQUAL
    (105) operadorLogic -> . AND
    (106) operadorLogic -> . OR
    (79) mapas -> . SORTEDMAP REST MAP
    (80) mapas -> . HASHMAP REST MAP

    DEF             shift and go to state 39
    DEFN            shift and go to state 41
    FIRST           shift and go to state 42
    NTH             shift and go to state 43
    CONS            shift and go to state 44
    GET             shift and go to state 45
    CONJ            shift and go to state 46
    KEYS            shift and go to state 47
    NOT             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LOOP            shift and go to state 54
    STR             shift and go to state 55
    LISTA           shift and go to state 57
    CONJUNTO        shift and go to state 58
    VECTOR          shift and go to state 59
    PRINT           shift and go to state 60
    PRINTLN         shift and go to state 61
    SUM             shift and go to state 62
    REST            shift and go to state 63
    PRODUCT         shift and go to state 64
    DIVISION        shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN_EQUAL shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    SORTEDMAP       shift and go to state 74
    HASHMAP         shift and go to state 75

    imprimirOptions                shift and go to state 40
    operadorMath                   shift and go to state 48
    operadorCompare                shift and go to state 49
    operadorLogic                  shift and go to state 50
    mapas                          shift and go to state 56

state 13

    (86) valor -> NOMBRE .

    PAR_IZQ         reduce using rule 86 (valor -> NOMBRE .)
    NOMBRE          reduce using rule 86 (valor -> NOMBRE .)
    ENTERO          reduce using rule 86 (valor -> NOMBRE .)
    FLOTANTE        reduce using rule 86 (valor -> NOMBRE .)
    TRUE            reduce using rule 86 (valor -> NOMBRE .)
    FALSE           reduce using rule 86 (valor -> NOMBRE .)
    STRING          reduce using rule 86 (valor -> NOMBRE .)
    LLAV_IZQ        reduce using rule 86 (valor -> NOMBRE .)
    COM_SIM         reduce using rule 86 (valor -> NOMBRE .)
    HASH            reduce using rule 86 (valor -> NOMBRE .)
    COR_IZQ         reduce using rule 86 (valor -> NOMBRE .)
    $end            reduce using rule 86 (valor -> NOMBRE .)
    PAR_DER         reduce using rule 86 (valor -> NOMBRE .)
    COR_DER         reduce using rule 86 (valor -> NOMBRE .)
    LLAV_DER        reduce using rule 86 (valor -> NOMBRE .)


state 14

    (38) expresion -> valor .

    PAR_IZQ         reduce using rule 38 (expresion -> valor .)
    NOMBRE          reduce using rule 38 (expresion -> valor .)
    ENTERO          reduce using rule 38 (expresion -> valor .)
    FLOTANTE        reduce using rule 38 (expresion -> valor .)
    TRUE            reduce using rule 38 (expresion -> valor .)
    FALSE           reduce using rule 38 (expresion -> valor .)
    STRING          reduce using rule 38 (expresion -> valor .)
    LLAV_IZQ        reduce using rule 38 (expresion -> valor .)
    COM_SIM         reduce using rule 38 (expresion -> valor .)
    HASH            reduce using rule 38 (expresion -> valor .)
    COR_IZQ         reduce using rule 38 (expresion -> valor .)
    $end            reduce using rule 38 (expresion -> valor .)
    PAR_DER         reduce using rule 38 (expresion -> valor .)


state 15

    (39) expresion -> estructura .

    PAR_IZQ         reduce using rule 39 (expresion -> estructura .)
    NOMBRE          reduce using rule 39 (expresion -> estructura .)
    ENTERO          reduce using rule 39 (expresion -> estructura .)
    FLOTANTE        reduce using rule 39 (expresion -> estructura .)
    TRUE            reduce using rule 39 (expresion -> estructura .)
    FALSE           reduce using rule 39 (expresion -> estructura .)
    STRING          reduce using rule 39 (expresion -> estructura .)
    LLAV_IZQ        reduce using rule 39 (expresion -> estructura .)
    COM_SIM         reduce using rule 39 (expresion -> estructura .)
    HASH            reduce using rule 39 (expresion -> estructura .)
    COR_IZQ         reduce using rule 39 (expresion -> estructura .)
    $end            reduce using rule 39 (expresion -> estructura .)
    PAR_DER         reduce using rule 39 (expresion -> estructura .)


state 16

    (40) expresion -> expresionAritmetica .

    PAR_IZQ         reduce using rule 40 (expresion -> expresionAritmetica .)
    NOMBRE          reduce using rule 40 (expresion -> expresionAritmetica .)
    ENTERO          reduce using rule 40 (expresion -> expresionAritmetica .)
    FLOTANTE        reduce using rule 40 (expresion -> expresionAritmetica .)
    TRUE            reduce using rule 40 (expresion -> expresionAritmetica .)
    FALSE           reduce using rule 40 (expresion -> expresionAritmetica .)
    STRING          reduce using rule 40 (expresion -> expresionAritmetica .)
    LLAV_IZQ        reduce using rule 40 (expresion -> expresionAritmetica .)
    COM_SIM         reduce using rule 40 (expresion -> expresionAritmetica .)
    HASH            reduce using rule 40 (expresion -> expresionAritmetica .)
    COR_IZQ         reduce using rule 40 (expresion -> expresionAritmetica .)
    $end            reduce using rule 40 (expresion -> expresionAritmetica .)
    PAR_DER         reduce using rule 40 (expresion -> expresionAritmetica .)


state 17

    (41) expresion -> comparation .

    PAR_IZQ         reduce using rule 41 (expresion -> comparation .)
    NOMBRE          reduce using rule 41 (expresion -> comparation .)
    ENTERO          reduce using rule 41 (expresion -> comparation .)
    FLOTANTE        reduce using rule 41 (expresion -> comparation .)
    TRUE            reduce using rule 41 (expresion -> comparation .)
    FALSE           reduce using rule 41 (expresion -> comparation .)
    STRING          reduce using rule 41 (expresion -> comparation .)
    LLAV_IZQ        reduce using rule 41 (expresion -> comparation .)
    COM_SIM         reduce using rule 41 (expresion -> comparation .)
    HASH            reduce using rule 41 (expresion -> comparation .)
    COR_IZQ         reduce using rule 41 (expresion -> comparation .)
    $end            reduce using rule 41 (expresion -> comparation .)
    PAR_DER         reduce using rule 41 (expresion -> comparation .)


state 18

    (42) expresion -> comparationLogic .

    PAR_IZQ         reduce using rule 42 (expresion -> comparationLogic .)
    NOMBRE          reduce using rule 42 (expresion -> comparationLogic .)
    ENTERO          reduce using rule 42 (expresion -> comparationLogic .)
    FLOTANTE        reduce using rule 42 (expresion -> comparationLogic .)
    TRUE            reduce using rule 42 (expresion -> comparationLogic .)
    FALSE           reduce using rule 42 (expresion -> comparationLogic .)
    STRING          reduce using rule 42 (expresion -> comparationLogic .)
    LLAV_IZQ        reduce using rule 42 (expresion -> comparationLogic .)
    COM_SIM         reduce using rule 42 (expresion -> comparationLogic .)
    HASH            reduce using rule 42 (expresion -> comparationLogic .)
    COR_IZQ         reduce using rule 42 (expresion -> comparationLogic .)
    $end            reduce using rule 42 (expresion -> comparationLogic .)
    PAR_DER         reduce using rule 42 (expresion -> comparationLogic .)


state 19

    (47) controlStructures -> if .

    PAR_IZQ         reduce using rule 47 (controlStructures -> if .)
    NOMBRE          reduce using rule 47 (controlStructures -> if .)
    ENTERO          reduce using rule 47 (controlStructures -> if .)
    FLOTANTE        reduce using rule 47 (controlStructures -> if .)
    TRUE            reduce using rule 47 (controlStructures -> if .)
    FALSE           reduce using rule 47 (controlStructures -> if .)
    STRING          reduce using rule 47 (controlStructures -> if .)
    LLAV_IZQ        reduce using rule 47 (controlStructures -> if .)
    COM_SIM         reduce using rule 47 (controlStructures -> if .)
    HASH            reduce using rule 47 (controlStructures -> if .)
    COR_IZQ         reduce using rule 47 (controlStructures -> if .)
    $end            reduce using rule 47 (controlStructures -> if .)
    PAR_DER         reduce using rule 47 (controlStructures -> if .)


state 20

    (48) controlStructures -> while .

    PAR_IZQ         reduce using rule 48 (controlStructures -> while .)
    NOMBRE          reduce using rule 48 (controlStructures -> while .)
    ENTERO          reduce using rule 48 (controlStructures -> while .)
    FLOTANTE        reduce using rule 48 (controlStructures -> while .)
    TRUE            reduce using rule 48 (controlStructures -> while .)
    FALSE           reduce using rule 48 (controlStructures -> while .)
    STRING          reduce using rule 48 (controlStructures -> while .)
    LLAV_IZQ        reduce using rule 48 (controlStructures -> while .)
    COM_SIM         reduce using rule 48 (controlStructures -> while .)
    HASH            reduce using rule 48 (controlStructures -> while .)
    COR_IZQ         reduce using rule 48 (controlStructures -> while .)
    $end            reduce using rule 48 (controlStructures -> while .)
    PAR_DER         reduce using rule 48 (controlStructures -> while .)


state 21

    (49) controlStructures -> loop .

    PAR_IZQ         reduce using rule 49 (controlStructures -> loop .)
    NOMBRE          reduce using rule 49 (controlStructures -> loop .)
    ENTERO          reduce using rule 49 (controlStructures -> loop .)
    FLOTANTE        reduce using rule 49 (controlStructures -> loop .)
    TRUE            reduce using rule 49 (controlStructures -> loop .)
    FALSE           reduce using rule 49 (controlStructures -> loop .)
    STRING          reduce using rule 49 (controlStructures -> loop .)
    LLAV_IZQ        reduce using rule 49 (controlStructures -> loop .)
    COM_SIM         reduce using rule 49 (controlStructures -> loop .)
    HASH            reduce using rule 49 (controlStructures -> loop .)
    COR_IZQ         reduce using rule 49 (controlStructures -> loop .)
    $end            reduce using rule 49 (controlStructures -> loop .)
    PAR_DER         reduce using rule 49 (controlStructures -> loop .)


state 22

    (44) estructura -> estructura_lista .

    PAR_IZQ         reduce using rule 44 (estructura -> estructura_lista .)
    NOMBRE          reduce using rule 44 (estructura -> estructura_lista .)
    ENTERO          reduce using rule 44 (estructura -> estructura_lista .)
    FLOTANTE        reduce using rule 44 (estructura -> estructura_lista .)
    TRUE            reduce using rule 44 (estructura -> estructura_lista .)
    FALSE           reduce using rule 44 (estructura -> estructura_lista .)
    STRING          reduce using rule 44 (estructura -> estructura_lista .)
    LLAV_IZQ        reduce using rule 44 (estructura -> estructura_lista .)
    COM_SIM         reduce using rule 44 (estructura -> estructura_lista .)
    HASH            reduce using rule 44 (estructura -> estructura_lista .)
    COR_IZQ         reduce using rule 44 (estructura -> estructura_lista .)
    $end            reduce using rule 44 (estructura -> estructura_lista .)
    PAR_DER         reduce using rule 44 (estructura -> estructura_lista .)


state 23

    (93) numero -> ENTERO .

    PAR_IZQ         reduce using rule 93 (numero -> ENTERO .)
    NOMBRE          reduce using rule 93 (numero -> ENTERO .)
    ENTERO          reduce using rule 93 (numero -> ENTERO .)
    FLOTANTE        reduce using rule 93 (numero -> ENTERO .)
    TRUE            reduce using rule 93 (numero -> ENTERO .)
    FALSE           reduce using rule 93 (numero -> ENTERO .)
    STRING          reduce using rule 93 (numero -> ENTERO .)
    LLAV_IZQ        reduce using rule 93 (numero -> ENTERO .)
    COM_SIM         reduce using rule 93 (numero -> ENTERO .)
    HASH            reduce using rule 93 (numero -> ENTERO .)
    COR_IZQ         reduce using rule 93 (numero -> ENTERO .)
    $end            reduce using rule 93 (numero -> ENTERO .)
    PAR_DER         reduce using rule 93 (numero -> ENTERO .)
    COR_DER         reduce using rule 93 (numero -> ENTERO .)
    LLAV_DER        reduce using rule 93 (numero -> ENTERO .)


state 24

    (45) estructura -> estructura_conjunto .

    PAR_IZQ         reduce using rule 45 (estructura -> estructura_conjunto .)
    NOMBRE          reduce using rule 45 (estructura -> estructura_conjunto .)
    ENTERO          reduce using rule 45 (estructura -> estructura_conjunto .)
    FLOTANTE        reduce using rule 45 (estructura -> estructura_conjunto .)
    TRUE            reduce using rule 45 (estructura -> estructura_conjunto .)
    FALSE           reduce using rule 45 (estructura -> estructura_conjunto .)
    STRING          reduce using rule 45 (estructura -> estructura_conjunto .)
    LLAV_IZQ        reduce using rule 45 (estructura -> estructura_conjunto .)
    COM_SIM         reduce using rule 45 (estructura -> estructura_conjunto .)
    HASH            reduce using rule 45 (estructura -> estructura_conjunto .)
    COR_IZQ         reduce using rule 45 (estructura -> estructura_conjunto .)
    $end            reduce using rule 45 (estructura -> estructura_conjunto .)
    PAR_DER         reduce using rule 45 (estructura -> estructura_conjunto .)


state 25

    (46) estructura -> estructura_vector .

    PAR_IZQ         reduce using rule 46 (estructura -> estructura_vector .)
    NOMBRE          reduce using rule 46 (estructura -> estructura_vector .)
    ENTERO          reduce using rule 46 (estructura -> estructura_vector .)
    FLOTANTE        reduce using rule 46 (estructura -> estructura_vector .)
    TRUE            reduce using rule 46 (estructura -> estructura_vector .)
    FALSE           reduce using rule 46 (estructura -> estructura_vector .)
    STRING          reduce using rule 46 (estructura -> estructura_vector .)
    LLAV_IZQ        reduce using rule 46 (estructura -> estructura_vector .)
    COM_SIM         reduce using rule 46 (estructura -> estructura_vector .)
    HASH            reduce using rule 46 (estructura -> estructura_vector .)
    COR_IZQ         reduce using rule 46 (estructura -> estructura_vector .)
    $end            reduce using rule 46 (estructura -> estructura_vector .)
    PAR_DER         reduce using rule 46 (estructura -> estructura_vector .)


state 26

    (43) estructura -> estructura_mapa .

    PAR_IZQ         reduce using rule 43 (estructura -> estructura_mapa .)
    NOMBRE          reduce using rule 43 (estructura -> estructura_mapa .)
    ENTERO          reduce using rule 43 (estructura -> estructura_mapa .)
    FLOTANTE        reduce using rule 43 (estructura -> estructura_mapa .)
    TRUE            reduce using rule 43 (estructura -> estructura_mapa .)
    FALSE           reduce using rule 43 (estructura -> estructura_mapa .)
    STRING          reduce using rule 43 (estructura -> estructura_mapa .)
    LLAV_IZQ        reduce using rule 43 (estructura -> estructura_mapa .)
    COM_SIM         reduce using rule 43 (estructura -> estructura_mapa .)
    HASH            reduce using rule 43 (estructura -> estructura_mapa .)
    COR_IZQ         reduce using rule 43 (estructura -> estructura_mapa .)
    $end            reduce using rule 43 (estructura -> estructura_mapa .)
    PAR_DER         reduce using rule 43 (estructura -> estructura_mapa .)


state 27

    (89) cadena -> STRING .

    PAR_IZQ         reduce using rule 89 (cadena -> STRING .)
    NOMBRE          reduce using rule 89 (cadena -> STRING .)
    ENTERO          reduce using rule 89 (cadena -> STRING .)
    FLOTANTE        reduce using rule 89 (cadena -> STRING .)
    TRUE            reduce using rule 89 (cadena -> STRING .)
    FALSE           reduce using rule 89 (cadena -> STRING .)
    STRING          reduce using rule 89 (cadena -> STRING .)
    LLAV_IZQ        reduce using rule 89 (cadena -> STRING .)
    COM_SIM         reduce using rule 89 (cadena -> STRING .)
    HASH            reduce using rule 89 (cadena -> STRING .)
    COR_IZQ         reduce using rule 89 (cadena -> STRING .)
    $end            reduce using rule 89 (cadena -> STRING .)
    PAR_DER         reduce using rule 89 (cadena -> STRING .)
    COR_DER         reduce using rule 89 (cadena -> STRING .)
    LLAV_DER        reduce using rule 89 (cadena -> STRING .)


state 28

    (85) valor -> numero .

    PAR_IZQ         reduce using rule 85 (valor -> numero .)
    NOMBRE          reduce using rule 85 (valor -> numero .)
    ENTERO          reduce using rule 85 (valor -> numero .)
    FLOTANTE        reduce using rule 85 (valor -> numero .)
    TRUE            reduce using rule 85 (valor -> numero .)
    FALSE           reduce using rule 85 (valor -> numero .)
    STRING          reduce using rule 85 (valor -> numero .)
    LLAV_IZQ        reduce using rule 85 (valor -> numero .)
    COM_SIM         reduce using rule 85 (valor -> numero .)
    HASH            reduce using rule 85 (valor -> numero .)
    COR_IZQ         reduce using rule 85 (valor -> numero .)
    $end            reduce using rule 85 (valor -> numero .)
    PAR_DER         reduce using rule 85 (valor -> numero .)
    COR_DER         reduce using rule 85 (valor -> numero .)
    LLAV_DER        reduce using rule 85 (valor -> numero .)


state 29

    (87) valor -> booleano .

    PAR_IZQ         reduce using rule 87 (valor -> booleano .)
    NOMBRE          reduce using rule 87 (valor -> booleano .)
    ENTERO          reduce using rule 87 (valor -> booleano .)
    FLOTANTE        reduce using rule 87 (valor -> booleano .)
    TRUE            reduce using rule 87 (valor -> booleano .)
    FALSE           reduce using rule 87 (valor -> booleano .)
    STRING          reduce using rule 87 (valor -> booleano .)
    LLAV_IZQ        reduce using rule 87 (valor -> booleano .)
    COM_SIM         reduce using rule 87 (valor -> booleano .)
    HASH            reduce using rule 87 (valor -> booleano .)
    COR_IZQ         reduce using rule 87 (valor -> booleano .)
    $end            reduce using rule 87 (valor -> booleano .)
    PAR_DER         reduce using rule 87 (valor -> booleano .)
    COR_DER         reduce using rule 87 (valor -> booleano .)
    LLAV_DER        reduce using rule 87 (valor -> booleano .)


state 30

    (88) valor -> cadena .

    PAR_IZQ         reduce using rule 88 (valor -> cadena .)
    NOMBRE          reduce using rule 88 (valor -> cadena .)
    ENTERO          reduce using rule 88 (valor -> cadena .)
    FLOTANTE        reduce using rule 88 (valor -> cadena .)
    TRUE            reduce using rule 88 (valor -> cadena .)
    FALSE           reduce using rule 88 (valor -> cadena .)
    STRING          reduce using rule 88 (valor -> cadena .)
    LLAV_IZQ        reduce using rule 88 (valor -> cadena .)
    COM_SIM         reduce using rule 88 (valor -> cadena .)
    HASH            reduce using rule 88 (valor -> cadena .)
    COR_IZQ         reduce using rule 88 (valor -> cadena .)
    $end            reduce using rule 88 (valor -> cadena .)
    PAR_DER         reduce using rule 88 (valor -> cadena .)
    COR_DER         reduce using rule 88 (valor -> cadena .)
    LLAV_DER        reduce using rule 88 (valor -> cadena .)


state 31

    (76) estructura_vector -> COR_IZQ . compuesto COR_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    compuesto                      shift and go to state 76
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 32

    (94) numero -> FLOTANTE .

    PAR_IZQ         reduce using rule 94 (numero -> FLOTANTE .)
    NOMBRE          reduce using rule 94 (numero -> FLOTANTE .)
    ENTERO          reduce using rule 94 (numero -> FLOTANTE .)
    FLOTANTE        reduce using rule 94 (numero -> FLOTANTE .)
    TRUE            reduce using rule 94 (numero -> FLOTANTE .)
    FALSE           reduce using rule 94 (numero -> FLOTANTE .)
    STRING          reduce using rule 94 (numero -> FLOTANTE .)
    LLAV_IZQ        reduce using rule 94 (numero -> FLOTANTE .)
    COM_SIM         reduce using rule 94 (numero -> FLOTANTE .)
    HASH            reduce using rule 94 (numero -> FLOTANTE .)
    COR_IZQ         reduce using rule 94 (numero -> FLOTANTE .)
    $end            reduce using rule 94 (numero -> FLOTANTE .)
    PAR_DER         reduce using rule 94 (numero -> FLOTANTE .)
    COR_DER         reduce using rule 94 (numero -> FLOTANTE .)
    LLAV_DER        reduce using rule 94 (numero -> FLOTANTE .)


state 33

    (91) booleano -> TRUE .

    PAR_IZQ         reduce using rule 91 (booleano -> TRUE .)
    NOMBRE          reduce using rule 91 (booleano -> TRUE .)
    ENTERO          reduce using rule 91 (booleano -> TRUE .)
    FLOTANTE        reduce using rule 91 (booleano -> TRUE .)
    TRUE            reduce using rule 91 (booleano -> TRUE .)
    FALSE           reduce using rule 91 (booleano -> TRUE .)
    STRING          reduce using rule 91 (booleano -> TRUE .)
    LLAV_IZQ        reduce using rule 91 (booleano -> TRUE .)
    COM_SIM         reduce using rule 91 (booleano -> TRUE .)
    HASH            reduce using rule 91 (booleano -> TRUE .)
    COR_IZQ         reduce using rule 91 (booleano -> TRUE .)
    $end            reduce using rule 91 (booleano -> TRUE .)
    PAR_DER         reduce using rule 91 (booleano -> TRUE .)
    COR_DER         reduce using rule 91 (booleano -> TRUE .)
    LLAV_DER        reduce using rule 91 (booleano -> TRUE .)


state 34

    (92) booleano -> FALSE .

    PAR_IZQ         reduce using rule 92 (booleano -> FALSE .)
    NOMBRE          reduce using rule 92 (booleano -> FALSE .)
    ENTERO          reduce using rule 92 (booleano -> FALSE .)
    FLOTANTE        reduce using rule 92 (booleano -> FALSE .)
    TRUE            reduce using rule 92 (booleano -> FALSE .)
    FALSE           reduce using rule 92 (booleano -> FALSE .)
    STRING          reduce using rule 92 (booleano -> FALSE .)
    LLAV_IZQ        reduce using rule 92 (booleano -> FALSE .)
    COM_SIM         reduce using rule 92 (booleano -> FALSE .)
    HASH            reduce using rule 92 (booleano -> FALSE .)
    COR_IZQ         reduce using rule 92 (booleano -> FALSE .)
    $end            reduce using rule 92 (booleano -> FALSE .)
    PAR_DER         reduce using rule 92 (booleano -> FALSE .)
    COR_DER         reduce using rule 92 (booleano -> FALSE .)
    LLAV_DER        reduce using rule 92 (booleano -> FALSE .)


state 35

    (77) estructura_mapa -> LLAV_IZQ . parclaves LLAV_DER
    (83) parclaves -> . STRING STRING
    (84) parclaves -> . STRING STRING parclaves

    STRING          shift and go to state 80

    parclaves                      shift and go to state 79

state 36

    (71) estructura_lista -> COM_SIM . PAR_IZQ compuesto PAR_DER

    PAR_IZQ         shift and go to state 81


state 37

    (74) estructura_conjunto -> HASH . LLAV_IZQ compuesto LLAV_DER

    LLAV_IZQ        shift and go to state 82


state 38

    (2) sentencia_compuesta -> algoritmo sentencia_compuesta .

    $end            reduce using rule 2 (sentencia_compuesta -> algoritmo sentencia_compuesta .)
    PAR_DER         reduce using rule 2 (sentencia_compuesta -> algoritmo sentencia_compuesta .)


state 39

    (37) variable -> PAR_IZQ DEF . NOMBRE expresion PAR_DER

    NOMBRE          shift and go to state 83


state 40

    (59) imprimir -> PAR_IZQ imprimirOptions . expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    NOMBRE          shift and go to state 13
    PAR_IZQ         shift and go to state 84
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    expresion                      shift and go to state 85
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparation                    shift and go to state 17
    comparationLogic               shift and go to state 18
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30
    estructura_mapa                shift and go to state 26
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25

state 41

    (12) funcion -> PAR_IZQ DEFN . NOMBRE argumentos sentencia_compuesta PAR_DER

    NOMBRE          shift and go to state 86


state 42

    (17) metodo_lista -> PAR_IZQ FIRST . NOMBRE PAR_DER
    (18) metodo_lista -> PAR_IZQ FIRST . estructura_lista PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER

    NOMBRE          shift and go to state 88
    PAR_IZQ         shift and go to state 87
    COM_SIM         shift and go to state 36

    estructura_lista               shift and go to state 89

state 43

    (19) metodo_lista -> PAR_IZQ NTH . NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> PAR_IZQ NTH . NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> PAR_IZQ NTH . estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> PAR_IZQ NTH . estructura_lista NOMBRE PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER

    NOMBRE          shift and go to state 90
    PAR_IZQ         shift and go to state 87
    COM_SIM         shift and go to state 36

    estructura_lista               shift and go to state 91

state 44

    (23) metodo_lista -> PAR_IZQ CONS . valor NOMBRE PAR_DER
    (24) metodo_lista -> PAR_IZQ CONS . valor estructura_lista PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 92
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 45

    (25) metodo_conjunto -> PAR_IZQ GET . estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> PAR_IZQ GET . estructura_conjunto ENTERO PAR_DER
    (28) metodo_vector -> PAR_IZQ GET . estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> PAR_IZQ GET . estructura_vector ENTERO PAR_DER
    (31) metodo_mapas -> PAR_IZQ GET . estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> PAR_IZQ GET . estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> PAR_IZQ GET . NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> PAR_IZQ GET . NOMBRE STRING PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER

    NOMBRE          shift and go to state 95
    PAR_IZQ         shift and go to state 93
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31
    LLAV_IZQ        shift and go to state 35

    estructura_conjunto            shift and go to state 94
    estructura_vector              shift and go to state 96
    estructura_mapa                shift and go to state 97

state 46

    (27) metodo_conjunto -> PAR_IZQ CONJ . estructura_conjunto valor PAR_DER
    (30) metodo_vector -> PAR_IZQ CONJ . estructura_vector valor PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 98
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    estructura_conjunto            shift and go to state 99
    estructura_vector              shift and go to state 100

state 47

    (35) metodo_mapas -> PAR_IZQ KEYS . estructura_mapa PAR_DER
    (36) metodo_mapas -> PAR_IZQ KEYS . NOMBRE PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER

    NOMBRE          shift and go to state 103
    LLAV_IZQ        shift and go to state 35
    PAR_IZQ         shift and go to state 101

    estructura_mapa                shift and go to state 102

state 48

    (63) expresionAritmetica -> PAR_IZQ operadorMath . numberSerie PAR_DER
    (64) numberSerie -> . numero
    (65) numberSerie -> . NOMBRE
    (66) numberSerie -> . expresionAritmetica
    (67) numberSerie -> . numero numberSerie
    (68) numberSerie -> . NOMBRE numberSerie
    (69) numberSerie -> . expresionAritmetica numberSerie
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER

    NOMBRE          shift and go to state 107
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    PAR_IZQ         shift and go to state 104

    numberSerie                    shift and go to state 105
    numero                         shift and go to state 106
    expresionAritmetica            shift and go to state 108

state 49

    (62) comparation -> PAR_IZQ operadorCompare . valor valor PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 109
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 50

    (60) comparationLogic -> PAR_IZQ operadorLogic . valor valor PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 110
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 51

    (61) comparationLogic -> PAR_IZQ NOT . valor PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 111
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 52

    (54) if -> PAR_IZQ IF . booleanExpresion sentencia_compuesta PAR_DER
    (55) booleanExpresion -> . FALSE
    (56) booleanExpresion -> . TRUE
    (57) booleanExpresion -> . comparationLogic
    (58) booleanExpresion -> . comparation
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER

    FALSE           shift and go to state 114
    TRUE            shift and go to state 115
    PAR_IZQ         shift and go to state 112

    booleanExpresion               shift and go to state 113
    comparationLogic               shift and go to state 116
    comparation                    shift and go to state 117

state 53

    (53) while -> PAR_IZQ WHILE . comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER

    PAR_IZQ         shift and go to state 118

    comparation                    shift and go to state 119

state 54

    (50) loop -> PAR_IZQ LOOP . COR_IZQ compuesto COR_DER when PAR_DER

    COR_IZQ         shift and go to state 120


state 55

    (90) cadena -> PAR_IZQ STR . STRING STRING PAR_DER

    STRING          shift and go to state 121


state 56

    (78) estructura_mapa -> PAR_IZQ mapas . parclaves PAR_DER
    (83) parclaves -> . STRING STRING
    (84) parclaves -> . STRING STRING parclaves

    STRING          shift and go to state 80

    parclaves                      shift and go to state 122

state 57

    (70) estructura_lista -> PAR_IZQ LISTA . PAR_IZQ compuesto PAR_DER PAR_DER
    (72) estructura_lista -> PAR_IZQ LISTA . compuesto PAR_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    PAR_IZQ         shift and go to state 123
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27

    compuesto                      shift and go to state 124
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 58

    (73) estructura_conjunto -> PAR_IZQ CONJUNTO . COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER

    COM_SIM         shift and go to state 125


state 59

    (75) estructura_vector -> PAR_IZQ VECTOR . compuesto PAR_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    compuesto                      shift and go to state 126
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 60

    (107) imprimirOptions -> PRINT .

    NOMBRE          reduce using rule 107 (imprimirOptions -> PRINT .)
    PAR_IZQ         reduce using rule 107 (imprimirOptions -> PRINT .)
    ENTERO          reduce using rule 107 (imprimirOptions -> PRINT .)
    FLOTANTE        reduce using rule 107 (imprimirOptions -> PRINT .)
    TRUE            reduce using rule 107 (imprimirOptions -> PRINT .)
    FALSE           reduce using rule 107 (imprimirOptions -> PRINT .)
    STRING          reduce using rule 107 (imprimirOptions -> PRINT .)
    LLAV_IZQ        reduce using rule 107 (imprimirOptions -> PRINT .)
    COM_SIM         reduce using rule 107 (imprimirOptions -> PRINT .)
    HASH            reduce using rule 107 (imprimirOptions -> PRINT .)
    COR_IZQ         reduce using rule 107 (imprimirOptions -> PRINT .)


state 61

    (108) imprimirOptions -> PRINTLN .

    NOMBRE          reduce using rule 108 (imprimirOptions -> PRINTLN .)
    PAR_IZQ         reduce using rule 108 (imprimirOptions -> PRINTLN .)
    ENTERO          reduce using rule 108 (imprimirOptions -> PRINTLN .)
    FLOTANTE        reduce using rule 108 (imprimirOptions -> PRINTLN .)
    TRUE            reduce using rule 108 (imprimirOptions -> PRINTLN .)
    FALSE           reduce using rule 108 (imprimirOptions -> PRINTLN .)
    STRING          reduce using rule 108 (imprimirOptions -> PRINTLN .)
    LLAV_IZQ        reduce using rule 108 (imprimirOptions -> PRINTLN .)
    COM_SIM         reduce using rule 108 (imprimirOptions -> PRINTLN .)
    HASH            reduce using rule 108 (imprimirOptions -> PRINTLN .)
    COR_IZQ         reduce using rule 108 (imprimirOptions -> PRINTLN .)


state 62

    (95) operadorMath -> SUM .

    NOMBRE          reduce using rule 95 (operadorMath -> SUM .)
    ENTERO          reduce using rule 95 (operadorMath -> SUM .)
    FLOTANTE        reduce using rule 95 (operadorMath -> SUM .)
    PAR_IZQ         reduce using rule 95 (operadorMath -> SUM .)


state 63

    (96) operadorMath -> REST .

    NOMBRE          reduce using rule 96 (operadorMath -> REST .)
    ENTERO          reduce using rule 96 (operadorMath -> REST .)
    FLOTANTE        reduce using rule 96 (operadorMath -> REST .)
    PAR_IZQ         reduce using rule 96 (operadorMath -> REST .)


state 64

    (97) operadorMath -> PRODUCT .

    NOMBRE          reduce using rule 97 (operadorMath -> PRODUCT .)
    ENTERO          reduce using rule 97 (operadorMath -> PRODUCT .)
    FLOTANTE        reduce using rule 97 (operadorMath -> PRODUCT .)
    PAR_IZQ         reduce using rule 97 (operadorMath -> PRODUCT .)


state 65

    (98) operadorMath -> DIVISION .

    NOMBRE          reduce using rule 98 (operadorMath -> DIVISION .)
    ENTERO          reduce using rule 98 (operadorMath -> DIVISION .)
    FLOTANTE        reduce using rule 98 (operadorMath -> DIVISION .)
    PAR_IZQ         reduce using rule 98 (operadorMath -> DIVISION .)


state 66

    (99) operadorCompare -> EQUAL .

    NOMBRE          reduce using rule 99 (operadorCompare -> EQUAL .)
    ENTERO          reduce using rule 99 (operadorCompare -> EQUAL .)
    FLOTANTE        reduce using rule 99 (operadorCompare -> EQUAL .)
    TRUE            reduce using rule 99 (operadorCompare -> EQUAL .)
    FALSE           reduce using rule 99 (operadorCompare -> EQUAL .)
    STRING          reduce using rule 99 (operadorCompare -> EQUAL .)
    PAR_IZQ         reduce using rule 99 (operadorCompare -> EQUAL .)


state 67

    (100) operadorCompare -> NOT_EQUAL .

    NOMBRE          reduce using rule 100 (operadorCompare -> NOT_EQUAL .)
    ENTERO          reduce using rule 100 (operadorCompare -> NOT_EQUAL .)
    FLOTANTE        reduce using rule 100 (operadorCompare -> NOT_EQUAL .)
    TRUE            reduce using rule 100 (operadorCompare -> NOT_EQUAL .)
    FALSE           reduce using rule 100 (operadorCompare -> NOT_EQUAL .)
    STRING          reduce using rule 100 (operadorCompare -> NOT_EQUAL .)
    PAR_IZQ         reduce using rule 100 (operadorCompare -> NOT_EQUAL .)


state 68

    (101) operadorCompare -> GREATER_THAN .

    NOMBRE          reduce using rule 101 (operadorCompare -> GREATER_THAN .)
    ENTERO          reduce using rule 101 (operadorCompare -> GREATER_THAN .)
    FLOTANTE        reduce using rule 101 (operadorCompare -> GREATER_THAN .)
    TRUE            reduce using rule 101 (operadorCompare -> GREATER_THAN .)
    FALSE           reduce using rule 101 (operadorCompare -> GREATER_THAN .)
    STRING          reduce using rule 101 (operadorCompare -> GREATER_THAN .)
    PAR_IZQ         reduce using rule 101 (operadorCompare -> GREATER_THAN .)


state 69

    (102) operadorCompare -> LESS_THAN .

    NOMBRE          reduce using rule 102 (operadorCompare -> LESS_THAN .)
    ENTERO          reduce using rule 102 (operadorCompare -> LESS_THAN .)
    FLOTANTE        reduce using rule 102 (operadorCompare -> LESS_THAN .)
    TRUE            reduce using rule 102 (operadorCompare -> LESS_THAN .)
    FALSE           reduce using rule 102 (operadorCompare -> LESS_THAN .)
    STRING          reduce using rule 102 (operadorCompare -> LESS_THAN .)
    PAR_IZQ         reduce using rule 102 (operadorCompare -> LESS_THAN .)


state 70

    (103) operadorCompare -> GREATER_THAN_EQUAL .

    NOMBRE          reduce using rule 103 (operadorCompare -> GREATER_THAN_EQUAL .)
    ENTERO          reduce using rule 103 (operadorCompare -> GREATER_THAN_EQUAL .)
    FLOTANTE        reduce using rule 103 (operadorCompare -> GREATER_THAN_EQUAL .)
    TRUE            reduce using rule 103 (operadorCompare -> GREATER_THAN_EQUAL .)
    FALSE           reduce using rule 103 (operadorCompare -> GREATER_THAN_EQUAL .)
    STRING          reduce using rule 103 (operadorCompare -> GREATER_THAN_EQUAL .)
    PAR_IZQ         reduce using rule 103 (operadorCompare -> GREATER_THAN_EQUAL .)


state 71

    (104) operadorCompare -> LESS_THAN_EQUAL .

    NOMBRE          reduce using rule 104 (operadorCompare -> LESS_THAN_EQUAL .)
    ENTERO          reduce using rule 104 (operadorCompare -> LESS_THAN_EQUAL .)
    FLOTANTE        reduce using rule 104 (operadorCompare -> LESS_THAN_EQUAL .)
    TRUE            reduce using rule 104 (operadorCompare -> LESS_THAN_EQUAL .)
    FALSE           reduce using rule 104 (operadorCompare -> LESS_THAN_EQUAL .)
    STRING          reduce using rule 104 (operadorCompare -> LESS_THAN_EQUAL .)
    PAR_IZQ         reduce using rule 104 (operadorCompare -> LESS_THAN_EQUAL .)


state 72

    (105) operadorLogic -> AND .

    NOMBRE          reduce using rule 105 (operadorLogic -> AND .)
    ENTERO          reduce using rule 105 (operadorLogic -> AND .)
    FLOTANTE        reduce using rule 105 (operadorLogic -> AND .)
    TRUE            reduce using rule 105 (operadorLogic -> AND .)
    FALSE           reduce using rule 105 (operadorLogic -> AND .)
    STRING          reduce using rule 105 (operadorLogic -> AND .)
    PAR_IZQ         reduce using rule 105 (operadorLogic -> AND .)


state 73

    (106) operadorLogic -> OR .

    NOMBRE          reduce using rule 106 (operadorLogic -> OR .)
    ENTERO          reduce using rule 106 (operadorLogic -> OR .)
    FLOTANTE        reduce using rule 106 (operadorLogic -> OR .)
    TRUE            reduce using rule 106 (operadorLogic -> OR .)
    FALSE           reduce using rule 106 (operadorLogic -> OR .)
    STRING          reduce using rule 106 (operadorLogic -> OR .)
    PAR_IZQ         reduce using rule 106 (operadorLogic -> OR .)


state 74

    (79) mapas -> SORTEDMAP . REST MAP

    REST            shift and go to state 127


state 75

    (80) mapas -> HASHMAP . REST MAP

    REST            shift and go to state 128


state 76

    (76) estructura_vector -> COR_IZQ compuesto . COR_DER

    COR_DER         shift and go to state 129


state 77

    (81) compuesto -> valor .
    (82) compuesto -> valor . compuesto
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    COR_DER         reduce using rule 81 (compuesto -> valor .)
    PAR_DER         reduce using rule 81 (compuesto -> valor .)
    LLAV_DER        reduce using rule 81 (compuesto -> valor .)
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 77
    compuesto                      shift and go to state 130
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 78

    (90) cadena -> PAR_IZQ . STR STRING STRING PAR_DER

    STR             shift and go to state 55


state 79

    (77) estructura_mapa -> LLAV_IZQ parclaves . LLAV_DER

    LLAV_DER        shift and go to state 131


state 80

    (83) parclaves -> STRING . STRING
    (84) parclaves -> STRING . STRING parclaves

    STRING          shift and go to state 132


state 81

    (71) estructura_lista -> COM_SIM PAR_IZQ . compuesto PAR_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    compuesto                      shift and go to state 133
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 82

    (74) estructura_conjunto -> HASH LLAV_IZQ . compuesto LLAV_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    compuesto                      shift and go to state 134
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 83

    (37) variable -> PAR_IZQ DEF NOMBRE . expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    NOMBRE          shift and go to state 13
    PAR_IZQ         shift and go to state 84
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    expresion                      shift and go to state 135
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparation                    shift and go to state 17
    comparationLogic               shift and go to state 18
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30
    estructura_mapa                shift and go to state 26
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25

state 84

    (63) expresionAritmetica -> PAR_IZQ . operadorMath numberSerie PAR_DER
    (62) comparation -> PAR_IZQ . operadorCompare valor valor PAR_DER
    (60) comparationLogic -> PAR_IZQ . operadorLogic valor valor PAR_DER
    (61) comparationLogic -> PAR_IZQ . NOT valor PAR_DER
    (90) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (78) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (70) estructura_lista -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (72) estructura_lista -> PAR_IZQ . LISTA compuesto PAR_DER
    (73) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (75) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER
    (95) operadorMath -> . SUM
    (96) operadorMath -> . REST
    (97) operadorMath -> . PRODUCT
    (98) operadorMath -> . DIVISION
    (99) operadorCompare -> . EQUAL
    (100) operadorCompare -> . NOT_EQUAL
    (101) operadorCompare -> . GREATER_THAN
    (102) operadorCompare -> . LESS_THAN
    (103) operadorCompare -> . GREATER_THAN_EQUAL
    (104) operadorCompare -> . LESS_THAN_EQUAL
    (105) operadorLogic -> . AND
    (106) operadorLogic -> . OR
    (79) mapas -> . SORTEDMAP REST MAP
    (80) mapas -> . HASHMAP REST MAP

    NOT             shift and go to state 51
    STR             shift and go to state 55
    LISTA           shift and go to state 57
    CONJUNTO        shift and go to state 58
    VECTOR          shift and go to state 59
    SUM             shift and go to state 62
    REST            shift and go to state 63
    PRODUCT         shift and go to state 64
    DIVISION        shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN_EQUAL shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    SORTEDMAP       shift and go to state 74
    HASHMAP         shift and go to state 75

    operadorMath                   shift and go to state 48
    operadorCompare                shift and go to state 49
    operadorLogic                  shift and go to state 50
    mapas                          shift and go to state 56

state 85

    (59) imprimir -> PAR_IZQ imprimirOptions expresion . PAR_DER

    PAR_DER         shift and go to state 136


state 86

    (12) funcion -> PAR_IZQ DEFN NOMBRE . argumentos sentencia_compuesta PAR_DER
    (13) argumentos -> . COR_IZQ argumento COR_DER
    (14) argumentos -> . COR_IZQ COR_DER

    COR_IZQ         shift and go to state 138

    argumentos                     shift and go to state 137

state 87

    (70) estructura_lista -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (72) estructura_lista -> PAR_IZQ . LISTA compuesto PAR_DER

    LISTA           shift and go to state 57


state 88

    (17) metodo_lista -> PAR_IZQ FIRST NOMBRE . PAR_DER

    PAR_DER         shift and go to state 139


state 89

    (18) metodo_lista -> PAR_IZQ FIRST estructura_lista . PAR_DER

    PAR_DER         shift and go to state 140


state 90

    (19) metodo_lista -> PAR_IZQ NTH NOMBRE . NOMBRE PAR_DER
    (20) metodo_lista -> PAR_IZQ NTH NOMBRE . ENTERO PAR_DER

    NOMBRE          shift and go to state 141
    ENTERO          shift and go to state 142


state 91

    (21) metodo_lista -> PAR_IZQ NTH estructura_lista . ENTERO PAR_DER
    (22) metodo_lista -> PAR_IZQ NTH estructura_lista . NOMBRE PAR_DER

    ENTERO          shift and go to state 143
    NOMBRE          shift and go to state 144


state 92

    (23) metodo_lista -> PAR_IZQ CONS valor . NOMBRE PAR_DER
    (24) metodo_lista -> PAR_IZQ CONS valor . estructura_lista PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER

    NOMBRE          shift and go to state 145
    PAR_IZQ         shift and go to state 87
    COM_SIM         shift and go to state 36

    estructura_lista               shift and go to state 146

state 93

    (73) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (75) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER
    (78) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (79) mapas -> . SORTEDMAP REST MAP
    (80) mapas -> . HASHMAP REST MAP

    CONJUNTO        shift and go to state 58
    VECTOR          shift and go to state 59
    SORTEDMAP       shift and go to state 74
    HASHMAP         shift and go to state 75

    mapas                          shift and go to state 56

state 94

    (25) metodo_conjunto -> PAR_IZQ GET estructura_conjunto . NOMBRE PAR_DER
    (26) metodo_conjunto -> PAR_IZQ GET estructura_conjunto . ENTERO PAR_DER

    NOMBRE          shift and go to state 147
    ENTERO          shift and go to state 148


state 95

    (33) metodo_mapas -> PAR_IZQ GET NOMBRE . NOMBRE PAR_DER
    (34) metodo_mapas -> PAR_IZQ GET NOMBRE . STRING PAR_DER

    NOMBRE          shift and go to state 149
    STRING          shift and go to state 150


state 96

    (28) metodo_vector -> PAR_IZQ GET estructura_vector . NOMBRE PAR_DER
    (29) metodo_vector -> PAR_IZQ GET estructura_vector . ENTERO PAR_DER

    NOMBRE          shift and go to state 151
    ENTERO          shift and go to state 152


state 97

    (31) metodo_mapas -> PAR_IZQ GET estructura_mapa . STRING PAR_DER
    (32) metodo_mapas -> PAR_IZQ GET estructura_mapa . NOMBRE PAR_DER

    STRING          shift and go to state 153
    NOMBRE          shift and go to state 154


state 98

    (73) estructura_conjunto -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (75) estructura_vector -> PAR_IZQ . VECTOR compuesto PAR_DER

    CONJUNTO        shift and go to state 58
    VECTOR          shift and go to state 59


state 99

    (27) metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto . valor PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 155
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 100

    (30) metodo_vector -> PAR_IZQ CONJ estructura_vector . valor PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 156
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 101

    (78) estructura_mapa -> PAR_IZQ . mapas parclaves PAR_DER
    (79) mapas -> . SORTEDMAP REST MAP
    (80) mapas -> . HASHMAP REST MAP

    SORTEDMAP       shift and go to state 74
    HASHMAP         shift and go to state 75

    mapas                          shift and go to state 56

state 102

    (35) metodo_mapas -> PAR_IZQ KEYS estructura_mapa . PAR_DER

    PAR_DER         shift and go to state 157


state 103

    (36) metodo_mapas -> PAR_IZQ KEYS NOMBRE . PAR_DER

    PAR_DER         shift and go to state 158


state 104

    (63) expresionAritmetica -> PAR_IZQ . operadorMath numberSerie PAR_DER
    (95) operadorMath -> . SUM
    (96) operadorMath -> . REST
    (97) operadorMath -> . PRODUCT
    (98) operadorMath -> . DIVISION

    SUM             shift and go to state 62
    REST            shift and go to state 63
    PRODUCT         shift and go to state 64
    DIVISION        shift and go to state 65

    operadorMath                   shift and go to state 48

state 105

    (63) expresionAritmetica -> PAR_IZQ operadorMath numberSerie . PAR_DER

    PAR_DER         shift and go to state 159


state 106

    (64) numberSerie -> numero .
    (67) numberSerie -> numero . numberSerie
    (64) numberSerie -> . numero
    (65) numberSerie -> . NOMBRE
    (66) numberSerie -> . expresionAritmetica
    (67) numberSerie -> . numero numberSerie
    (68) numberSerie -> . NOMBRE numberSerie
    (69) numberSerie -> . expresionAritmetica numberSerie
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER

    PAR_DER         reduce using rule 64 (numberSerie -> numero .)
    NOMBRE          shift and go to state 107
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    PAR_IZQ         shift and go to state 104

    numero                         shift and go to state 106
    numberSerie                    shift and go to state 160
    expresionAritmetica            shift and go to state 108

state 107

    (65) numberSerie -> NOMBRE .
    (68) numberSerie -> NOMBRE . numberSerie
    (64) numberSerie -> . numero
    (65) numberSerie -> . NOMBRE
    (66) numberSerie -> . expresionAritmetica
    (67) numberSerie -> . numero numberSerie
    (68) numberSerie -> . NOMBRE numberSerie
    (69) numberSerie -> . expresionAritmetica numberSerie
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER

    PAR_DER         reduce using rule 65 (numberSerie -> NOMBRE .)
    NOMBRE          shift and go to state 107
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    PAR_IZQ         shift and go to state 104

    numberSerie                    shift and go to state 161
    numero                         shift and go to state 106
    expresionAritmetica            shift and go to state 108

state 108

    (66) numberSerie -> expresionAritmetica .
    (69) numberSerie -> expresionAritmetica . numberSerie
    (64) numberSerie -> . numero
    (65) numberSerie -> . NOMBRE
    (66) numberSerie -> . expresionAritmetica
    (67) numberSerie -> . numero numberSerie
    (68) numberSerie -> . NOMBRE numberSerie
    (69) numberSerie -> . expresionAritmetica numberSerie
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER

    PAR_DER         reduce using rule 66 (numberSerie -> expresionAritmetica .)
    NOMBRE          shift and go to state 107
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    PAR_IZQ         shift and go to state 104

    expresionAritmetica            shift and go to state 108
    numberSerie                    shift and go to state 162
    numero                         shift and go to state 106

state 109

    (62) comparation -> PAR_IZQ operadorCompare valor . valor PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 163
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 110

    (60) comparationLogic -> PAR_IZQ operadorLogic valor . valor PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    valor                          shift and go to state 164
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 111

    (61) comparationLogic -> PAR_IZQ NOT valor . PAR_DER

    PAR_DER         shift and go to state 165


state 112

    (60) comparationLogic -> PAR_IZQ . operadorLogic valor valor PAR_DER
    (61) comparationLogic -> PAR_IZQ . NOT valor PAR_DER
    (62) comparation -> PAR_IZQ . operadorCompare valor valor PAR_DER
    (105) operadorLogic -> . AND
    (106) operadorLogic -> . OR
    (99) operadorCompare -> . EQUAL
    (100) operadorCompare -> . NOT_EQUAL
    (101) operadorCompare -> . GREATER_THAN
    (102) operadorCompare -> . LESS_THAN
    (103) operadorCompare -> . GREATER_THAN_EQUAL
    (104) operadorCompare -> . LESS_THAN_EQUAL

    NOT             shift and go to state 51
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN_EQUAL shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

    operadorLogic                  shift and go to state 50
    operadorCompare                shift and go to state 49

state 113

    (54) if -> PAR_IZQ IF booleanExpresion . sentencia_compuesta PAR_DER
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . controlStructures
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (59) imprimir -> . PAR_IZQ imprimirOptions expresion PAR_DER
    (47) controlStructures -> . if
    (48) controlStructures -> . while
    (49) controlStructures -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (54) if -> . PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER
    (53) while -> . PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (50) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    sentencia_compuesta            shift and go to state 166
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    controlStructures              shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparation                    shift and go to state 17
    comparationLogic               shift and go to state 18
    if                             shift and go to state 19
    while                          shift and go to state 20
    loop                           shift and go to state 21
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25
    estructura_mapa                shift and go to state 26
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 114

    (55) booleanExpresion -> FALSE .

    PAR_IZQ         reduce using rule 55 (booleanExpresion -> FALSE .)
    NOMBRE          reduce using rule 55 (booleanExpresion -> FALSE .)
    ENTERO          reduce using rule 55 (booleanExpresion -> FALSE .)
    FLOTANTE        reduce using rule 55 (booleanExpresion -> FALSE .)
    TRUE            reduce using rule 55 (booleanExpresion -> FALSE .)
    FALSE           reduce using rule 55 (booleanExpresion -> FALSE .)
    STRING          reduce using rule 55 (booleanExpresion -> FALSE .)
    LLAV_IZQ        reduce using rule 55 (booleanExpresion -> FALSE .)
    COM_SIM         reduce using rule 55 (booleanExpresion -> FALSE .)
    HASH            reduce using rule 55 (booleanExpresion -> FALSE .)
    COR_IZQ         reduce using rule 55 (booleanExpresion -> FALSE .)


state 115

    (56) booleanExpresion -> TRUE .

    PAR_IZQ         reduce using rule 56 (booleanExpresion -> TRUE .)
    NOMBRE          reduce using rule 56 (booleanExpresion -> TRUE .)
    ENTERO          reduce using rule 56 (booleanExpresion -> TRUE .)
    FLOTANTE        reduce using rule 56 (booleanExpresion -> TRUE .)
    TRUE            reduce using rule 56 (booleanExpresion -> TRUE .)
    FALSE           reduce using rule 56 (booleanExpresion -> TRUE .)
    STRING          reduce using rule 56 (booleanExpresion -> TRUE .)
    LLAV_IZQ        reduce using rule 56 (booleanExpresion -> TRUE .)
    COM_SIM         reduce using rule 56 (booleanExpresion -> TRUE .)
    HASH            reduce using rule 56 (booleanExpresion -> TRUE .)
    COR_IZQ         reduce using rule 56 (booleanExpresion -> TRUE .)


state 116

    (57) booleanExpresion -> comparationLogic .

    PAR_IZQ         reduce using rule 57 (booleanExpresion -> comparationLogic .)
    NOMBRE          reduce using rule 57 (booleanExpresion -> comparationLogic .)
    ENTERO          reduce using rule 57 (booleanExpresion -> comparationLogic .)
    FLOTANTE        reduce using rule 57 (booleanExpresion -> comparationLogic .)
    TRUE            reduce using rule 57 (booleanExpresion -> comparationLogic .)
    FALSE           reduce using rule 57 (booleanExpresion -> comparationLogic .)
    STRING          reduce using rule 57 (booleanExpresion -> comparationLogic .)
    LLAV_IZQ        reduce using rule 57 (booleanExpresion -> comparationLogic .)
    COM_SIM         reduce using rule 57 (booleanExpresion -> comparationLogic .)
    HASH            reduce using rule 57 (booleanExpresion -> comparationLogic .)
    COR_IZQ         reduce using rule 57 (booleanExpresion -> comparationLogic .)


state 117

    (58) booleanExpresion -> comparation .

    PAR_IZQ         reduce using rule 58 (booleanExpresion -> comparation .)
    NOMBRE          reduce using rule 58 (booleanExpresion -> comparation .)
    ENTERO          reduce using rule 58 (booleanExpresion -> comparation .)
    FLOTANTE        reduce using rule 58 (booleanExpresion -> comparation .)
    TRUE            reduce using rule 58 (booleanExpresion -> comparation .)
    FALSE           reduce using rule 58 (booleanExpresion -> comparation .)
    STRING          reduce using rule 58 (booleanExpresion -> comparation .)
    LLAV_IZQ        reduce using rule 58 (booleanExpresion -> comparation .)
    COM_SIM         reduce using rule 58 (booleanExpresion -> comparation .)
    HASH            reduce using rule 58 (booleanExpresion -> comparation .)
    COR_IZQ         reduce using rule 58 (booleanExpresion -> comparation .)


state 118

    (62) comparation -> PAR_IZQ . operadorCompare valor valor PAR_DER
    (99) operadorCompare -> . EQUAL
    (100) operadorCompare -> . NOT_EQUAL
    (101) operadorCompare -> . GREATER_THAN
    (102) operadorCompare -> . LESS_THAN
    (103) operadorCompare -> . GREATER_THAN_EQUAL
    (104) operadorCompare -> . LESS_THAN_EQUAL

    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN_EQUAL shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

    operadorCompare                shift and go to state 49

state 119

    (53) while -> PAR_IZQ WHILE comparation . PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 167


state 120

    (50) loop -> PAR_IZQ LOOP COR_IZQ . compuesto COR_DER when PAR_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    compuesto                      shift and go to state 168
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 121

    (90) cadena -> PAR_IZQ STR STRING . STRING PAR_DER

    STRING          shift and go to state 169


state 122

    (78) estructura_mapa -> PAR_IZQ mapas parclaves . PAR_DER

    PAR_DER         shift and go to state 170


state 123

    (70) estructura_lista -> PAR_IZQ LISTA PAR_IZQ . compuesto PAR_DER PAR_DER
    (90) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    STR             shift and go to state 55
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    compuesto                      shift and go to state 171
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 124

    (72) estructura_lista -> PAR_IZQ LISTA compuesto . PAR_DER

    PAR_DER         shift and go to state 172


state 125

    (73) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM . PAR_IZQ compuesto PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 173


state 126

    (75) estructura_vector -> PAR_IZQ VECTOR compuesto . PAR_DER

    PAR_DER         shift and go to state 174


state 127

    (79) mapas -> SORTEDMAP REST . MAP

    MAP             shift and go to state 175


state 128

    (80) mapas -> HASHMAP REST . MAP

    MAP             shift and go to state 176


state 129

    (76) estructura_vector -> COR_IZQ compuesto COR_DER .

    PAR_IZQ         reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    NOMBRE          reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    ENTERO          reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    FLOTANTE        reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    TRUE            reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    FALSE           reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    STRING          reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    LLAV_IZQ        reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    COM_SIM         reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    HASH            reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    COR_IZQ         reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    $end            reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)
    PAR_DER         reduce using rule 76 (estructura_vector -> COR_IZQ compuesto COR_DER .)


state 130

    (82) compuesto -> valor compuesto .

    COR_DER         reduce using rule 82 (compuesto -> valor compuesto .)
    PAR_DER         reduce using rule 82 (compuesto -> valor compuesto .)
    LLAV_DER        reduce using rule 82 (compuesto -> valor compuesto .)


state 131

    (77) estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .

    PAR_IZQ         reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    NOMBRE          reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    ENTERO          reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    FLOTANTE        reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    TRUE            reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    FALSE           reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    STRING          reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    LLAV_IZQ        reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    COM_SIM         reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    HASH            reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    COR_IZQ         reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    $end            reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)
    PAR_DER         reduce using rule 77 (estructura_mapa -> LLAV_IZQ parclaves LLAV_DER .)


state 132

    (83) parclaves -> STRING STRING .
    (84) parclaves -> STRING STRING . parclaves
    (83) parclaves -> . STRING STRING
    (84) parclaves -> . STRING STRING parclaves

    LLAV_DER        reduce using rule 83 (parclaves -> STRING STRING .)
    PAR_DER         reduce using rule 83 (parclaves -> STRING STRING .)
    STRING          shift and go to state 80

    parclaves                      shift and go to state 177

state 133

    (71) estructura_lista -> COM_SIM PAR_IZQ compuesto . PAR_DER

    PAR_DER         shift and go to state 178


state 134

    (74) estructura_conjunto -> HASH LLAV_IZQ compuesto . LLAV_DER

    LLAV_DER        shift and go to state 179


state 135

    (37) variable -> PAR_IZQ DEF NOMBRE expresion . PAR_DER

    PAR_DER         shift and go to state 180


state 136

    (59) imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .

    PAR_IZQ         reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    NOMBRE          reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    ENTERO          reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    FLOTANTE        reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    TRUE            reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    FALSE           reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    STRING          reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    LLAV_IZQ        reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    COM_SIM         reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    HASH            reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    COR_IZQ         reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    $end            reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)
    PAR_DER         reduce using rule 59 (imprimir -> PAR_IZQ imprimirOptions expresion PAR_DER .)


state 137

    (12) funcion -> PAR_IZQ DEFN NOMBRE argumentos . sentencia_compuesta PAR_DER
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . controlStructures
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (59) imprimir -> . PAR_IZQ imprimirOptions expresion PAR_DER
    (47) controlStructures -> . if
    (48) controlStructures -> . while
    (49) controlStructures -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (54) if -> . PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER
    (53) while -> . PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (50) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    sentencia_compuesta            shift and go to state 181
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    controlStructures              shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparation                    shift and go to state 17
    comparationLogic               shift and go to state 18
    if                             shift and go to state 19
    while                          shift and go to state 20
    loop                           shift and go to state 21
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25
    estructura_mapa                shift and go to state 26
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 138

    (13) argumentos -> COR_IZQ . argumento COR_DER
    (14) argumentos -> COR_IZQ . COR_DER
    (15) argumento -> . NOMBRE
    (16) argumento -> . NOMBRE argumento

    COR_DER         shift and go to state 183
    NOMBRE          shift and go to state 184

    argumento                      shift and go to state 182

state 139

    (17) metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    ENTERO          reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    TRUE            reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    FALSE           reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    STRING          reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    HASH            reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    $end            reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 17 (metodo_lista -> PAR_IZQ FIRST NOMBRE PAR_DER .)


state 140

    (18) metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .

    PAR_IZQ         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    NOMBRE          reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    ENTERO          reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    FLOTANTE        reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    TRUE            reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    FALSE           reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    STRING          reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    LLAV_IZQ        reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    COM_SIM         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    HASH            reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    COR_IZQ         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    $end            reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)
    PAR_DER         reduce using rule 18 (metodo_lista -> PAR_IZQ FIRST estructura_lista PAR_DER .)


state 141

    (19) metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE . PAR_DER

    PAR_DER         shift and go to state 185


state 142

    (20) metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO . PAR_DER

    PAR_DER         shift and go to state 186


state 143

    (21) metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO . PAR_DER

    PAR_DER         shift and go to state 187


state 144

    (22) metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE . PAR_DER

    PAR_DER         shift and go to state 188


state 145

    (23) metodo_lista -> PAR_IZQ CONS valor NOMBRE . PAR_DER

    PAR_DER         shift and go to state 189


state 146

    (24) metodo_lista -> PAR_IZQ CONS valor estructura_lista . PAR_DER

    PAR_DER         shift and go to state 190


state 147

    (25) metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE . PAR_DER

    PAR_DER         shift and go to state 191


state 148

    (26) metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO . PAR_DER

    PAR_DER         shift and go to state 192


state 149

    (33) metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE . PAR_DER

    PAR_DER         shift and go to state 193


state 150

    (34) metodo_mapas -> PAR_IZQ GET NOMBRE STRING . PAR_DER

    PAR_DER         shift and go to state 194


state 151

    (28) metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE . PAR_DER

    PAR_DER         shift and go to state 195


state 152

    (29) metodo_vector -> PAR_IZQ GET estructura_vector ENTERO . PAR_DER

    PAR_DER         shift and go to state 196


state 153

    (31) metodo_mapas -> PAR_IZQ GET estructura_mapa STRING . PAR_DER

    PAR_DER         shift and go to state 197


state 154

    (32) metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE . PAR_DER

    PAR_DER         shift and go to state 198


state 155

    (27) metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor . PAR_DER

    PAR_DER         shift and go to state 199


state 156

    (30) metodo_vector -> PAR_IZQ CONJ estructura_vector valor . PAR_DER

    PAR_DER         shift and go to state 200


state 157

    (35) metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .

    PAR_IZQ         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    NOMBRE          reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    ENTERO          reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    FLOTANTE        reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    TRUE            reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    FALSE           reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    STRING          reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    LLAV_IZQ        reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    COM_SIM         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    HASH            reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    COR_IZQ         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    $end            reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)
    PAR_DER         reduce using rule 35 (metodo_mapas -> PAR_IZQ KEYS estructura_mapa PAR_DER .)


state 158

    (36) metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    ENTERO          reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    TRUE            reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    FALSE           reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    STRING          reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    HASH            reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    $end            reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 36 (metodo_mapas -> PAR_IZQ KEYS NOMBRE PAR_DER .)


state 159

    (63) expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .

    PAR_IZQ         reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    NOMBRE          reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    ENTERO          reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    FLOTANTE        reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    TRUE            reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    FALSE           reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    STRING          reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    LLAV_IZQ        reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    COM_SIM         reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    HASH            reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    COR_IZQ         reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    $end            reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)
    PAR_DER         reduce using rule 63 (expresionAritmetica -> PAR_IZQ operadorMath numberSerie PAR_DER .)


state 160

    (67) numberSerie -> numero numberSerie .

    PAR_DER         reduce using rule 67 (numberSerie -> numero numberSerie .)


state 161

    (68) numberSerie -> NOMBRE numberSerie .

    PAR_DER         reduce using rule 68 (numberSerie -> NOMBRE numberSerie .)


state 162

    (69) numberSerie -> expresionAritmetica numberSerie .

    PAR_DER         reduce using rule 69 (numberSerie -> expresionAritmetica numberSerie .)


state 163

    (62) comparation -> PAR_IZQ operadorCompare valor valor . PAR_DER

    PAR_DER         shift and go to state 201


state 164

    (60) comparationLogic -> PAR_IZQ operadorLogic valor valor . PAR_DER

    PAR_DER         shift and go to state 202


state 165

    (61) comparationLogic -> PAR_IZQ NOT valor PAR_DER .

    PAR_IZQ         reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    NOMBRE          reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    ENTERO          reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    FLOTANTE        reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    TRUE            reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    FALSE           reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    STRING          reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    LLAV_IZQ        reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    COM_SIM         reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    HASH            reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    COR_IZQ         reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    $end            reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)
    PAR_DER         reduce using rule 61 (comparationLogic -> PAR_IZQ NOT valor PAR_DER .)


state 166

    (54) if -> PAR_IZQ IF booleanExpresion sentencia_compuesta . PAR_DER

    PAR_DER         shift and go to state 203


state 167

    (53) while -> PAR_IZQ WHILE comparation PAR_IZQ . DO sentencia_compuesta PAR_DER PAR_DER

    DO              shift and go to state 204


state 168

    (50) loop -> PAR_IZQ LOOP COR_IZQ compuesto . COR_DER when PAR_DER

    COR_DER         shift and go to state 205


state 169

    (90) cadena -> PAR_IZQ STR STRING STRING . PAR_DER

    PAR_DER         shift and go to state 206


state 170

    (78) estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .

    PAR_IZQ         reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    NOMBRE          reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    ENTERO          reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    FLOTANTE        reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    TRUE            reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    FALSE           reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    STRING          reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    LLAV_IZQ        reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    COM_SIM         reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    HASH            reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    COR_IZQ         reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    $end            reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)
    PAR_DER         reduce using rule 78 (estructura_mapa -> PAR_IZQ mapas parclaves PAR_DER .)


state 171

    (70) estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto . PAR_DER PAR_DER

    PAR_DER         shift and go to state 207


state 172

    (72) estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .

    PAR_IZQ         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    NOMBRE          reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    ENTERO          reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    FLOTANTE        reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    TRUE            reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    FALSE           reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    STRING          reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    LLAV_IZQ        reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    COM_SIM         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    HASH            reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    COR_IZQ         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    $end            reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)
    PAR_DER         reduce using rule 72 (estructura_lista -> PAR_IZQ LISTA compuesto PAR_DER .)


state 173

    (73) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ . compuesto PAR_DER PAR_DER
    (81) compuesto -> . valor
    (82) compuesto -> . valor compuesto
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    PAR_IZQ         shift and go to state 78

    compuesto                      shift and go to state 208
    valor                          shift and go to state 77
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 174

    (75) estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .

    PAR_IZQ         reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    NOMBRE          reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    ENTERO          reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    FLOTANTE        reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    TRUE            reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    FALSE           reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    STRING          reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    LLAV_IZQ        reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    COM_SIM         reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    HASH            reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    COR_IZQ         reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    $end            reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)
    PAR_DER         reduce using rule 75 (estructura_vector -> PAR_IZQ VECTOR compuesto PAR_DER .)


state 175

    (79) mapas -> SORTEDMAP REST MAP .

    STRING          reduce using rule 79 (mapas -> SORTEDMAP REST MAP .)


state 176

    (80) mapas -> HASHMAP REST MAP .

    STRING          reduce using rule 80 (mapas -> HASHMAP REST MAP .)


state 177

    (84) parclaves -> STRING STRING parclaves .

    LLAV_DER        reduce using rule 84 (parclaves -> STRING STRING parclaves .)
    PAR_DER         reduce using rule 84 (parclaves -> STRING STRING parclaves .)


state 178

    (71) estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .

    PAR_IZQ         reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    NOMBRE          reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    ENTERO          reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    FLOTANTE        reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    TRUE            reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    FALSE           reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    STRING          reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    LLAV_IZQ        reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    COM_SIM         reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    HASH            reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    COR_IZQ         reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    $end            reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    PAR_DER         reduce using rule 71 (estructura_lista -> COM_SIM PAR_IZQ compuesto PAR_DER .)


state 179

    (74) estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .

    PAR_IZQ         reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    NOMBRE          reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    ENTERO          reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    FLOTANTE        reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    TRUE            reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    FALSE           reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    STRING          reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    LLAV_IZQ        reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    COM_SIM         reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    HASH            reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    COR_IZQ         reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    $end            reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)
    PAR_DER         reduce using rule 74 (estructura_conjunto -> HASH LLAV_IZQ compuesto LLAV_DER .)


state 180

    (37) variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .

    PAR_IZQ         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    NOMBRE          reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    ENTERO          reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    FLOTANTE        reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    TRUE            reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    FALSE           reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    STRING          reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    LLAV_IZQ        reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    COM_SIM         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    HASH            reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    COR_IZQ         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    $end            reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)
    PAR_DER         reduce using rule 37 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)


state 181

    (12) funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta . PAR_DER

    PAR_DER         shift and go to state 209


state 182

    (13) argumentos -> COR_IZQ argumento . COR_DER

    COR_DER         shift and go to state 210


state 183

    (14) argumentos -> COR_IZQ COR_DER .

    PAR_IZQ         reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    NOMBRE          reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    ENTERO          reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    FLOTANTE        reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    TRUE            reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    FALSE           reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    STRING          reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    LLAV_IZQ        reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    COM_SIM         reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    HASH            reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)
    COR_IZQ         reduce using rule 14 (argumentos -> COR_IZQ COR_DER .)


state 184

    (15) argumento -> NOMBRE .
    (16) argumento -> NOMBRE . argumento
    (15) argumento -> . NOMBRE
    (16) argumento -> . NOMBRE argumento

    COR_DER         reduce using rule 15 (argumento -> NOMBRE .)
    NOMBRE          shift and go to state 184

    argumento                      shift and go to state 211

state 185

    (19) metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    ENTERO          reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    TRUE            reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    FALSE           reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    STRING          reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    HASH            reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    $end            reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 19 (metodo_lista -> PAR_IZQ NTH NOMBRE NOMBRE PAR_DER .)


state 186

    (20) metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    NOMBRE          reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    ENTERO          reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    TRUE            reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    FALSE           reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    STRING          reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    COM_SIM         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    HASH            reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    $end            reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)
    PAR_DER         reduce using rule 20 (metodo_lista -> PAR_IZQ NTH NOMBRE ENTERO PAR_DER .)


state 187

    (21) metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    NOMBRE          reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    ENTERO          reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    TRUE            reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    FALSE           reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    STRING          reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    COM_SIM         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    HASH            reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    $end            reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)
    PAR_DER         reduce using rule 21 (metodo_lista -> PAR_IZQ NTH estructura_lista ENTERO PAR_DER .)


state 188

    (22) metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    ENTERO          reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    TRUE            reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    FALSE           reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    STRING          reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    HASH            reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    $end            reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 22 (metodo_lista -> PAR_IZQ NTH estructura_lista NOMBRE PAR_DER .)


state 189

    (23) metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    ENTERO          reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    TRUE            reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    FALSE           reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    STRING          reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    HASH            reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    $end            reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 23 (metodo_lista -> PAR_IZQ CONS valor NOMBRE PAR_DER .)


state 190

    (24) metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .

    PAR_IZQ         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    NOMBRE          reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    ENTERO          reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    FLOTANTE        reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    TRUE            reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    FALSE           reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    STRING          reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    LLAV_IZQ        reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    COM_SIM         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    HASH            reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    COR_IZQ         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    $end            reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)
    PAR_DER         reduce using rule 24 (metodo_lista -> PAR_IZQ CONS valor estructura_lista PAR_DER .)


state 191

    (25) metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    ENTERO          reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    TRUE            reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    FALSE           reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    STRING          reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    HASH            reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    $end            reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 25 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER .)


state 192

    (26) metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    NOMBRE          reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    ENTERO          reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    TRUE            reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    FALSE           reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    STRING          reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    COM_SIM         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    HASH            reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    $end            reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)
    PAR_DER         reduce using rule 26 (metodo_conjunto -> PAR_IZQ GET estructura_conjunto ENTERO PAR_DER .)


state 193

    (33) metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    ENTERO          reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    TRUE            reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    FALSE           reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    STRING          reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    HASH            reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    $end            reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 33 (metodo_mapas -> PAR_IZQ GET NOMBRE NOMBRE PAR_DER .)


state 194

    (34) metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .

    PAR_IZQ         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    NOMBRE          reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    ENTERO          reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    FLOTANTE        reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    TRUE            reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    FALSE           reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    STRING          reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    LLAV_IZQ        reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    COM_SIM         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    HASH            reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    COR_IZQ         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    $end            reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)
    PAR_DER         reduce using rule 34 (metodo_mapas -> PAR_IZQ GET NOMBRE STRING PAR_DER .)


state 195

    (28) metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    ENTERO          reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    TRUE            reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    FALSE           reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    STRING          reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    HASH            reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    $end            reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 28 (metodo_vector -> PAR_IZQ GET estructura_vector NOMBRE PAR_DER .)


state 196

    (29) metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .

    PAR_IZQ         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    NOMBRE          reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    ENTERO          reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    FLOTANTE        reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    TRUE            reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    FALSE           reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    STRING          reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    LLAV_IZQ        reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    COM_SIM         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    HASH            reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    COR_IZQ         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    $end            reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)
    PAR_DER         reduce using rule 29 (metodo_vector -> PAR_IZQ GET estructura_vector ENTERO PAR_DER .)


state 197

    (31) metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .

    PAR_IZQ         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    NOMBRE          reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    ENTERO          reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    FLOTANTE        reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    TRUE            reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    FALSE           reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    STRING          reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    LLAV_IZQ        reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    COM_SIM         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    HASH            reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    COR_IZQ         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    $end            reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)
    PAR_DER         reduce using rule 31 (metodo_mapas -> PAR_IZQ GET estructura_mapa STRING PAR_DER .)


state 198

    (32) metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .

    PAR_IZQ         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    NOMBRE          reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    ENTERO          reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    FLOTANTE        reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    TRUE            reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    FALSE           reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    STRING          reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    LLAV_IZQ        reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    COM_SIM         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    HASH            reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    COR_IZQ         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    $end            reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)
    PAR_DER         reduce using rule 32 (metodo_mapas -> PAR_IZQ GET estructura_mapa NOMBRE PAR_DER .)


state 199

    (27) metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .

    PAR_IZQ         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    NOMBRE          reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    ENTERO          reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    FLOTANTE        reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    TRUE            reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    FALSE           reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    STRING          reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    LLAV_IZQ        reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    COM_SIM         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    HASH            reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    COR_IZQ         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    $end            reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)
    PAR_DER         reduce using rule 27 (metodo_conjunto -> PAR_IZQ CONJ estructura_conjunto valor PAR_DER .)


state 200

    (30) metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .

    PAR_IZQ         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    NOMBRE          reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    ENTERO          reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    FLOTANTE        reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    TRUE            reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    FALSE           reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    STRING          reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    LLAV_IZQ        reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    COM_SIM         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    HASH            reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    COR_IZQ         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    $end            reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)
    PAR_DER         reduce using rule 30 (metodo_vector -> PAR_IZQ CONJ estructura_vector valor PAR_DER .)


state 201

    (62) comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .

    PAR_IZQ         reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    NOMBRE          reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    ENTERO          reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    FLOTANTE        reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    TRUE            reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    FALSE           reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    STRING          reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    LLAV_IZQ        reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    COM_SIM         reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    HASH            reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    COR_IZQ         reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    $end            reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)
    PAR_DER         reduce using rule 62 (comparation -> PAR_IZQ operadorCompare valor valor PAR_DER .)


state 202

    (60) comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .

    PAR_IZQ         reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    NOMBRE          reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    ENTERO          reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    FLOTANTE        reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    TRUE            reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    FALSE           reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    STRING          reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    LLAV_IZQ        reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    COM_SIM         reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    HASH            reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    COR_IZQ         reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    $end            reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)
    PAR_DER         reduce using rule 60 (comparationLogic -> PAR_IZQ operadorLogic valor valor PAR_DER .)


state 203

    (54) if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .

    PAR_IZQ         reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    NOMBRE          reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    ENTERO          reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    FLOTANTE        reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    TRUE            reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    FALSE           reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    STRING          reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    LLAV_IZQ        reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    COM_SIM         reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    HASH            reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    COR_IZQ         reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    $end            reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)
    PAR_DER         reduce using rule 54 (if -> PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER .)


state 204

    (53) while -> PAR_IZQ WHILE comparation PAR_IZQ DO . sentencia_compuesta PAR_DER PAR_DER
    (1) sentencia_compuesta -> . algoritmo
    (2) sentencia_compuesta -> . algoritmo sentencia_compuesta
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . controlStructures
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (59) imprimir -> . PAR_IZQ imprimirOptions expresion PAR_DER
    (47) controlStructures -> . if
    (48) controlStructures -> . while
    (49) controlStructures -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (54) if -> . PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER
    (53) while -> . PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (50) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    comparation                    shift and go to state 17
    sentencia_compuesta            shift and go to state 212
    algoritmo                      shift and go to state 2
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    controlStructures              shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparationLogic               shift and go to state 18
    if                             shift and go to state 19
    while                          shift and go to state 20
    loop                           shift and go to state 21
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25
    estructura_mapa                shift and go to state 26
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 205

    (50) loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER . when PAR_DER
    (51) when -> . PAR_IZQ WHEN comparation algoritmo recur PAR_DER

    PAR_IZQ         shift and go to state 213

    when                           shift and go to state 214

state 206

    (90) cadena -> PAR_IZQ STR STRING STRING PAR_DER .

    PAR_IZQ         reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    NOMBRE          reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    ENTERO          reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    FLOTANTE        reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    TRUE            reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    FALSE           reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    STRING          reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    LLAV_IZQ        reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    COM_SIM         reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    HASH            reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    COR_IZQ         reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    $end            reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    PAR_DER         reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    COR_DER         reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    LLAV_DER        reduce using rule 90 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)


state 207

    (70) estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER . PAR_DER

    PAR_DER         shift and go to state 215


state 208

    (73) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto . PAR_DER PAR_DER

    PAR_DER         shift and go to state 216


state 209

    (12) funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .

    PAR_IZQ         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    NOMBRE          reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    ENTERO          reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    FLOTANTE        reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    TRUE            reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    FALSE           reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    STRING          reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    LLAV_IZQ        reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    COM_SIM         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    HASH            reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    COR_IZQ         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    $end            reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)
    PAR_DER         reduce using rule 12 (funcion -> PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER .)


state 210

    (13) argumentos -> COR_IZQ argumento COR_DER .

    PAR_IZQ         reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    NOMBRE          reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    ENTERO          reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    FLOTANTE        reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    TRUE            reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    FALSE           reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    STRING          reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    LLAV_IZQ        reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    COM_SIM         reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    HASH            reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)
    COR_IZQ         reduce using rule 13 (argumentos -> COR_IZQ argumento COR_DER .)


state 211

    (16) argumento -> NOMBRE argumento .

    COR_DER         reduce using rule 16 (argumento -> NOMBRE argumento .)


state 212

    (53) while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta . PAR_DER PAR_DER

    PAR_DER         shift and go to state 217


state 213

    (51) when -> PAR_IZQ . WHEN comparation algoritmo recur PAR_DER

    WHEN            shift and go to state 218


state 214

    (50) loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when . PAR_DER

    PAR_DER         shift and go to state 219


state 215

    (70) estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .

    PAR_IZQ         reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    NOMBRE          reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    ENTERO          reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    FLOTANTE        reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    TRUE            reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    FALSE           reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    STRING          reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    LLAV_IZQ        reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    COM_SIM         reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    HASH            reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    COR_IZQ         reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    $end            reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 70 (estructura_lista -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)


state 216

    (73) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER . PAR_DER

    PAR_DER         shift and go to state 220


state 217

    (53) while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER . PAR_DER

    PAR_DER         shift and go to state 221


state 218

    (51) when -> PAR_IZQ WHEN . comparation algoritmo recur PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER

    PAR_IZQ         shift and go to state 118

    comparation                    shift and go to state 222

state 219

    (50) loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .

    PAR_IZQ         reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    NOMBRE          reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    ENTERO          reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    FLOTANTE        reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    TRUE            reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    FALSE           reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    STRING          reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    LLAV_IZQ        reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    COM_SIM         reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    HASH            reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    COR_IZQ         reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    $end            reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)
    PAR_DER         reduce using rule 50 (loop -> PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER .)


state 220

    (73) estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .

    PAR_IZQ         reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    NOMBRE          reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    ENTERO          reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    FLOTANTE        reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    TRUE            reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    FALSE           reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    STRING          reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    LLAV_IZQ        reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    COM_SIM         reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    HASH            reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    COR_IZQ         reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    $end            reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 73 (estructura_conjunto -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)


state 221

    (53) while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .

    PAR_IZQ         reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    NOMBRE          reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    ENTERO          reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    FLOTANTE        reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    TRUE            reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    FALSE           reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    STRING          reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    LLAV_IZQ        reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    COM_SIM         reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    HASH            reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    COR_IZQ         reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    $end            reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 53 (while -> PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER .)


state 222

    (51) when -> PAR_IZQ WHEN comparation . algoritmo recur PAR_DER
    (3) algoritmo -> . variable
    (4) algoritmo -> . expresion
    (5) algoritmo -> . imprimir
    (6) algoritmo -> . controlStructures
    (7) algoritmo -> . funcion
    (8) algoritmo -> . metodo_lista
    (9) algoritmo -> . metodo_conjunto
    (10) algoritmo -> . metodo_vector
    (11) algoritmo -> . metodo_mapas
    (37) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (38) expresion -> . valor
    (39) expresion -> . estructura
    (40) expresion -> . expresionAritmetica
    (41) expresion -> . comparation
    (42) expresion -> . comparationLogic
    (59) imprimir -> . PAR_IZQ imprimirOptions expresion PAR_DER
    (47) controlStructures -> . if
    (48) controlStructures -> . while
    (49) controlStructures -> . loop
    (12) funcion -> . PAR_IZQ DEFN NOMBRE argumentos sentencia_compuesta PAR_DER
    (17) metodo_lista -> . PAR_IZQ FIRST NOMBRE PAR_DER
    (18) metodo_lista -> . PAR_IZQ FIRST estructura_lista PAR_DER
    (19) metodo_lista -> . PAR_IZQ NTH NOMBRE NOMBRE PAR_DER
    (20) metodo_lista -> . PAR_IZQ NTH NOMBRE ENTERO PAR_DER
    (21) metodo_lista -> . PAR_IZQ NTH estructura_lista ENTERO PAR_DER
    (22) metodo_lista -> . PAR_IZQ NTH estructura_lista NOMBRE PAR_DER
    (23) metodo_lista -> . PAR_IZQ CONS valor NOMBRE PAR_DER
    (24) metodo_lista -> . PAR_IZQ CONS valor estructura_lista PAR_DER
    (25) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto NOMBRE PAR_DER
    (26) metodo_conjunto -> . PAR_IZQ GET estructura_conjunto ENTERO PAR_DER
    (27) metodo_conjunto -> . PAR_IZQ CONJ estructura_conjunto valor PAR_DER
    (28) metodo_vector -> . PAR_IZQ GET estructura_vector NOMBRE PAR_DER
    (29) metodo_vector -> . PAR_IZQ GET estructura_vector ENTERO PAR_DER
    (30) metodo_vector -> . PAR_IZQ CONJ estructura_vector valor PAR_DER
    (31) metodo_mapas -> . PAR_IZQ GET estructura_mapa STRING PAR_DER
    (32) metodo_mapas -> . PAR_IZQ GET estructura_mapa NOMBRE PAR_DER
    (33) metodo_mapas -> . PAR_IZQ GET NOMBRE NOMBRE PAR_DER
    (34) metodo_mapas -> . PAR_IZQ GET NOMBRE STRING PAR_DER
    (35) metodo_mapas -> . PAR_IZQ KEYS estructura_mapa PAR_DER
    (36) metodo_mapas -> . PAR_IZQ KEYS NOMBRE PAR_DER
    (85) valor -> . numero
    (86) valor -> . NOMBRE
    (87) valor -> . booleano
    (88) valor -> . cadena
    (43) estructura -> . estructura_mapa
    (44) estructura -> . estructura_lista
    (45) estructura -> . estructura_conjunto
    (46) estructura -> . estructura_vector
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER
    (62) comparation -> . PAR_IZQ operadorCompare valor valor PAR_DER
    (60) comparationLogic -> . PAR_IZQ operadorLogic valor valor PAR_DER
    (61) comparationLogic -> . PAR_IZQ NOT valor PAR_DER
    (54) if -> . PAR_IZQ IF booleanExpresion sentencia_compuesta PAR_DER
    (53) while -> . PAR_IZQ WHILE comparation PAR_IZQ DO sentencia_compuesta PAR_DER PAR_DER
    (50) loop -> . PAR_IZQ LOOP COR_IZQ compuesto COR_DER when PAR_DER
    (93) numero -> . ENTERO
    (94) numero -> . FLOTANTE
    (91) booleano -> . TRUE
    (92) booleano -> . FALSE
    (89) cadena -> . STRING
    (90) cadena -> . PAR_IZQ STR STRING STRING PAR_DER
    (77) estructura_mapa -> . LLAV_IZQ parclaves LLAV_DER
    (78) estructura_mapa -> . PAR_IZQ mapas parclaves PAR_DER
    (70) estructura_lista -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (71) estructura_lista -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (72) estructura_lista -> . PAR_IZQ LISTA compuesto PAR_DER
    (73) estructura_conjunto -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (74) estructura_conjunto -> . HASH LLAV_IZQ compuesto LLAV_DER
    (75) estructura_vector -> . PAR_IZQ VECTOR compuesto PAR_DER
    (76) estructura_vector -> . COR_IZQ compuesto COR_DER

    PAR_IZQ         shift and go to state 12
    NOMBRE          shift and go to state 13
    ENTERO          shift and go to state 23
    FLOTANTE        shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING          shift and go to state 27
    LLAV_IZQ        shift and go to state 35
    COM_SIM         shift and go to state 36
    HASH            shift and go to state 37
    COR_IZQ         shift and go to state 31

    comparation                    shift and go to state 17
    algoritmo                      shift and go to state 223
    variable                       shift and go to state 3
    expresion                      shift and go to state 4
    imprimir                       shift and go to state 5
    controlStructures              shift and go to state 6
    funcion                        shift and go to state 7
    metodo_lista                   shift and go to state 8
    metodo_conjunto                shift and go to state 9
    metodo_vector                  shift and go to state 10
    metodo_mapas                   shift and go to state 11
    valor                          shift and go to state 14
    estructura                     shift and go to state 15
    expresionAritmetica            shift and go to state 16
    comparationLogic               shift and go to state 18
    if                             shift and go to state 19
    while                          shift and go to state 20
    loop                           shift and go to state 21
    estructura_lista               shift and go to state 22
    estructura_conjunto            shift and go to state 24
    estructura_vector              shift and go to state 25
    estructura_mapa                shift and go to state 26
    numero                         shift and go to state 28
    booleano                       shift and go to state 29
    cadena                         shift and go to state 30

state 223

    (51) when -> PAR_IZQ WHEN comparation algoritmo . recur PAR_DER
    (52) recur -> . PAR_IZQ RECUR expresionAritmetica PAR_DER

    PAR_IZQ         shift and go to state 224

    recur                          shift and go to state 225

state 224

    (52) recur -> PAR_IZQ . RECUR expresionAritmetica PAR_DER

    RECUR           shift and go to state 226


state 225

    (51) when -> PAR_IZQ WHEN comparation algoritmo recur . PAR_DER

    PAR_DER         shift and go to state 227


state 226

    (52) recur -> PAR_IZQ RECUR . expresionAritmetica PAR_DER
    (63) expresionAritmetica -> . PAR_IZQ operadorMath numberSerie PAR_DER

    PAR_IZQ         shift and go to state 104

    expresionAritmetica            shift and go to state 228

state 227

    (51) when -> PAR_IZQ WHEN comparation algoritmo recur PAR_DER .

    PAR_DER         reduce using rule 51 (when -> PAR_IZQ WHEN comparation algoritmo recur PAR_DER .)


state 228

    (52) recur -> PAR_IZQ RECUR expresionAritmetica . PAR_DER

    PAR_DER         shift and go to state 229


state 229

    (52) recur -> PAR_IZQ RECUR expresionAritmetica PAR_DER .

    PAR_DER         reduce using rule 52 (recur -> PAR_IZQ RECUR expresionAritmetica PAR_DER .)

