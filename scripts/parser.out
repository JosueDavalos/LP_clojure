Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    NULL
    LOOP
    WHILE
    DO
    WHEN
    PRINTLN
    RECUR
    DEFN
    METODOFIRST
    METODONTH
    IF
    DOSEQ
    READLINE
    NOT
    AND
    OR
    CHAR
    SUM
    PRODUCT
    DIVISION
    EQUAL
    NOT_EQUAL
    GREATER_THAN
    LESS_THAN
    GREATER_THAN_EQUAL
    LESS_THAN_EQUAL

Grammar

Rule 0     S' -> algoritmo
Rule 1     algoritmo -> variable
Rule 2     algoritmo -> expresion
Rule 3     variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER
Rule 4     expresion -> valor
Rule 5     expresion -> estructura
Rule 6     estructura -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
Rule 7     estructura -> COM_SIM PAR_IZQ compuesto PAR_DER
Rule 8     estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
Rule 9     estructura -> HASH LLAV_IZQ compuesto LLAV_DER
Rule 10    estructura -> PAR_IZQ VECTOR compuesto PAR_DER
Rule 11    estructura -> COR_IZQ compuesto COR_DER
Rule 12    estructura -> LLAV_IZQ parclaves LLAV_DER
Rule 13    estructura -> PAR_IZQ mapas parclaves PAR_DER
Rule 14    mapas -> SORTEDMAP REST MAP
Rule 15    mapas -> HASHMAP REST MAP
Rule 16    compuesto -> valor
Rule 17    compuesto -> valor compuesto
Rule 18    parclaves -> STRING STRING
Rule 19    parclaves -> STRING STRING parclaves
Rule 20    valor -> numero
Rule 21    valor -> NOMBRE
Rule 22    valor -> booleano
Rule 23    valor -> cadena
Rule 24    cadena -> STRING
Rule 25    cadena -> PAR_IZQ STR STRING STRING PAR_DER
Rule 26    booleano -> TRUE
Rule 27    booleano -> FALSE
Rule 28    numero -> ENTERO
Rule 29    numero -> FLOTANTE

Terminals, with rules where they appear

AND                  : 
CHAR                 : 
COM_SIM              : 7 8
CONJUNTO             : 8
COR_DER              : 11
COR_IZQ              : 11
DEF                  : 3
DEFN                 : 
DIVISION             : 
DO                   : 
DOSEQ                : 
ENTERO               : 28
EQUAL                : 
FALSE                : 27
FLOTANTE             : 29
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
HASH                 : 9
HASHMAP              : 15
IF                   : 
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LISTA                : 6
LLAV_DER             : 9 12
LLAV_IZQ             : 9 12
LOOP                 : 
MAP                  : 14 15
METODOFIRST          : 
METODONTH            : 
NOMBRE               : 3 21
NOT                  : 
NOT_EQUAL            : 
NULL                 : 
OR                   : 
PAR_DER              : 3 6 6 7 8 8 10 13 25
PAR_IZQ              : 3 6 6 7 8 8 10 13 25
PRINTLN              : 
PRODUCT              : 
READLINE             : 
RECUR                : 
REST                 : 14 15
SORTEDMAP            : 14
STR                  : 25
STRING               : 18 18 19 19 24 25 25
SUM                  : 
TRUE                 : 26
VECTOR               : 10
WHEN                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

algoritmo            : 0
booleano             : 22
cadena               : 23
compuesto            : 6 7 8 9 10 11 17
estructura           : 5
expresion            : 2 3
mapas                : 13
numero               : 20
parclaves            : 12 13 19
valor                : 4 16 17
variable             : 1

Parsing method: LALR

state 0

    (0) S' -> . algoritmo
    (1) algoritmo -> . variable
    (2) algoritmo -> . expresion
    (3) variable -> . PAR_IZQ DEF NOMBRE expresion PAR_DER
    (4) expresion -> . valor
    (5) expresion -> . estructura
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (6) estructura -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (7) estructura -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (8) estructura -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (9) estructura -> . HASH LLAV_IZQ compuesto LLAV_DER
    (10) estructura -> . PAR_IZQ VECTOR compuesto PAR_DER
    (11) estructura -> . COR_IZQ compuesto COR_DER
    (12) estructura -> . LLAV_IZQ parclaves LLAV_DER
    (13) estructura -> . PAR_IZQ mapas parclaves PAR_DER
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    PAR_IZQ         shift and go to state 4
    NOMBRE          shift and go to state 5
    COM_SIM         shift and go to state 11
    HASH            shift and go to state 12
    COR_IZQ         shift and go to state 14
    LLAV_IZQ        shift and go to state 13
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19

    algoritmo                      shift and go to state 1
    variable                       shift and go to state 2
    expresion                      shift and go to state 3
    valor                          shift and go to state 6
    estructura                     shift and go to state 7
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 1

    (0) S' -> algoritmo .



state 2

    (1) algoritmo -> variable .

    $end            reduce using rule 1 (algoritmo -> variable .)


state 3

    (2) algoritmo -> expresion .

    $end            reduce using rule 2 (algoritmo -> expresion .)


state 4

    (3) variable -> PAR_IZQ . DEF NOMBRE expresion PAR_DER
    (6) estructura -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (8) estructura -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (10) estructura -> PAR_IZQ . VECTOR compuesto PAR_DER
    (13) estructura -> PAR_IZQ . mapas parclaves PAR_DER
    (25) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (14) mapas -> . SORTEDMAP REST MAP
    (15) mapas -> . HASHMAP REST MAP

    DEF             shift and go to state 20
    LISTA           shift and go to state 21
    CONJUNTO        shift and go to state 22
    VECTOR          shift and go to state 23
    STR             shift and go to state 25
    SORTEDMAP       shift and go to state 26
    HASHMAP         shift and go to state 27

    mapas                          shift and go to state 24

state 5

    (21) valor -> NOMBRE .

    $end            reduce using rule 21 (valor -> NOMBRE .)
    NOMBRE          reduce using rule 21 (valor -> NOMBRE .)
    ENTERO          reduce using rule 21 (valor -> NOMBRE .)
    FLOTANTE        reduce using rule 21 (valor -> NOMBRE .)
    TRUE            reduce using rule 21 (valor -> NOMBRE .)
    FALSE           reduce using rule 21 (valor -> NOMBRE .)
    STRING          reduce using rule 21 (valor -> NOMBRE .)
    PAR_IZQ         reduce using rule 21 (valor -> NOMBRE .)
    COR_DER         reduce using rule 21 (valor -> NOMBRE .)
    PAR_DER         reduce using rule 21 (valor -> NOMBRE .)
    LLAV_DER        reduce using rule 21 (valor -> NOMBRE .)


state 6

    (4) expresion -> valor .

    $end            reduce using rule 4 (expresion -> valor .)
    PAR_DER         reduce using rule 4 (expresion -> valor .)


state 7

    (5) expresion -> estructura .

    $end            reduce using rule 5 (expresion -> estructura .)
    PAR_DER         reduce using rule 5 (expresion -> estructura .)


state 8

    (20) valor -> numero .

    $end            reduce using rule 20 (valor -> numero .)
    NOMBRE          reduce using rule 20 (valor -> numero .)
    ENTERO          reduce using rule 20 (valor -> numero .)
    FLOTANTE        reduce using rule 20 (valor -> numero .)
    TRUE            reduce using rule 20 (valor -> numero .)
    FALSE           reduce using rule 20 (valor -> numero .)
    STRING          reduce using rule 20 (valor -> numero .)
    PAR_IZQ         reduce using rule 20 (valor -> numero .)
    COR_DER         reduce using rule 20 (valor -> numero .)
    PAR_DER         reduce using rule 20 (valor -> numero .)
    LLAV_DER        reduce using rule 20 (valor -> numero .)


state 9

    (22) valor -> booleano .

    $end            reduce using rule 22 (valor -> booleano .)
    NOMBRE          reduce using rule 22 (valor -> booleano .)
    ENTERO          reduce using rule 22 (valor -> booleano .)
    FLOTANTE        reduce using rule 22 (valor -> booleano .)
    TRUE            reduce using rule 22 (valor -> booleano .)
    FALSE           reduce using rule 22 (valor -> booleano .)
    STRING          reduce using rule 22 (valor -> booleano .)
    PAR_IZQ         reduce using rule 22 (valor -> booleano .)
    COR_DER         reduce using rule 22 (valor -> booleano .)
    PAR_DER         reduce using rule 22 (valor -> booleano .)
    LLAV_DER        reduce using rule 22 (valor -> booleano .)


state 10

    (23) valor -> cadena .

    $end            reduce using rule 23 (valor -> cadena .)
    NOMBRE          reduce using rule 23 (valor -> cadena .)
    ENTERO          reduce using rule 23 (valor -> cadena .)
    FLOTANTE        reduce using rule 23 (valor -> cadena .)
    TRUE            reduce using rule 23 (valor -> cadena .)
    FALSE           reduce using rule 23 (valor -> cadena .)
    STRING          reduce using rule 23 (valor -> cadena .)
    PAR_IZQ         reduce using rule 23 (valor -> cadena .)
    COR_DER         reduce using rule 23 (valor -> cadena .)
    PAR_DER         reduce using rule 23 (valor -> cadena .)
    LLAV_DER        reduce using rule 23 (valor -> cadena .)


state 11

    (7) estructura -> COM_SIM . PAR_IZQ compuesto PAR_DER

    PAR_IZQ         shift and go to state 28


state 12

    (9) estructura -> HASH . LLAV_IZQ compuesto LLAV_DER

    LLAV_IZQ        shift and go to state 29


state 13

    (12) estructura -> LLAV_IZQ . parclaves LLAV_DER
    (18) parclaves -> . STRING STRING
    (19) parclaves -> . STRING STRING parclaves

    STRING          shift and go to state 31

    parclaves                      shift and go to state 30

state 14

    (11) estructura -> COR_IZQ . compuesto COR_DER
    (16) compuesto -> . valor
    (17) compuesto -> . valor compuesto
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19
    PAR_IZQ         shift and go to state 34

    compuesto                      shift and go to state 32
    valor                          shift and go to state 33
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 15

    (28) numero -> ENTERO .

    $end            reduce using rule 28 (numero -> ENTERO .)
    NOMBRE          reduce using rule 28 (numero -> ENTERO .)
    ENTERO          reduce using rule 28 (numero -> ENTERO .)
    FLOTANTE        reduce using rule 28 (numero -> ENTERO .)
    TRUE            reduce using rule 28 (numero -> ENTERO .)
    FALSE           reduce using rule 28 (numero -> ENTERO .)
    STRING          reduce using rule 28 (numero -> ENTERO .)
    PAR_IZQ         reduce using rule 28 (numero -> ENTERO .)
    COR_DER         reduce using rule 28 (numero -> ENTERO .)
    PAR_DER         reduce using rule 28 (numero -> ENTERO .)
    LLAV_DER        reduce using rule 28 (numero -> ENTERO .)


state 16

    (29) numero -> FLOTANTE .

    $end            reduce using rule 29 (numero -> FLOTANTE .)
    NOMBRE          reduce using rule 29 (numero -> FLOTANTE .)
    ENTERO          reduce using rule 29 (numero -> FLOTANTE .)
    FLOTANTE        reduce using rule 29 (numero -> FLOTANTE .)
    TRUE            reduce using rule 29 (numero -> FLOTANTE .)
    FALSE           reduce using rule 29 (numero -> FLOTANTE .)
    STRING          reduce using rule 29 (numero -> FLOTANTE .)
    PAR_IZQ         reduce using rule 29 (numero -> FLOTANTE .)
    COR_DER         reduce using rule 29 (numero -> FLOTANTE .)
    PAR_DER         reduce using rule 29 (numero -> FLOTANTE .)
    LLAV_DER        reduce using rule 29 (numero -> FLOTANTE .)


state 17

    (26) booleano -> TRUE .

    $end            reduce using rule 26 (booleano -> TRUE .)
    NOMBRE          reduce using rule 26 (booleano -> TRUE .)
    ENTERO          reduce using rule 26 (booleano -> TRUE .)
    FLOTANTE        reduce using rule 26 (booleano -> TRUE .)
    TRUE            reduce using rule 26 (booleano -> TRUE .)
    FALSE           reduce using rule 26 (booleano -> TRUE .)
    STRING          reduce using rule 26 (booleano -> TRUE .)
    PAR_IZQ         reduce using rule 26 (booleano -> TRUE .)
    COR_DER         reduce using rule 26 (booleano -> TRUE .)
    PAR_DER         reduce using rule 26 (booleano -> TRUE .)
    LLAV_DER        reduce using rule 26 (booleano -> TRUE .)


state 18

    (27) booleano -> FALSE .

    $end            reduce using rule 27 (booleano -> FALSE .)
    NOMBRE          reduce using rule 27 (booleano -> FALSE .)
    ENTERO          reduce using rule 27 (booleano -> FALSE .)
    FLOTANTE        reduce using rule 27 (booleano -> FALSE .)
    TRUE            reduce using rule 27 (booleano -> FALSE .)
    FALSE           reduce using rule 27 (booleano -> FALSE .)
    STRING          reduce using rule 27 (booleano -> FALSE .)
    PAR_IZQ         reduce using rule 27 (booleano -> FALSE .)
    COR_DER         reduce using rule 27 (booleano -> FALSE .)
    PAR_DER         reduce using rule 27 (booleano -> FALSE .)
    LLAV_DER        reduce using rule 27 (booleano -> FALSE .)


state 19

    (24) cadena -> STRING .

    $end            reduce using rule 24 (cadena -> STRING .)
    NOMBRE          reduce using rule 24 (cadena -> STRING .)
    ENTERO          reduce using rule 24 (cadena -> STRING .)
    FLOTANTE        reduce using rule 24 (cadena -> STRING .)
    TRUE            reduce using rule 24 (cadena -> STRING .)
    FALSE           reduce using rule 24 (cadena -> STRING .)
    STRING          reduce using rule 24 (cadena -> STRING .)
    PAR_IZQ         reduce using rule 24 (cadena -> STRING .)
    COR_DER         reduce using rule 24 (cadena -> STRING .)
    PAR_DER         reduce using rule 24 (cadena -> STRING .)
    LLAV_DER        reduce using rule 24 (cadena -> STRING .)


state 20

    (3) variable -> PAR_IZQ DEF . NOMBRE expresion PAR_DER

    NOMBRE          shift and go to state 35


state 21

    (6) estructura -> PAR_IZQ LISTA . PAR_IZQ compuesto PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 36


state 22

    (8) estructura -> PAR_IZQ CONJUNTO . COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER

    COM_SIM         shift and go to state 37


state 23

    (10) estructura -> PAR_IZQ VECTOR . compuesto PAR_DER
    (16) compuesto -> . valor
    (17) compuesto -> . valor compuesto
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19
    PAR_IZQ         shift and go to state 34

    compuesto                      shift and go to state 38
    valor                          shift and go to state 33
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 24

    (13) estructura -> PAR_IZQ mapas . parclaves PAR_DER
    (18) parclaves -> . STRING STRING
    (19) parclaves -> . STRING STRING parclaves

    STRING          shift and go to state 31

    parclaves                      shift and go to state 39

state 25

    (25) cadena -> PAR_IZQ STR . STRING STRING PAR_DER

    STRING          shift and go to state 40


state 26

    (14) mapas -> SORTEDMAP . REST MAP

    REST            shift and go to state 41


state 27

    (15) mapas -> HASHMAP . REST MAP

    REST            shift and go to state 42


state 28

    (7) estructura -> COM_SIM PAR_IZQ . compuesto PAR_DER
    (16) compuesto -> . valor
    (17) compuesto -> . valor compuesto
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19
    PAR_IZQ         shift and go to state 34

    compuesto                      shift and go to state 43
    valor                          shift and go to state 33
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 29

    (9) estructura -> HASH LLAV_IZQ . compuesto LLAV_DER
    (16) compuesto -> . valor
    (17) compuesto -> . valor compuesto
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19
    PAR_IZQ         shift and go to state 34

    compuesto                      shift and go to state 44
    valor                          shift and go to state 33
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 30

    (12) estructura -> LLAV_IZQ parclaves . LLAV_DER

    LLAV_DER        shift and go to state 45


state 31

    (18) parclaves -> STRING . STRING
    (19) parclaves -> STRING . STRING parclaves

    STRING          shift and go to state 46


state 32

    (11) estructura -> COR_IZQ compuesto . COR_DER

    COR_DER         shift and go to state 47


state 33

    (16) compuesto -> valor .
    (17) compuesto -> valor . compuesto
    (16) compuesto -> . valor
    (17) compuesto -> . valor compuesto
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    COR_DER         reduce using rule 16 (compuesto -> valor .)
    PAR_DER         reduce using rule 16 (compuesto -> valor .)
    LLAV_DER        reduce using rule 16 (compuesto -> valor .)
    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19
    PAR_IZQ         shift and go to state 34

    valor                          shift and go to state 33
    compuesto                      shift and go to state 48
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 34

    (25) cadena -> PAR_IZQ . STR STRING STRING PAR_DER

    STR             shift and go to state 25


state 35

    (3) variable -> PAR_IZQ DEF NOMBRE . expresion PAR_DER
    (4) expresion -> . valor
    (5) expresion -> . estructura
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (6) estructura -> . PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (7) estructura -> . COM_SIM PAR_IZQ compuesto PAR_DER
    (8) estructura -> . PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (9) estructura -> . HASH LLAV_IZQ compuesto LLAV_DER
    (10) estructura -> . PAR_IZQ VECTOR compuesto PAR_DER
    (11) estructura -> . COR_IZQ compuesto COR_DER
    (12) estructura -> . LLAV_IZQ parclaves LLAV_DER
    (13) estructura -> . PAR_IZQ mapas parclaves PAR_DER
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 5
    PAR_IZQ         shift and go to state 49
    COM_SIM         shift and go to state 11
    HASH            shift and go to state 12
    COR_IZQ         shift and go to state 14
    LLAV_IZQ        shift and go to state 13
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19

    expresion                      shift and go to state 50
    valor                          shift and go to state 6
    estructura                     shift and go to state 7
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 36

    (6) estructura -> PAR_IZQ LISTA PAR_IZQ . compuesto PAR_DER PAR_DER
    (16) compuesto -> . valor
    (17) compuesto -> . valor compuesto
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19
    PAR_IZQ         shift and go to state 34

    compuesto                      shift and go to state 51
    valor                          shift and go to state 33
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 37

    (8) estructura -> PAR_IZQ CONJUNTO COM_SIM . PAR_IZQ compuesto PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 52


state 38

    (10) estructura -> PAR_IZQ VECTOR compuesto . PAR_DER

    PAR_DER         shift and go to state 53


state 39

    (13) estructura -> PAR_IZQ mapas parclaves . PAR_DER

    PAR_DER         shift and go to state 54


state 40

    (25) cadena -> PAR_IZQ STR STRING . STRING PAR_DER

    STRING          shift and go to state 55


state 41

    (14) mapas -> SORTEDMAP REST . MAP

    MAP             shift and go to state 56


state 42

    (15) mapas -> HASHMAP REST . MAP

    MAP             shift and go to state 57


state 43

    (7) estructura -> COM_SIM PAR_IZQ compuesto . PAR_DER

    PAR_DER         shift and go to state 58


state 44

    (9) estructura -> HASH LLAV_IZQ compuesto . LLAV_DER

    LLAV_DER        shift and go to state 59


state 45

    (12) estructura -> LLAV_IZQ parclaves LLAV_DER .

    $end            reduce using rule 12 (estructura -> LLAV_IZQ parclaves LLAV_DER .)
    PAR_DER         reduce using rule 12 (estructura -> LLAV_IZQ parclaves LLAV_DER .)


state 46

    (18) parclaves -> STRING STRING .
    (19) parclaves -> STRING STRING . parclaves
    (18) parclaves -> . STRING STRING
    (19) parclaves -> . STRING STRING parclaves

    LLAV_DER        reduce using rule 18 (parclaves -> STRING STRING .)
    PAR_DER         reduce using rule 18 (parclaves -> STRING STRING .)
    STRING          shift and go to state 31

    parclaves                      shift and go to state 60

state 47

    (11) estructura -> COR_IZQ compuesto COR_DER .

    $end            reduce using rule 11 (estructura -> COR_IZQ compuesto COR_DER .)
    PAR_DER         reduce using rule 11 (estructura -> COR_IZQ compuesto COR_DER .)


state 48

    (17) compuesto -> valor compuesto .

    COR_DER         reduce using rule 17 (compuesto -> valor compuesto .)
    PAR_DER         reduce using rule 17 (compuesto -> valor compuesto .)
    LLAV_DER        reduce using rule 17 (compuesto -> valor compuesto .)


state 49

    (6) estructura -> PAR_IZQ . LISTA PAR_IZQ compuesto PAR_DER PAR_DER
    (8) estructura -> PAR_IZQ . CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER
    (10) estructura -> PAR_IZQ . VECTOR compuesto PAR_DER
    (13) estructura -> PAR_IZQ . mapas parclaves PAR_DER
    (25) cadena -> PAR_IZQ . STR STRING STRING PAR_DER
    (14) mapas -> . SORTEDMAP REST MAP
    (15) mapas -> . HASHMAP REST MAP

    LISTA           shift and go to state 21
    CONJUNTO        shift and go to state 22
    VECTOR          shift and go to state 23
    STR             shift and go to state 25
    SORTEDMAP       shift and go to state 26
    HASHMAP         shift and go to state 27

    mapas                          shift and go to state 24

state 50

    (3) variable -> PAR_IZQ DEF NOMBRE expresion . PAR_DER

    PAR_DER         shift and go to state 61


state 51

    (6) estructura -> PAR_IZQ LISTA PAR_IZQ compuesto . PAR_DER PAR_DER

    PAR_DER         shift and go to state 62


state 52

    (8) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ . compuesto PAR_DER PAR_DER
    (16) compuesto -> . valor
    (17) compuesto -> . valor compuesto
    (20) valor -> . numero
    (21) valor -> . NOMBRE
    (22) valor -> . booleano
    (23) valor -> . cadena
    (28) numero -> . ENTERO
    (29) numero -> . FLOTANTE
    (26) booleano -> . TRUE
    (27) booleano -> . FALSE
    (24) cadena -> . STRING
    (25) cadena -> . PAR_IZQ STR STRING STRING PAR_DER

    NOMBRE          shift and go to state 5
    ENTERO          shift and go to state 15
    FLOTANTE        shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    STRING          shift and go to state 19
    PAR_IZQ         shift and go to state 34

    compuesto                      shift and go to state 63
    valor                          shift and go to state 33
    numero                         shift and go to state 8
    booleano                       shift and go to state 9
    cadena                         shift and go to state 10

state 53

    (10) estructura -> PAR_IZQ VECTOR compuesto PAR_DER .

    $end            reduce using rule 10 (estructura -> PAR_IZQ VECTOR compuesto PAR_DER .)
    PAR_DER         reduce using rule 10 (estructura -> PAR_IZQ VECTOR compuesto PAR_DER .)


state 54

    (13) estructura -> PAR_IZQ mapas parclaves PAR_DER .

    $end            reduce using rule 13 (estructura -> PAR_IZQ mapas parclaves PAR_DER .)
    PAR_DER         reduce using rule 13 (estructura -> PAR_IZQ mapas parclaves PAR_DER .)


state 55

    (25) cadena -> PAR_IZQ STR STRING STRING . PAR_DER

    PAR_DER         shift and go to state 64


state 56

    (14) mapas -> SORTEDMAP REST MAP .

    STRING          reduce using rule 14 (mapas -> SORTEDMAP REST MAP .)


state 57

    (15) mapas -> HASHMAP REST MAP .

    STRING          reduce using rule 15 (mapas -> HASHMAP REST MAP .)


state 58

    (7) estructura -> COM_SIM PAR_IZQ compuesto PAR_DER .

    $end            reduce using rule 7 (estructura -> COM_SIM PAR_IZQ compuesto PAR_DER .)
    PAR_DER         reduce using rule 7 (estructura -> COM_SIM PAR_IZQ compuesto PAR_DER .)


state 59

    (9) estructura -> HASH LLAV_IZQ compuesto LLAV_DER .

    $end            reduce using rule 9 (estructura -> HASH LLAV_IZQ compuesto LLAV_DER .)
    PAR_DER         reduce using rule 9 (estructura -> HASH LLAV_IZQ compuesto LLAV_DER .)


state 60

    (19) parclaves -> STRING STRING parclaves .

    LLAV_DER        reduce using rule 19 (parclaves -> STRING STRING parclaves .)
    PAR_DER         reduce using rule 19 (parclaves -> STRING STRING parclaves .)


state 61

    (3) variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .

    $end            reduce using rule 3 (variable -> PAR_IZQ DEF NOMBRE expresion PAR_DER .)


state 62

    (6) estructura -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER . PAR_DER

    PAR_DER         shift and go to state 65


state 63

    (8) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto . PAR_DER PAR_DER

    PAR_DER         shift and go to state 66


state 64

    (25) cadena -> PAR_IZQ STR STRING STRING PAR_DER .

    $end            reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    NOMBRE          reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    ENTERO          reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    FLOTANTE        reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    TRUE            reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    FALSE           reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    STRING          reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    PAR_IZQ         reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    COR_DER         reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    PAR_DER         reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)
    LLAV_DER        reduce using rule 25 (cadena -> PAR_IZQ STR STRING STRING PAR_DER .)


state 65

    (6) estructura -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .

    $end            reduce using rule 6 (estructura -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 6 (estructura -> PAR_IZQ LISTA PAR_IZQ compuesto PAR_DER PAR_DER .)


state 66

    (8) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER . PAR_DER

    PAR_DER         shift and go to state 67


state 67

    (8) estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .

    $end            reduce using rule 8 (estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)
    PAR_DER         reduce using rule 8 (estructura -> PAR_IZQ CONJUNTO COM_SIM PAR_IZQ compuesto PAR_DER PAR_DER .)

