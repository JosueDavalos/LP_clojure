(def str2 (str "metodo" "2"))
(def var_lista ( list 10 20 30 ))
(def var_set (set '(10 10 5 36)))
(def var_mapa (sorted-map "a" "b" "c" "d"))
(def mapa2 (hash-map "a" "b" "c" "d"))
(def vector1 (vector 1 6 9 3))
( def valor_booleano true )
(defn Example [] (def x 1) (def y 1.25) (println x) (println y))
(defn Example [] (if ( = 2 2) (println "Values are equal") (println "Values are not equal")))
(defn Example [] (def x 1) (while ( < x 5 ) (do (println x) (+ x 1))))
(println (read-line))
(+ (- 9 20) 10)
(defn funcion [varLi varVe varCo varMa varVa]
	(defn funcion [var var2 var3]
		(def var 1)
		(+ 2 2)
	)
	(defn funcion [a x y]
		(+ a x)
		(= x y)
	)
	(first lst)
	(first (list 1 2 3))
	(nth lst index)
	(nth lst 1)
	(nth (list 1 2 3) 1)
	(nth (list 1 2 3) index)
	(cons 0 lst)
	(cons element lst)
	(cons element (list 1 2 3))
	(cons 0 (list 1 2 3))
	(get (set '(3 2 1)) 2)
	(get (set '(3 2 1)) var)
	(conj (set '(3 2 1)) 5)
	(conj (set '(3 2 1)) var)
	(get (vector 3 2 1) 2)
	(get (vector 3 2 1) var)
	(conj (vector 3 2 1) 5)
	(conj (vector 3 2 1) var)
	(keys (hash-map "z" "1" "b" "2" "a" "3"))
	(keys mapa)
	(+ 1 1)
	(- var 0)
	(/ var var)
	( / 1 2)
	(* 4 6)
	(- 4 x y 8 8)
	(+ 1 (- 3 2))
	(= 8 8)
	(< var 0)
	(> var var)
	(<= 1 0)
	(>= var 0)
	(not true)
	(or true false)
	(and var var)
)
(funcion)